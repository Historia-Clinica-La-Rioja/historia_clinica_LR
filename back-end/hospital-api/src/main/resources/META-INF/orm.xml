<entity-mappings
        version="2.1" xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm
    http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd">

    <!-- JPA Named Native Queries -->

    <!-- ========================================== -->
    <!-- ====== Historia clínica electrónica ====== -->
    <!-- ========================================== -->

    <named-native-query name="HCE.findAllMedications" result-set-mapping="HCE.findAllMedicationsResult">
        <query>with temporal as (
            SELECT DISTINCT
            ms.id as medicationStatementId, ms.snomed_id, ms.status_id, ms.created_on, ms.updated_on,
            dsg.*,
            row_number() OVER (PARTITION by ms.snomed_id ORDER BY ms.updated_on desc) AS rw
            FROM document d
            JOIN document_medicamention_statement dms ON d.id = dms.document_id
            JOIN medication_statement ms ON dms.medication_statement_id = ms.id
            LEFT JOIN dosage dsg ON ms.dosage_id = dsg.id
            WHERE ms.patient_id = :patientId
            AND d.type_id IN :documentTypeId
            AND d.status_id = :documentStatusId
            )
            SELECT  t.medicationStatementId AS id , s.sctid AS sctidCode, s.pt AS sctidTerm, status_id AS status,
            t.sequence, t.count, t.duration, t.duration_unit, t.frequency, t.period_unit,
            coalesce(t.start_date, t.created_on) as effectiveTime, t.end_date
            FROM temporal t
            JOIN snomed s ON t.snomed_id = s.id
            WHERE rw = 1 AND status_id = :statusId
            ORDER BY t.updated_on
        </query>
    </named-native-query>

    <named-native-query name="HCE.getDocumentReference" result-set-mapping="HCE.getDocumentReferenceResult">
        <query>
            select pat.id, first_name, middle_names, last_name, bool_and(op.id is not null) as hasDocuments
            from patient pat
            join person per on ( pat.person_id = per.id )
            left join outpatient_consultation op on ( pat.id = op.patient_id )
            where pat.id = :patientId
            group by pat.id, first_name, middle_names, last_name
        </query>
    </named-native-query>

    <named-native-query name="HCE.getPatient" result-set-mapping="HCE.getPatientResult">
        <query>
            select p.first_name, p.middle_names, p.last_name, p.other_last_names, pe.mothers_last_name,
            p.identification_number, p.gender_id, p.birth_date, pe.phone_number, pe.address_id
            from patient pat
            join person p on ( pat.person_id = p.id )
            left join person_extended pe on ( p.id = pe.person_id )
            where pat.id = :patientId
        </query>
    </named-native-query>

    <named-native-query name="HCE.getAddress">
        <query>
            select a.street, a.number, a.floor, a.apartment, a.postcode,
            ci.description as city, p.description as province, co.description as country
            from address a
            left join city ci on ( a.city_id = ci.id )
            left join department d on ( ci.department_id = d.id )
            left join province p on ( d.province_id = p.id )
            left join country co on ( p.country_id = co.id )
            where a.id = :addressId
        </query>
    </named-native-query>

    <named-native-query name="HCE.findAllCondition" result-set-mapping="HCE.findAllConditionResult">
        <query>
            WITH t AS(
            SELECT hc.id, snomed_id, hc.status_id, verification_status_id, start_date, severity,
            hc.created_on, hc.updated_on,
            row_number() over (partition by snomed_id order by hc.updated_on desc) as rw
            FROM document d
            JOIN document_health_condition dhc on d.id = dhc.document_id
            JOIN health_condition hc on dhc.health_condition_id = hc.id
            WHERE d.status_id = :docStatusId
            AND d.type_id = :documentTypeId
            AND hc.patient_id = :patientId
            AND hc.problem_id IN :diagnosisId
            )
            SELECT t.id as id, s.sctid as code, s.pt as term, t.status_id as clinical_status,
            t.verification_status_id, t.start_date, t.severity, t.created_on
            FROM t
            JOIN snomed s ON snomed_id = s.id
            WHERE rw = 1
            AND NOT verification_status_id = :statusId
        </query>
    </named-native-query>

    <named-native-query name="HCE.findAllImmunizations" result-set-mapping="HCE.findAllImmunizationsResult">
        <query>
            WITH t AS (
            SELECT inm.id, snomed_id, inm.status_id, administration_date, expiration_date, inm.created_on, inm.updated_on,
            row_number() over (partition by snomed_id, administration_date order by inm.updated_on desc) as rw
            FROM document d
            JOIN document_inmunization di on d.id = di.document_id
            JOIN inmunization inm on di.inmunization_id = inm.id
            WHERE d.status_id = :docStatusId
            AND d.type_id IN :documentTypeId
            AND inm.patient_id = :patientId
            )
            SELECT t.id as id, s.sctid as code, s.pt as term, status_id, administration_date, created_on, expiration_date
            FROM t
            JOIN snomed s ON t.snomed_id = s.id
            WHERE rw = 1 AND NOT status_id = :statusId
            ORDER BY t.updated_on DESC
        </query>
    </named-native-query>

    <named-native-query name="HCE.findAllAllergies" result-set-mapping="HCE.findAllAllergiesResult">
        <query>
            with temporal as (
            SELECT DISTINCT ai.id, ai.snomed_id, ai.status_id, ai.verification_status_id,
            ai.category_id, ai.criticality, ai.start_date, ai.updated_on,
            row_number() over (partition by ai.snomed_id order by ai.updated_on desc) as rw
            FROM document d
            JOIN document_allergy_intolerance dai ON d.id = dai.document_id
            JOIN allergy_intolerance ai ON dai.allergy_intolerance_id = ai.id
            WHERE d.type_id = :documentTypeId
            AND d.status_id = :documentStatusId
            AND ai.patient_id = :patientId
            )
            SELECT t.id AS id, s.sctid AS code, s.pt as term, t.status_id, t.verification_status_id,
            t.category_id, t.criticality, t.start_date
            FROM temporal t
            JOIN snomed s ON t.snomed_id = s.id
            WHERE rw = 1 AND NOT status_id = :allergyIntoleranceStatus
            ORDER BY t.updated_on desc
        </query>
    </named-native-query>

    <named-native-query name="HCE.getOrganization" result-set-mapping="HCE.getOrganizationResult">
        <query>
            select distinct sisa_code, name, phone_number, address_id
            from institution i
            where id = (
            select distinct institution_id
            from (
            select institution_id from internment_episode ie where patient_id = :patientId
            union
            select institution_id from outpatient_consultation oc where patient_id = :patientId
            ) as subquery
            limit 1)
        </query>
    </named-native-query>

    <!-- ========================================== -->
    <!-- ================ Reports ================= -->
    <!-- ========================================== -->

    <named-native-query name="Reports.ConsultationSummary" result-set-mapping="Reports.OutpatientSummaryResult">
        <query>SELECT oc.doctor_id as professional_id,
            cs.id as specialty_id, cs."name" as specialty, cs.clinical_specialty_type_id as specialtyType,
            extract(year from (age(oc.start_date, per.birth_date))) as "age", per.gender_id,
            CASE WHEN oc.patient_medical_coverage_id is null THEN false ELSE true END as "OS"
            FROM outpatient_consultation oc
            LEFT JOIN clinical_specialty cs on (oc.clinical_specialty_id = cs.id)
            JOIN patient pat on (oc.patient_id = pat.id)
            JOIN person per on (pat.person_id = per.id)
            WHERE oc.institution_id = :institutionId
            AND oc.start_date between :from and :to
            AND oc.billable
            UNION ALL
            SELECT vc.doctor_id as professional_id,
            cs.id as specialty_id, cs."name" as specialty, cs.clinical_specialty_type_id as specialtyType,
            extract(year from (age(vc.performed_date, per.birth_date))) as "age", per.gender_id,
            CASE WHEN vc.patient_medical_coverage_id is null THEN false ELSE true END as "OS"
            FROM vaccine_consultation vc
            LEFT JOIN clinical_specialty cs on (vc.clinical_specialty_id = cs.id)
            JOIN patient pat on (vc.patient_id = pat.id)
            JOIN person per on (pat.person_id = per.id)
            WHERE vc.institution_id = :institutionId
            AND vc.performed_date between :from and :to
            AND vc.billable
        </query>
    </named-native-query>

	<named-native-query name="Reports.OdontologyConsultationSummary" result-set-mapping="Reports.OutpatientSummaryResult">
		<query>SELECT oc.doctor_id as professional_id,
			cs.id as specialty_id, cs."name" as specialty, cs.clinical_specialty_type_id as specialtyType,
			extract(year from (age(oc.created_on, per.birth_date))) as "age", per.gender_id,
			CASE WHEN oc.patient_medical_coverage_id is null THEN false ELSE true END as "OS"
			FROM odontology_consultation oc
			LEFT JOIN clinical_specialty cs on (oc.clinical_specialty_id = cs.id)
			JOIN patient pat on (oc.patient_id = pat.id)
			JOIN person per on (pat.person_id = per.id)
			WHERE oc.institution_id = :institutionId
			AND oc.created_on between :from and :to
			AND oc.billable
		</query>
	</named-native-query>

	<named-native-query name="Reports.NursingConsultationSummary" result-set-mapping="Reports.OutpatientSummaryResult">
		<query>
			SELECT nc.doctor_id as professional_id,
			cs.id as specialty_id, cs."name" as specialty, cs.clinical_specialty_type_id as specialtyType,
			extract(year from (age(nc.created_on, per.birth_date))) as "age", per.gender_id,
			CASE WHEN nc.patient_medical_coverage_id is null THEN false ELSE true END as "OS"
			FROM nursing_consultation nc
			LEFT JOIN clinical_specialty cs on (nc.clinical_specialty_id = cs.id)
			JOIN patient pat on (nc.patient_id = pat.id)
			JOIN person per on (pat.person_id = per.id)
			WHERE nc.institution_id = :institutionId
			AND nc.created_on between :from and :to
		</query>
	</named-native-query>

    <named-native-query name="Reports.ConsultationDetail" result-set-mapping="Reports.ConsultationDetailResult">
        <query>
			WITH consultation AS (
			SELECT  oc.institution_id, oc.patient_id, oc.patient_medical_coverage_id, oc.clinical_specialty_id,
			oc.doctor_id, oc.start_date as start_date, ocr.reasons as reasons,  prob.descriptions as problems, proced.cst_procedures as procedures,
			vs.weight, vs.height, vs.systolic as systolicBloodPressure, vs.diastolic as diastolicBloodPressure,
			vs.cardiovascular_risk as cardiovascularRisk, vs.glycosylated as glycosylatedHemoglobin, vs.blood_glucose as bloodGlucose, vs.head_circunference as headCircunference,
			'outpatient' as consultation_type
			FROM outpatient_consultation oc
			LEFT JOIN (
			SELECT ocr.outpatient_consultation_id as id, STRING_AGG(r.description, ', ') as reasons
			FROM outpatient_consultation_reasons ocr
			JOIN reasons r ON (ocr.reason_id = r.id)
			GROUP BY ocr.outpatient_consultation_id
			) ocr ON (oc.id = ocr.id )
			LEFT JOIN (
			SELECT oc.id, STRING_AGG(sno.pt, ', ') as descriptions
			FROM outpatient_consultation oc
			JOIN document doc ON (oc.document_id = doc.id)
			JOIN document_health_condition dhc ON (doc.id = dhc.document_id)
			JOIN health_condition hc ON (dhc.health_condition_id = hc.id)
			JOIN snomed sno ON (hc.snomed_id = sno.id)
			GROUP BY oc.id
			) prob ON (oc.id = prob.id)
			LEFT JOIN (
			SELECT oc.id,
			MAX(CASE WHEN ovs.loinc_code='8480-6' THEN ovs.value END) as systolic,
			MAX(CASE WHEN ovs.loinc_code='8462-4' THEN ovs.value END) as diastolic,
			MAX(CASE WHEN ovs.loinc_code='8302-2' THEN ovs.value END) as height,
			MAX(CASE WHEN ovs.loinc_code='29463-7' THEN ovs.value END) as weight,
			MAX(CASE WHEN ovs.loinc_code='65853-4' THEN ovs.value END) as cardiovascular_risk,
			MAX(CASE WHEN ovs.loinc_code='62854-5' THEN ovs.value END) as glycosylated,
			MAX(CASE WHEN ovs.loinc_code='15074-8' THEN ovs.value END) as blood_glucose,
			MAX(CASE WHEN ovs.loinc_code='11947-9' THEN ovs.value END) as head_circunference
			FROM outpatient_consultation oc
			LEFT JOIN document_vital_sign dvs ON (oc.document_id = dvs.document_id)
			LEFT JOIN observation_vital_sign ovs ON (dvs.observation_vital_sign_id = ovs.id)
			GROUP BY oc.id
			ORDER BY oc.id
			) vs ON (oc.id = vs.id)
			left join (
			select oc.id, string_agg(s.pt, ', ') as cst_procedures
			from outpatient_consultation oc
			join document d on(d.source_id = oc.id and d.source_type_id = 1)
			join document_procedure dp on(d.id = dp.document_id)
			join "procedures" p on(dp.procedure_id = p.id)
			join snomed s on(p.snomed_id = s.id)
			group by oc.id
			) proced on(proced.id = oc.id)
			WHERE oc.institution_id = :institutionId
			AND oc.billable = true
			AND oc.start_date BETWEEN :startDate AND :endDate
			UNION ALL
			SELECT vc.institution_id, vc.patient_id, vc.patient_medical_coverage_id, vc.clinical_specialty_id,
			vc.doctor_id, vc.performed_date as start_date, NULL AS reasons,  NULL AS problems, null as procedures,
			NULL AS weight, NULL AS height, NULL AS systolicBloodPressure, NULL AS diastolicBloodPressure,
			null as cardiovascularRisk, null as glycosylatedHemoglobin, null as bloodGlucose, null as headCircunference,
			'vaccine' as consultation_type
			FROM vaccine_consultation vc
			WHERE vc.institution_id = :institutionId
			AND vc.billable = true
			AND vc.performed_date BETWEEN :startDate AND :endDate
			)
			SELECT p.description as province, d.description as department, i.sisa_code as sisaCode, i.name as institution,
			CONCAT(pe.last_name, ' ', pe.other_last_names) as patientSurname,
			CONCAT(pe.first_name, ' ', pe.middle_names) as patientFirstName,
			px.name_self_determination as selfPerceivedName,
			it.description as identificationType, pe.identification_number as identificationNumber,
			to_char(pe.birth_date,'DD/MM/YYYY') as birthDate,  g.description as gender,
			CONCAT(a2.street, ' ', a2.number, ' ', a2.floor, ' ', a2.apartment, ' ', c2.description) as address,
			px.phone_number as phoneNumber, px.email as email,
			coverage.coverageName, coverage.affiliateNumber,
			to_char(cst.start_date,'DD/MM/YYYY') as startDate,
			cs.id as clinicalSpecialtyId, cs.name as clinicalSpecialty,
			hp.id as professionalId,
			CONCAT(p2.last_name, ' ', p2.other_last_names, ' ',p2.first_name, ' ', p2.middle_names) as professionalName,
			cst.reasons as reasons,  cst.problems, cst.procedures,
			cst.weight, cst.height, cst.systolicBloodPressure, cst.diastolicBloodPressure,
			cst.cardiovascularRisk, cst.glycosylatedHemoglobin, cst.bloodGlucose, cst.headCircunference, null as cpo, null as ceo
			FROM consultation cst
			JOIN institution i ON (cst.institution_id = i.id)
			JOIN address a ON (i.address_id = a.id)
			LEFT JOIN city c ON (a.city_id = c.id)
			JOIN department d ON (c.department_id = d.id)
			JOIN province p ON (d.province_id = p.id)
			JOIN patient pa ON (cst.patient_id = pa.id)
			JOIN person pe ON (pa.person_id = pe.id)
			LEFT JOIN identification_type it ON (pe.identification_type_id = it.id)
			LEFT JOIN person_extended px ON (px.person_id = pe.id)
			LEFT JOIN self_perceived_gender g ON (px.gender_self_determination = g.id)
			LEFT JOIN address a2 ON (px.address_id = a2.id)
			LEFT JOIN city c2 ON (a2.city_id = c2.id)
			LEFT JOIN (
			select pmc.id, mc."name" AS coverageName, affiliate_number AS affiliateNumber
			from patient_medical_coverage pmc
			join medical_coverage mc on (pmc.medical_coverage_id = mc.id)
			) coverage ON (cst.patient_medical_coverage_id = coverage.id)
			LEFT JOIN clinical_specialty cs ON (cst.clinical_specialty_id = cs.id)
			JOIN healthcare_professional hp ON (cst.doctor_id = hp.id)
			JOIN person p2 ON (hp.person_id = p2.id)
        </query>
    </named-native-query>

	<named-native-query name="Reports.OdontologyConsultationDetail" result-set-mapping="Reports.ConsultationDetailResult">
		<query>
			WITH consultation AS (
			SELECT oc.institution_id, oc.patient_id, oc.patient_medical_coverage_id, oc.clinical_specialty_id,
			oc.doctor_id, oc.created_on as start_date, ocr.reasons as reasons,  concat_ws('/split/', otherprob.descriptions, prob.descriptions) as problems,
			concat_ws('/split/', proced.cst_procedures, otherproced.cst_procedures) as procedures,
			null as weight, null as height, null as systolicBloodPressure, null as diastolicBloodPressure,
			null as cardiovascularRisk, null as glycosylatedHemoglobin, null as bloodGlucose, null as headCircunference, indexs.cpo, indexs.ceo,
			'odontology' as consultation_type
			FROM odontology_consultation oc
			LEFT JOIN (
			SELECT ocr.odontology_consultation_id as id, STRING_AGG(r.description, ', ') as reasons
			FROM odontology_consultation_reason ocr
			JOIN odontology_reason r ON (ocr.reason_id = r.id)
			GROUP BY ocr.odontology_consultation_id
			) ocr ON (oc.id = ocr.id )
			LEFT JOIN (
			SELECT oc.id, STRING_AGG(s2.pt, '/split/') as descriptions
			FROM odontology_consultation oc
			JOIN document doc ON (oc.id = doc.source_id and doc.source_type_id = 6)
			left join document_health_condition dhc on(doc.id = dhc.document_id)
			join health_condition hc on(dhc.health_condition_id = hc.id)
			join snomed s2 on(hc.snomed_id = s2.id)
			GROUP BY oc.id
			) otherprob ON (oc.id = otherprob.id)
			LEFT JOIN (
			SELECT oc.id, STRING_AGG(sno.pt, '/split/') as descriptions
			FROM odontology_consultation oc
			JOIN document doc ON (oc.id = doc.source_id and doc.source_type_id = 6)
			left JOIN document_odontology_diagnostic dod ON (doc.id = dod.document_id)
			JOIN odontology_diagnostic od ON (dod.odontology_diagnostic_id = od.id)
			JOIN snomed sno ON (od.snomed_id = sno.id)
			GROUP BY oc.id
			) prob ON (oc.id = prob.id)
			left join (
			select oc.id, string_agg(s.pt, '/split/') as cst_procedures
			from odontology_consultation oc
			join document d on(d.source_id = oc.id)
			join document_procedure dp on(d.id = dp.document_id and d.source_type_id = 6)
			join "procedures" p on(dp.procedure_id = p.id)
			join snomed s on(p.snomed_id = s.id)
			group by oc.id
			) proced on(proced.id = oc.id)
			left join (
			select oc.id, string_agg(s.pt, '/split/') as cst_procedures
			from odontology_consultation oc
			join document d on(d.source_id = oc.id)
			join document_odontology_procedure dop on(dop.document_id = d.id)
			join odontology_procedure op on(dop.odontology_procedure_id = op.id)
			join snomed s on(op.snomed_id = s.id)
			group by oc.id
			) otherproced on(otherproced.id = oc.id)
			left join (
			select oc.id, concat_ws('-', oci.permanent_c, oci.permanent_p, oci.permanent_o) as cpo, concat_ws('-', oci.temporary_c, oci.temporary_e, oci.temporary_o) as ceo
			from odontology_consultation oc
			join odontology_consultation_indices oci on(oc.id = oci.odontology_consultation_id)
			group by oc.id, oci.permanent_c, oci.permanent_p, oci.permanent_o, oci.temporary_c, oci.temporary_e, oci.temporary_o
			) indexs on(indexs.id = oc.id)
			WHERE oc.institution_id = :institutionId
			AND oc.billable = true
			AND oc.created_on BETWEEN :startDate AND :endDate
			)
			SELECT p.description as province, d.description as department, i.sisa_code as sisaCode, i.name as institution,
			CONCAT(pe.last_name, ' ', pe.other_last_names) as patientSurname,
			CONCAT(pe.first_name, ' ', pe.middle_names) as patientFirstName,
			px.name_self_determination as selfPerceivedName,
			it.description as identificationType, pe.identification_number as identificationNumber,
			to_char(pe.birth_date,'DD/MM/YYYY') as birthDate,  g.description as gender,
			CONCAT(a2.street, ' ', a2.number, ' ', a2.floor, ' ', a2.apartment, ' ', c2.description) as address,
			px.phone_number as phoneNumber, px.email as email,
			coverage.coverageName, coverage.affiliateNumber,
			to_char(cst.start_date,'DD/MM/YYYY') as startDate,
			cs.id as clinicalSpecialtyId, cs.name as clinicalSpecialty,
			hp.id as professionalId,
			CONCAT(p2.last_name, ' ', p2.other_last_names, ' ',p2.first_name, ' ', p2.middle_names) as professionalName,
			cst.reasons as reasons,  cst.problems, cst.procedures,
			cst.weight, cst.height, cst.systolicBloodPressure, cst.diastolicBloodPressure,
			cst.cardiovascularRisk, cst.glycosylatedHemoglobin, cst.bloodGlucose, cst.headCircunference, cst.cpo, cst.ceo
			FROM consultation cst
			JOIN institution i ON (cst.institution_id = i.id)
			JOIN address a ON (i.address_id = a.id)
			LEFT JOIN city c ON (a.city_id = c.id)
			JOIN department d ON (c.department_id = d.id)
			JOIN province p ON (d.province_id = p.id)
			JOIN patient pa ON (cst.patient_id = pa.id)
			JOIN person pe ON (pa.person_id = pe.id)
			LEFT JOIN identification_type it ON (pe.identification_type_id = it.id)
			LEFT JOIN person_extended px ON (px.person_id = pe.id)
			LEFT JOIN self_perceived_gender g ON (px.gender_self_determination = g.id)
			LEFT JOIN address a2 ON (px.address_id = a2.id)
			LEFT JOIN city c2 ON (a2.city_id = c2.id)
			LEFT JOIN (
			select pmc.id, mc."name" AS coverageName, affiliate_number AS affiliateNumber
			from patient_medical_coverage pmc
			join medical_coverage mc on (pmc.medical_coverage_id = mc.id)
			) coverage ON (cst.patient_medical_coverage_id = coverage.id)
			LEFT JOIN clinical_specialty cs ON (cst.clinical_specialty_id = cs.id)
			JOIN healthcare_professional hp ON (cst.doctor_id = hp.id)
			JOIN person p2 ON (hp.person_id = p2.id)
		</query>
	</named-native-query>

	<named-native-query name="Reports.NursingConsultationDetail" result-set-mapping="Reports.ConsultationDetailResult">
		<query>
			WITH consultation AS (
			SELECT  oc.institution_id, oc.patient_id, oc.patient_medical_coverage_id, oc.clinical_specialty_id,
			oc.doctor_id, oc.created_on as start_date, null as reasons,  prob.descriptions as problems, proced.cst_procedures as procedures,
			vs.weight, vs.height, vs.systolic as systolicBloodPressure, vs.diastolic as diastolicBloodPressure,
			vs.cardiovascular_risk as cardiovascularRisk, vs.glycosylated as glycosylatedHemoglobin, vs.blood_glucose as bloodGlucose, vs.head_circunference as headCircunference,
			'nursing' as consultation_type
			FROM nursing_consultation oc
			LEFT JOIN (
			SELECT oc.id, STRING_AGG(sno.pt, ', ') as descriptions
			FROM nursing_consultation oc
			JOIN document doc ON (oc.id = doc.source_id and doc.source_type_id = 7)
			JOIN document_health_condition dhc ON (doc.id = dhc.document_id)
			JOIN health_condition hc ON (dhc.health_condition_id = hc.id)
			JOIN snomed sno ON (hc.snomed_id = sno.id)
			GROUP BY oc.id
			) prob ON (oc.id = prob.id)
			LEFT JOIN (
			SELECT oc.id,
			MAX(CASE WHEN ovs.loinc_code='8480-6' THEN ovs.value END) as systolic,
			MAX(CASE WHEN ovs.loinc_code='8462-4' THEN ovs.value END) as diastolic,
			MAX(CASE WHEN ovs.loinc_code='8302-2' THEN ovs.value END) as height,
			MAX(CASE WHEN ovs.loinc_code='29463-7' THEN ovs.value END) as weight,
			MAX(CASE WHEN ovs.loinc_code='65853-4' THEN ovs.value END) as cardiovascular_risk,
			MAX(CASE WHEN ovs.loinc_code='62854-5' THEN ovs.value END) as glycosylated,
			MAX(CASE WHEN ovs.loinc_code='15074-8' THEN ovs.value END) as blood_glucose,
			MAX(CASE WHEN ovs.loinc_code='11947-9' THEN ovs.value END) as head_circunference
			FROM nursing_consultation oc
			join document d on(oc.id = d.source_id and d.source_type_id = 7)
			LEFT JOIN document_vital_sign dvs ON (d.id = dvs.document_id)
			LEFT JOIN observation_vital_sign ovs ON (dvs.observation_vital_sign_id = ovs.id)
			GROUP BY oc.id
			ORDER BY oc.id
			) vs ON (oc.id = vs.id)
			left join (
			select oc.id, string_agg(s.pt, ', ') as cst_procedures
			from nursing_consultation oc
			join document d on(d.source_id = oc.id)
			join document_procedure dp on(d.id = dp.document_id and d.source_type_id = 7)
			join "procedures" p on(dp.procedure_id = p.id)
			join snomed s on(p.snomed_id = s.id)
			group by oc.id
			) proced on(proced.id = oc.id)
			WHERE oc.institution_id = :institutionId
			AND oc.created_on BETWEEN :startDate AND :endDate
			)
			SELECT p.description as province, d.description as department, i.sisa_code as sisaCode, i.name as institution,
			CONCAT(pe.last_name, ' ', pe.other_last_names) as patientSurname,
			CONCAT(pe.first_name, ' ', pe.middle_names) as patientFirstName,
			px.name_self_determination as selfPerceivedName,
			it.description as identificationType, pe.identification_number as identificationNumber,
			to_char(pe.birth_date,'DD/MM/YYYY') as birthDate,  g.description as gender,
			CONCAT(a2.street, ' ', a2.number, ' ', a2.floor, ' ', a2.apartment, ' ', c2.description) as address,
			px.phone_number as phoneNumber, px.email as email,
			coverage.coverageName, coverage.affiliateNumber,
			to_char(cst.start_date,'DD/MM/YYYY') as startDate,
			cs.id as clinicalSpecialtyId, cs.name as clinicalSpecialty,
			hp.id as professionalId,
			CONCAT(p2.last_name, ' ', p2.other_last_names, ' ',p2.first_name, ' ', p2.middle_names) as professionalName,
			cst.reasons as reasons,  cst.problems, cst.procedures,
			cst.weight, cst.height, cst.systolicBloodPressure, cst.diastolicBloodPressure,
			cst.cardiovascularRisk, cst.glycosylatedHemoglobin, cst.bloodGlucose, cst.headCircunference, null as cpo, null as ceo
			FROM consultation cst
			JOIN institution i ON (cst.institution_id = i.id)
			JOIN address a ON (i.address_id = a.id)
			LEFT JOIN city c ON (a.city_id = c.id)
			JOIN department d ON (c.department_id = d.id)
			JOIN province p ON (d.province_id = p.id)
			JOIN patient pa ON (cst.patient_id = pa.id)
			JOIN person pe ON (pa.person_id = pe.id)
			LEFT JOIN identification_type it ON (pe.identification_type_id = it.id)
			LEFT JOIN person_extended px ON (px.person_id = pe.id)
			LEFT JOIN self_perceived_gender g ON (px.gender_self_determination = g.id)
			LEFT JOIN address a2 ON (px.address_id = a2.id)
			LEFT JOIN city c2 ON (a2.city_id = c2.id)
			LEFT JOIN (
			select pmc.id, mc."name" AS coverageName, affiliate_number AS affiliateNumber
			from patient_medical_coverage pmc
			join medical_coverage mc on (pmc.medical_coverage_id = mc.id)
			) coverage ON (cst.patient_medical_coverage_id = coverage.id)
			LEFT JOIN clinical_specialty cs ON (cst.clinical_specialty_id = cs.id)
			JOIN healthcare_professional hp ON (cst.doctor_id = hp.id)
			JOIN person p2 ON (hp.person_id = p2.id)
		</query>
	</named-native-query>

    <!-- ========================================== -->
    <!-- ============== Appointment =============== -->
    <!-- ========================================== -->

    <named-native-query name="Appointment.medicalCoverage">
        <query>select ap.patient_medical_coverage_id
            from appointment ap
            join appointment_assn apassn on (ap.id = apassn.appointment_id)
            join diary d on (apassn.diary_id = d.id)
            where ap.patient_id = :patientId and
            ap.date_type_id = :currentDate and
            ap.patient_medical_coverage_id is not null and
            (ap.appointment_state_id = :confirmedAppointmentState or
			ap.appointment_state_id = :assignedAppointmentState ) and
            d.healthcare_professional_id = :professionalId
            order by hour asc
            limit 1
        </query>
    </named-native-query>


    <!-- ========================================== -->
    <!-- ============== Results-mapping =============== -->
    <!-- ========================================== -->

    <sql-result-set-mapping name="HCE.findAllMedicationsResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.MedicationVo">
            <column name="id" class="java.lang.Integer"/>
            <column name="sctidCode" class="java.lang.String"/>
            <column name="sctidTerm" class="java.lang.String"/>
            <column name="status" class="java.lang.String"/>
            <column name="sequence" class="java.lang.Integer"/>
            <column name="count" class="java.lang.Integer"/>
            <column name="duration" class="java.lang.Double"/>
            <column name="duration_unit" class="java.lang.String"/>
            <column name="frequency" class="java.lang.Integer"/>
            <column name="period_unit" class="java.lang.String"/>
            <column name="effectiveTime" class="java.sql.Date"/>
            <column name="end_date" class="java.sql.Date"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.getDocumentReferenceResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.BundleVo">
            <column name="id" class="java.lang.Integer"/>
            <column name="first_name" class="java.lang.String"/>
            <column name="middle_names" class="java.lang.String"/>
            <column name="last_name" class="java.lang.String"/>
            <column name="hasDocuments" class="java.lang.Boolean"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.getPatientResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.PatientVo">
            <column name="first_name" class="java.lang.String"/>
            <column name="middle_names" class="java.lang.String"/>
            <column name="last_name" class="java.lang.String"/>
            <column name="other_last_names" class="java.lang.String"/>
            <column name="mothers_last_name" class="java.lang.String"/>
            <column name="identification_number" class="java.lang.String"/>
            <column name="gender_id" class="java.lang.Short"/>
            <column name="birth_date" class="java.lang.String"/>
            <column name="phone_number" class="java.lang.String"/>
            <column name="address_id" class="java.lang.Integer"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.findAllConditionResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.ConditionVo">
            <column name="id" class="java.lang.Integer"/>
            <column name="code" class="java.lang.String"/>
            <column name="term" class="java.lang.String"/>
            <column name="clinical_status" class="java.lang.String"/>
            <column name="verification_status_id" class="java.lang.String"/>
            <column name="start_date" class="java.sql.Date"/>
            <column name="severity" class="java.lang.String"/>
            <column name="created_on" class="java.sql.Date"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.findAllImmunizationsResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.ImmunizationVo">
            <column name="id" class="java.lang.Integer"/>
            <column name="code" class="java.lang.String"/>
            <column name="term" class="java.lang.String"/>
            <column name="status_id" class="java.lang.String"/>
            <column name="administration_date" class="java.sql.Date"/>
            <column name="created_on" class="java.sql.Date"/>
            <column name="expiration_date" class="java.sql.Date"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.findAllAllergiesResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.AllergyIntoleranceVo">
            <column name="id" class="java.lang.Integer"/>
            <column name="code" class="java.lang.String"/>
            <column name="term" class="java.lang.String"/>
            <column name="status_id" class="java.lang.String"/>
            <column name="verification_status_id" class="java.lang.String"/>
            <column name="category_id" class="java.lang.Short"/>
            <column name="criticality" class="java.lang.Short"/>
            <column name="start_date" class="java.sql.Date"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.getOrganizationResult" >
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.OrganizationVo">
            <column name="sisa_code" class="java.lang.String"/>
            <column name="name" class="java.lang.String"/>
            <column name="phone_number" class="java.lang.String"/>
            <column name="address_id" class="java.lang.Integer"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="Reports.OutpatientSummaryResult">
        <constructor-result target-class="net.pladema.reports.repository.ConsultationSummary">
            <column name="professional_id" class="java.lang.Integer"/>
            <column name="specialty_id" class="java.lang.Integer"/>
            <column name="specialty" class="java.lang.String"/>
            <column name="specialtyType" class="java.lang.Short"/>
            <column name="age" class="java.lang.Integer"/>
            <column name="gender_id" class="java.lang.Short"/>
            <column name="OS" class="java.lang.Boolean"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="Reports.ConsultationDetailResult">
        <constructor-result target-class="net.pladema.reports.repository.ConsultationDetail">
            <column name="province" class="java.lang.String"/>
            <column name="department" class="java.lang.String"/>
            <column name="sisaCode" class="java.lang.String"/>
            <column name="institution" class="java.lang.String"/>
            <column name="patientSurname" class="java.lang.String"/>
            <column name="patientFirstName" class="java.lang.String"/>
			<column name="selfPerceivedName" class="java.lang.String"/>
            <column name="identificationType" class="java.lang.String"/>
            <column name="identificationNumber" class="java.lang.String"/>
            <column name="birthDate" class="java.lang.String"/>
            <column name="gender" class="java.lang.String"/>
            <column name="address" class="java.lang.String"/>
            <column name="phoneNumber" class="java.lang.String"/>
            <column name="email" class="java.lang.String"/>
            <column name="coverageName" class="java.lang.String"/>
            <column name="affiliateNumber" class="java.lang.String"/>
            <column name="startDate" class="java.lang.String"/>
            <column name="clinicalSpecialtyId" class="java.lang.Integer"/>
            <column name="clinicalSpecialty" class="java.lang.String"/>
            <column name="professionalId" class="java.lang.Integer"/>
            <column name="professionalName" class="java.lang.String"/>
            <column name="reasons" class="java.lang.String"/>
            <column name="problems" class="java.lang.String"/>
			<column name="procedures" class="java.lang.String"/>
            <column name="weight" class="java.lang.String"/>
            <column name="height" class="java.lang.String"/>
            <column name="systolicBloodPressure" class="java.lang.String"/>
            <column name="diastolicBloodPressure" class="java.lang.String"/>
			<column name="cardiovascularRisk" class="java.lang.String"/>
			<column name="glycosylatedHemoglobin" class="java.lang.String"/>
			<column name="bloodGlucose" class="java.lang.String"/>
			<column name="headCircunference" class="java.lang.String"/>
			<column name="cpo" class="java.lang.String"/>
			<column name="ceo" class="java.lang.String"/>
        </constructor-result>

    </sql-result-set-mapping>

</entity-mappings>