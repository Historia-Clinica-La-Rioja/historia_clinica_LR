<entity-mappings
        version="2.1" xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm
    http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd">

    <!-- JPA Named Native Queries -->

    <!-- ========================================== -->
    <!-- ====== Historia clínica electrónica ====== -->
    <!-- ========================================== -->

    <named-native-query name="HCE.findAllMedications" result-set-mapping="HCE.findAllMedicationsResult">
        <query>with temporal as (
            SELECT DISTINCT
            ms.id as medicationStatementId, ms.snomed_id, ms.status_id, ms.created_on, ms.updated_on,
            dsg.*,
            row_number() OVER (PARTITION by ms.snomed_id ORDER BY ms.updated_on desc) AS rw
            FROM document d
            JOIN document_medicamention_statement dms ON d.id = dms.document_id
            JOIN medication_statement ms ON dms.medication_statement_id = ms.id
            LEFT JOIN dosage dsg ON ms.dosage_id = dsg.id
            WHERE ms.patient_id = :patientId
            AND d.type_id IN :documentTypeId
            AND d.status_id = :documentStatusId
            )
            SELECT  t.medicationStatementId AS id , s.sctid AS sctidCode, s.pt AS sctidTerm, status_id AS status,
            t.sequence, t.count, t.duration, t.duration_unit, t.frequency, t.period_unit,
            coalesce(t.start_date, t.created_on) as effectiveTime, t.end_date
            FROM temporal t
            JOIN snomed s ON t.snomed_id = s.id
            WHERE rw = 1 AND status_id = :statusId
            ORDER BY t.updated_on
        </query>
    </named-native-query>

    <named-native-query name="HCE.getDocumentReference" result-set-mapping="HCE.getDocumentReferenceResult">
        <query>
            select pat.id, first_name, middle_names, last_name, bool_and(op.id is not null) as hasDocuments
            from patient pat
            join person per on ( pat.person_id = per.id )
            left join outpatient_consultation op on ( pat.id = op.patient_id )
            where pat.id = :patientId
            group by pat.id, first_name, middle_names, last_name
        </query>
    </named-native-query>

    <named-native-query name="HCE.getPatient" result-set-mapping="HCE.getPatientResult">
        <query>
            select p.first_name, p.middle_names, p.last_name, p.other_last_names, pe.mothers_last_name,
            p.identification_number, p.gender_id, p.birth_date, pe.phone_number, pe.address_id
            from patient pat
            join person p on ( pat.person_id = p.id )
            left join person_extended pe on ( p.id = pe.person_id )
            where pat.id = :patientId
        </query>
    </named-native-query>

    <named-native-query name="HCE.getAddress">
        <query>
            select a.street, a.number, a.floor, a.apartment, a.postcode,
            ci.description as city, p.description as province, co.description as country
            from address a
            left join city ci on ( a.city_id = ci.id )
            left join department d on ( ci.department_id = d.id )
            left join province p on ( d.province_id = p.id )
            left join country co on ( p.country_id = co.id )
            where a.id = :addressId
        </query>
    </named-native-query>

    <named-native-query name="HCE.findAllCondition" result-set-mapping="HCE.findAllConditionResult">
        <query>
            WITH t AS(
            SELECT hc.id, snomed_id, hc.status_id, verification_status_id, start_date, severity,
            hc.created_on, hc.updated_on,
            row_number() over (partition by snomed_id order by hc.updated_on desc) as rw
            FROM document d
            JOIN document_health_condition dhc on d.id = dhc.document_id
            JOIN health_condition hc on dhc.health_condition_id = hc.id
            WHERE d.status_id = :docStatusId
            AND d.type_id = :documentTypeId
            AND hc.patient_id = :patientId
            AND hc.problem_id IN :diagnosisId
            )
            SELECT t.id as id, s.sctid as code, s.pt as term, t.status_id as clinical_status,
            t.verification_status_id, t.start_date, t.severity, t.created_on
            FROM t
            JOIN snomed s ON snomed_id = s.id
            WHERE rw = 1
            AND NOT verification_status_id = :statusId
        </query>
    </named-native-query>

    <named-native-query name="HCE.findAllImmunizations" result-set-mapping="HCE.findAllImmunizationsResult">
        <query>
            WITH t AS (
            SELECT inm.id, snomed_id, inm.status_id, administration_date, expiration_date, inm.created_on, inm.updated_on,
            row_number() over (partition by snomed_id, administration_date order by inm.updated_on desc) as rw
            FROM document d
            JOIN document_inmunization di on d.id = di.document_id
            JOIN inmunization inm on di.inmunization_id = inm.id
            WHERE d.status_id = :docStatusId
            AND d.type_id IN :documentTypeId
            AND inm.patient_id = :patientId
            )
            SELECT t.id as id, s.sctid as code, s.pt as term, status_id, administration_date, created_on, expiration_date
            FROM t
            JOIN snomed s ON t.snomed_id = s.id
            WHERE rw = 1 AND NOT status_id = :statusId
            ORDER BY t.updated_on DESC
        </query>
    </named-native-query>

    <named-native-query name="HCE.findAllAllergies" result-set-mapping="HCE.findAllAllergiesResult">
        <query>
            with temporal as (
            SELECT DISTINCT ai.id, ai.snomed_id, ai.status_id, ai.verification_status_id,
            ai.category_id, ai.criticality, ai.start_date, ai.updated_on,
            row_number() over (partition by ai.snomed_id order by ai.updated_on desc) as rw
            FROM document d
            JOIN document_allergy_intolerance dai ON d.id = dai.document_id
            JOIN allergy_intolerance ai ON dai.allergy_intolerance_id = ai.id
            WHERE d.type_id = :documentTypeId
            AND d.status_id = :documentStatusId
            AND ai.patient_id = :patientId
            )
            SELECT t.id AS id, s.sctid AS code, s.pt as term, t.status_id, t.verification_status_id,
            t.category_id, t.criticality, t.start_date
            FROM temporal t
            JOIN snomed s ON t.snomed_id = s.id
            WHERE rw = 1 AND NOT status_id = :allergyIntoleranceStatus
            ORDER BY t.updated_on desc
        </query>
    </named-native-query>

    <named-native-query name="HCE.getOrganization" result-set-mapping="HCE.getOrganizationResult">
        <query>
            select distinct sisa_code, name, phone_number, address_id
            from institution i
            where id = (
            select distinct institution_id
            from (
            select institution_id from internment_episode ie where patient_id = :patientId
            union
            select institution_id from outpatient_consultation oc where patient_id = :patientId
            ) as subquery
            limit 1)
        </query>
    </named-native-query>

	<named-native-query name="HCE.getMedication" result-set-mapping="HCE.findAllMedicationsResult">
		<query>
			SELECT  ms.id, s.sctid AS sctidCode, s.pt AS sctidTerm, ms.status_id AS status,
			dsg.sequence, dsg.count, dsg.duration, dsg.duration_unit, dsg.frequency, dsg.period_unit,
			coalesce(dsg.start_date, ms.created_on) as effectiveTime, dsg.end_date
			FROM medication_statement ms
			JOIN snomed s ON ( ms.snomed_id = s.id )
			LEFT JOIN dosage dsg ON ( ms.dosage_id = dsg.id )
			WHERE (ms.id = :medicationStatementId) and (ms.deleted is not true)
		</query>
	</named-native-query>

	<named-native-query name="HCE.getOrganizationFromId" result-set-mapping="HCE.getOrganizationResult">
		<query>
			select i.sisa_code, i.name, i.phone_number, i.address_id
			from institution i
			where i.id = :institutionId
		</query>
	</named-native-query>

	<named-native-query name="HCE.getPractitioner" result-set-mapping="HCE.getPractitionerResult">
		<query>
			select hp.person_id, p.identification_number, p.first_name, p.middle_names, p.last_name,
			p.other_last_names, pext.phone_prefix, pext.phone_number,
			pext.address_id, p.gender_id, p.birth_date
			from healthcare_professional hp
			join person p on ( hp.person_id = p.id )
			join person_extended pext on ( p.id = pext.person_id )
			where (hp.id = :doctorId)
		</query>
	</named-native-query>

	<named-native-query name="HCE.getCoverage" result-set-mapping="HCE.getCoverageResult">
		<query>
			select pmc.id as patientMedicalCoverageId, mc.id as medicalCoverageId, pmc.affiliate_number,
			pmc.active, pmc.patient_id, pmc.start_date, pmc.end_date, mc.cuit, mc.name, pmc.plan_id, mcp.plan
			from patient_medical_coverage pmc
			join medical_coverage mc on ( pmc.medical_coverage_id = mc.id )
			left join medical_coverage_plan mcp on ( pmc.plan_id = mcp.id )
			where (pmc.id = :patientMedicalCoverageId)
		</query>
	</named-native-query>

	<named-native-query name="HCE.getMedicationRequest" result-set-mapping="HCE.getMedicationRequestResult">
		<query>
			select mr.id, mr.status_id, mr.intent_id, mr.category_id as categoryId,
			ms.id as medicationStatementId, mr.patient_id,
			mr.institution_id, mr.request_date, mr.doctor_id, s.sctid as problemId, s.pt as problemPt, mr.medical_coverage_id,
			n.description, mr.has_recipe, dos.frequency, dos.period_unit,q.value as quantityValue, q.unit as quantityUnit, dos.duration,
			dos.duration_unit , ms.prescription_date, ms.due_date, dos.sequence, dos.count as timingRepeat, ms.prescription_line_state, ms.prescription_line_number,
			mr.uuid as requestUuid, ms.uuid as lineUuid
			from medication_request mr
			join document d on ( mr.id = d.source_id and d.type_id = 14)
			join document_medicamention_statement dms on ( d.id = dms.document_id )
			join medication_statement ms on ( dms.medication_statement_id = ms.id )
			left join dosage dos on ( ms.dosage_id = dos.id )
			left join quantity q on ( dos.dose_quantity_id = q.id )
			left join note n on ( mr.note_id = n.id )
			left join health_condition hc on ( ms.health_condition_id = hc.id )
			left join snomed s on ( hc.snomed_id = s.id )
			left join patient p on ( mr.patient_id = p.id )
			left join person per on ( p.person_id = per.id )
			where (mr.uuid = :medicationRequestUuid)
			and (per.identification_type_id = 1)
			and (per.identification_number = :identificationNumber)
		</query>
	</named-native-query>

	<named-native-query name="HCE.getMedicationDataForValidation" result-set-mapping="HCE.getMedicationDataForValidationResult">
		<query>
			select mr.id, mr.status_id, mr.intent_id, mr.category_id as categoryId,
			ms.id as medicationStatementId, mr.patient_id,
			mr.institution_id, mr.request_date, mr.doctor_id, s.sctid as medicationCode, mr.medical_coverage_id,
			n.description, mr.has_recipe, dos.frequency, dos.period_unit,q.value as quantityValue, q.unit as quantityUnit, dos.duration,
			dos.duration_unit , ms.prescription_date, ms.due_date, dos.sequence, dos.count as timingRepeat, ms.prescription_line_state,
			per.identification_number, pmc.medical_coverage_id as medicalCoverageId, pmc.affiliate_number, ms.prescription_line_number
			from medication_request mr
			join document d on ( mr.id = d.source_id )
			join document_medicamention_statement dms on ( d.id = dms.document_id )
			join medication_statement ms on ( dms.medication_statement_id = ms.id and ms.uuid = :lineUuid )
			left join dosage dos on ( ms.dosage_id = dos.id )
			left join quantity q on ( dos.dose_quantity_id = q.id )
			left join note n on ( mr.note_id = n.id )
			left join health_condition hc on ( ms.health_condition_id = hc.id )
			left join snomed s on ( ms.snomed_id = s.id )
			left join patient_medical_coverage pmc on ( mr.medical_coverage_id = pmc.id )
			left join patient p on ( mr.patient_id = p.id )
			left join person per on ( p.person_id = per.id )
			where (mr.uuid = :medicationRequestUuid)
		</query>
	</named-native-query>

	<named-native-query name="HCE.setLineStateMedication">
		<query>
			UPDATE medication_statement ms set prescription_line_state = :lineStateId where ms.id in :medicationStatementIds
		</query>
	</named-native-query>

	<named-native-query name="HCE.isMedicationRequestCompleted">
		<query>
			select (CASE WHEN COUNT(ms.id) > 0 THEN FALSE ELSE TRUE END)
			from medication_request mr
			join document d on ( mr.id = d.source_id and d.type_id = 14 )
			join document_medicamention_statement dms on ( d.id = dms.document_id )
			join medication_statement ms on ( (dms.medication_statement_id = ms.id) and (ms.prescription_line_state != 2) )
			where mr.id = :medicationRequestId
		</query>
	</named-native-query>

	<named-native-query name="HCE.setMedicationRequestCompleted">
		<query>
			UPDATE medication_request mr set status_id = '255594003' where mr.id = :medicationRequestId
		</query>
	</named-native-query>
	
	<named-native-query name="HCE.getServiceRequest" result-set-mapping="HCE.getServiceRequestResult">
		<query>
			with temporal as (
			select sr.id, sr.status_id as serviceRequestStatus, sr.intent_id,
			sr.category_id as categoryId, dr.id as diagnosticReportId, sr.patient_id,
			sr.institution_id, sr.request_date, sr.doctor_id, s.sctid as problemId,
			s.pt as problemPt, sr.medical_coverage_id, n.description, dr.link,
			dr.status_id as diagnosticReportStatus, dr.snomed_id as diagnosticReportSnomedId,
			sr.uuid as serviceRequestUuid, dr.uuid as diagnosticReportUuid
			from service_request sr
			join document d on ( sr.id = d.source_id and d.source_type_id = 3 )
			join document_diagnostic_report ddr ON ( d.id = ddr.document_id )
			join diagnostic_report dr ON ( ddr.diagnostic_report_id = dr.id )
			left join note n on ( sr.note_id = n.id )
			left join health_condition hc on ( dr.health_condition_id = hc.id )
			left join snomed s on ( hc.snomed_id = s.id )
			left join patient p on ( sr.patient_id = p.id )
			left join person per on ( p.person_id = per.id )
			where (sr.id = :serviceRequestId)
			and (per.identification_type_id = 1)
			and (per.identification_number = :identificationNumber)
			)
			select t.id, t.serviceRequestStatus, t.intent_id, t.categoryId, t.diagnosticReportId,
			t.patient_id, t.institution_id, t.request_date, t.doctor_id, t.problemId, t.problemPt,
			t.medical_coverage_id, t.description, t.link, t.diagnosticReportStatus,
			s.sctid, s.pt, t.serviceRequestUuid, t.diagnosticReportUuid
			from temporal t
			left join snomed s on ( t.diagnosticReportSnomedId = s.id )
		</query>
	</named-native-query>

	<named-native-query name="HCE.getServiceRequestDataForValidation" result-set-mapping="HCE.getServiceRequestDataForValidationResult">
		<query>
			select sr.id as serviceRequestId, dr.id as diagnosticReportId, sr.patient_id, per.identification_number,
			sr.institution_id, sr.request_date, sr.doctor_id, sr.medical_coverage_id,
			pmc.medical_coverage_id as medicalCoverageId, pmc.affiliate_number,
			sr.status_id as serviceRequestStatusId, dr.status_id as diagnosticReportStatusId
			from service_request sr
			join document d on ( sr.id = d.source_id and d.source_type_id = 3 )
			join document_diagnostic_report ddr ON ( d.id = ddr.document_id )
			join diagnostic_report dr ON ( ddr.diagnostic_report_id = dr.id and dr.uuid = :diagnosticReportUuid )
			left join patient_medical_coverage pmc on ( sr.medical_coverage_id = pmc.id )
			left join patient p on ( sr.patient_id = p.id )
			left join person per on ( p.person_id = per.id )
			where (sr.uuid = :serviceRequestUuid)
		</query>
	</named-native-query>

	<named-native-query name="HCE.setDiagnosticReportStatus">
		<query>
			UPDATE diagnostic_report dr set status_id = :statusId where dr.uuid = :diagnosticReportUuid
		</query>
	</named-native-query>

	<named-native-query name="HCE.isServiceRequestCompleted">
		<query>
			select (CASE WHEN COUNT(dr.*) > 0 THEN FALSE ELSE TRUE END)
			from service_request sr
			join document d on ( sr.id = d.source_id and d.source_type_id = 3 )
			join document_diagnostic_report ddr ON ( d.id = ddr.document_id )
			join diagnostic_report dr ON ( (ddr.diagnostic_report_id = dr.id) and (dr.status_id = '255609007' or dr.status_id = '1') )
			where (sr.id = :serviceRequestId)
		</query>
	</named-native-query>

	<named-native-query name="HCE.setServiceRequestCompleted">
		<query>
			UPDATE service_request sr set status_id = '255594003' where sr.id = :serviceRequestId
		</query>
	</named-native-query>
	
    <!-- ========================================== -->
    <!-- ================ Reports ================= -->
    <!-- ========================================== -->

    <named-native-query name="Reports.ConsultationSummary" result-set-mapping="Reports.OutpatientSummaryResult">
        <query>SELECT oc.doctor_id as professional_id,
            cs.id as specialty_id, cs."name" as specialty, cs.clinical_specialty_type_id as specialtyType,
            extract(year from (age(oc.start_date, per.birth_date))) as "age", per.gender_id,
            CASE WHEN oc.patient_medical_coverage_id is null THEN false ELSE true END as "OS",
			oc.hierarchical_unit_id as hierarchicalUnitId, hut.id as hierarchicalUnitTypeId
            FROM outpatient_consultation oc
            LEFT JOIN clinical_specialty cs on (oc.clinical_specialty_id = cs.id)
            JOIN patient pat on (oc.patient_id = pat.id)
            JOIN person per on (pat.person_id = per.id)
			LEFT JOIN hierarchical_unit hu ON (oc.hierarchical_unit_id = hu.id)
			LEFT JOIN hierarchical_unit_type hut ON (hu.type_id = hut.id)
            WHERE oc.institution_id = :institutionId
            AND oc.start_date between :from and :to
            AND oc.billable
            UNION ALL
            SELECT vc.doctor_id as professional_id,
            cs.id as specialty_id, cs."name" as specialty, cs.clinical_specialty_type_id as specialtyType,
            extract(year from (age(vc.performed_date, per.birth_date))) as "age", per.gender_id,
            CASE WHEN vc.patient_medical_coverage_id is null THEN false ELSE true END as "OS",
			NULL as hierarchicalUnitId, NULL as hierarchicalUnitTypeId
            FROM vaccine_consultation vc
            LEFT JOIN clinical_specialty cs on (vc.clinical_specialty_id = cs.id)
            JOIN patient pat on (vc.patient_id = pat.id)
            JOIN person per on (pat.person_id = per.id)
            WHERE vc.institution_id = :institutionId
            AND vc.performed_date between :from and :to
            AND vc.billable
        </query>
    </named-native-query>

	<named-native-query name="Reports.OdontologyConsultationSummary" result-set-mapping="Reports.OutpatientSummaryResult">
		<query>SELECT oc.doctor_id as professional_id,
			cs.id as specialty_id, cs."name" as specialty, cs.clinical_specialty_type_id as specialtyType,
			extract(year from (age(oc.created_on, per.birth_date))) as "age", per.gender_id,
			CASE WHEN oc.patient_medical_coverage_id is null THEN false ELSE true END as "OS",
			oc.hierarchical_unit_id as hierarchicalUnitId, hut.id as hierarchicalUnitTypeId
			FROM odontology_consultation oc
			LEFT JOIN clinical_specialty cs on (oc.clinical_specialty_id = cs.id)
			JOIN patient pat on (oc.patient_id = pat.id)
			JOIN person per on (pat.person_id = per.id)
			LEFT JOIN hierarchical_unit hu on (oc.hierarchical_unit_id = hu.id)
			LEFT JOIN hierarchical_unit_type hut on (hu.type_id = hut.id)
			WHERE oc.institution_id = :institutionId
			AND oc.created_on between :from and :to
			AND oc.billable
		</query>
	</named-native-query>

	<named-native-query name="Reports.NursingConsultationSummary" result-set-mapping="Reports.OutpatientSummaryResult">
		<query>
			SELECT nc.doctor_id as professional_id,
			cs.id as specialty_id, cs."name" as specialty, cs.clinical_specialty_type_id as specialtyType,
			extract(year from (age(nc.created_on, per.birth_date))) as "age", per.gender_id,
			CASE WHEN nc.patient_medical_coverage_id is null THEN false ELSE true END as "OS",
			nc.hierarchical_unit_id as hierarchicalUnitId, hut.id as hierarchicalUnitTypeId
			FROM nursing_consultation nc
			LEFT JOIN clinical_specialty cs on (nc.clinical_specialty_id = cs.id)
			JOIN patient pat on (nc.patient_id = pat.id)
			JOIN person per on (pat.person_id = per.id)
			LEFT JOIN hierarchical_unit hu on (nc.hierarchical_unit_id = hu.id)
			LEFT JOIN hierarchical_unit_type hut on (hu.type_id = hut.id)
			WHERE nc.institution_id = :institutionId
			AND nc.created_on between :from and :to
		</query>
	</named-native-query>

    <named-native-query name="Reports.ConsultationDetail" result-set-mapping="Reports.ConsultationDetailResult">
        <query>
			WITH consultation AS (SELECT oc.patient_id, oc.patient_medical_coverage_id, oc.clinical_specialty_id,
			oc.doctor_id, oc.created_on as start_date, reasons.description as reasons,
			problems.description as problems, proced.description as procedures,
			MAX(CASE WHEN ovs.loinc_code='8480-6' THEN ovs.value END) as systolicBloodPressure,
			MAX(CASE WHEN ovs.loinc_code='8462-4' THEN ovs.value END) as diastolicBloodPressure,
			MAX(CASE WHEN ovs.loinc_code='8302-2' THEN ovs.value END) as height,
			MAX(CASE WHEN ovs.loinc_code='29463-7' THEN ovs.value END) as weight,
			MAX(CASE WHEN ovs.loinc_code='65853-4' THEN ovs.value END) as cardiovascularRisk,
			MAX(CASE WHEN ovs.loinc_code='62854-5' THEN ovs.value END) as glycosylatedHemoglobin,
			MAX(CASE WHEN ovs.loinc_code='15074-8' THEN ovs.value END) as bloodGlucose,
			MAX(CASE WHEN ovs.loinc_code='11947-9' THEN ovs.value END) as headCircunference,
			'outpatient' as consultation_type, oc.hierarchical_unit_id as hierarchicalUnitId
			FROM outpatient_consultation oc
			LEFT JOIN (
			SELECT ocr.outpatient_consultation_id AS oc_id , STRING_AGG(r.description, ', ') AS description
			FROM outpatient_consultation_reasons ocr
			JOIN reasons r ON (r.id = ocr.reason_id)
			GROUP BY ocr.outpatient_consultation_id
			) reasons ON (reasons.oc_id = oc.id)
			LEFT JOIN (
			SELECT dhc.document_id AS document_id,  STRING_AGG(s.pt, ', ') AS description
			FROM document_health_condition dhc
			JOIN health_condition hc ON (hc.id = dhc.health_condition_id AND hc.problem_id != '57177007' )
			JOIN snomed s ON (s.id = hc.snomed_id)
			GROUP BY dhc.document_id
			) problems ON (problems.document_id = oc.document_id)
			LEFT JOIN (
			SELECT dp.document_id AS document_id,  STRING_AGG(s.pt, ', ') AS description
			FROM document_procedure dp
			JOIN "procedures" p ON (p.id = dp.procedure_id)
			JOIN snomed s ON (s.id = p.snomed_id)
			GROUP BY dp.document_id
			) proced ON (proced.document_id = oc.document_id)
			LEFT JOIN document_vital_sign dvs ON (dvs.document_id = oc.document_id)
			LEFT JOIN observation_vital_sign ovs ON (dvs.observation_vital_sign_id = ovs.id)
			WHERE oc.institution_id = :institutionId
			AND oc.billable = true
			AND oc.created_on BETWEEN :startDate AND :endDate
			GROUP BY oc.id, oc.patient_id , oc.patient_medical_coverage_id , oc.clinical_specialty_id , oc.doctor_id, oc.doctor_id, reasons.description, problems.description, proced.description
			UNION ALL
			SELECT  vc.patient_id, vc.patient_medical_coverage_id, vc.clinical_specialty_id,
			vc.doctor_id, vc.performed_date as start_date, NULL AS reasons,  NULL AS problems, NULL as procedures,
			NULL AS weight, NULL AS height, NULL AS systolicBloodPressure, NULL AS diastolicBloodPressure,
			NULL as cardiovascularRisk, NULL as glycosylatedHemoglobin, NULL as bloodGlucose, NULL as headCircunference,
			'vaccine' as consultation_type, NULL as hierarchicalUnitId
			FROM vaccine_consultation vc
			WHERE vc.institution_id = :institutionId
			AND vc.billable = true
			AND vc.performed_date BETWEEN :startDate AND :endDate
			)
			SELECT CONCAT(pe.last_name, ' ', pe.other_last_names) as patientSurname,
			CONCAT(pe.first_name, ' ', pe.middle_names) as patientFirstName,
			px.name_self_determination as selfPerceivedName,
			it.description as identificationType, pe.identification_number as identificationNumber,
			to_char(pe.birth_date,'DD/MM/YYYY') as birthDate,  g.description as gender,
			CONCAT(a2.street, ' ', a2.number, ' ', a2.floor, ' ', a2.apartment, ' ', c2.description) as address,
			px.phone_number as phoneNumber, px.email as email,
			mc."name" as coverageName, pmc.affiliate_number as affiliateNumber,
			cst.start_date as startDate,
			cs.id as clinicalSpecialtyId, cs.name as clinicalSpecialty,
			hp.id as professionalId,
			CONCAT(p2.last_name, ' ', p2.other_last_names, ' ',p2.first_name, ' ', p2.middle_names) as professionalName,
			cst.reasons as reasons,  cst.problems, cst.procedures,
			cst.weight, cst.height, cst.systolicBloodPressure, cst.diastolicBloodPressure,
			cst.cardiovascularRisk, cst.glycosylatedHemoglobin, cst.bloodGlucose, cst.headCircunference, null as cpo, null as ceo,
			cst.hierarchicalUnitId as hierarchicalUnitId, hu.alias as hierarchicalUnitAlias,
			hut.id as hierarchicalUnitTypeId, hut.description as hierarchicalUnitTypeDescription
			FROM consultation cst
			JOIN patient pa ON (cst.patient_id = pa.id)
			JOIN person pe ON (pa.person_id = pe.id)
			LEFT JOIN identification_type it ON (pe.identification_type_id = it.id)
			LEFT JOIN person_extended px ON (px.person_id = pe.id)
			LEFT JOIN self_perceived_gender g ON (px.gender_self_determination = g.id)
			LEFT JOIN address a2 ON (px.address_id = a2.id)
			LEFT JOIN city c2 ON (a2.city_id = c2.id)
			LEFT JOIN patient_medical_coverage pmc on pmc.id = cst.patient_medical_coverage_id
			LEFT JOIN medical_coverage mc on pmc.medical_coverage_id = mc.id
			LEFT JOIN clinical_specialty cs ON (cst.clinical_specialty_id = cs.id)
			JOIN healthcare_professional hp ON (cst.doctor_id = hp.id)
			JOIN person p2 ON (hp.person_id = p2.id)
			LEFT JOIN hierarchical_unit hu ON (cst.hierarchicalUnitId = hu.id)
			LEFT JOIN hierarchical_unit_type hut ON (hu.type_id = hut.id)
		</query>
    </named-native-query>

	<named-native-query name="Reports.OdontologyConsultationDetail" result-set-mapping="Reports.ConsultationDetailResult">
		<query>
			WITH consultation AS (
			SELECT oc.patient_id, oc.patient_medical_coverage_id, oc.clinical_specialty_id,
			oc.doctor_id, oc.created_on as start_date, reasons.description as reasons,  concat_ws('/split/', other_problems.description, diagnostics.description) as problems,
			concat_ws('/split/', procedures.description, odontology_procedures.description) as procedures,
			null as weight, null as height, null as systolicBloodPressure, null as diastolicBloodPressure,
			null as cardiovascularRisk, null as glycosylatedHemoglobin, null as bloodGlucose, null as headCircunference, concat_ws('-', oci.permanent_c, oci.permanent_p, oci.permanent_o) as cpo,  concat_ws('-', oci.temporary_c, oci.temporary_e, oci.temporary_o) as ceo,
			'odontology' as consultation_type, oc.hierarchical_unit_id as hierarchicalUnitId
			FROM odontology_consultation oc
			LEFT JOIN (
			SELECT ocr.odontology_consultation_id AS oc_id , STRING_AGG(r.description, ', ') AS description
			FROM odontology_consultation_reason ocr
			JOIN odontology_reason r ON (r.id = ocr.reason_id)
			GROUP BY ocr.odontology_consultation_id
			) reasons ON (reasons.oc_id = oc.id)
			JOIN document d ON (oc.id = d.source_id and d.source_type_id = 6)
			LEFT JOIN (
			SELECT dhc.document_id AS document_id,  STRING_AGG(s.pt, ', ') AS description
			FROM document_health_condition dhc
			JOIN health_condition hc ON (hc.id = dhc.health_condition_id)
			JOIN snomed s ON (s.id = hc.snomed_id)
			GROUP BY dhc.document_id
			) other_problems ON (other_problems.document_id = d.id)
			LEFT JOIN (
			SELECT dod.document_id AS document_id,  STRING_AGG(s.pt, ', ') AS description
			FROM document_odontology_diagnostic dod
			JOIN odontology_diagnostic od ON (od.id = dod.odontology_diagnostic_id)
			JOIN snomed s ON (s.id = od.snomed_id)
			GROUP BY dod.document_id
			) diagnostics ON (diagnostics.document_id = d.id)
			LEFT JOIN (
			SELECT dp.document_id AS document_id,  STRING_AGG(s.pt, ', ') AS description
			FROM document_procedure dp
			JOIN "procedures" p ON (p.id = dp.procedure_id)
			JOIN snomed s ON (s.id = p.snomed_id)
			GROUP BY dp.document_id
			) procedures ON (procedures.document_id = d.id)
			LEFT JOIN (
			SELECT dop.document_id AS document_id,  STRING_AGG(s.pt, ', ') AS description
			FROM document_odontology_procedure dop
			JOIN odontology_procedure op ON (op.id = dop.odontology_procedure_id)
			JOIN snomed s ON (s.id = op.snomed_id)
			GROUP BY dop.document_id
			) odontology_procedures ON (odontology_procedures.document_id = d.id)
			LEFT JOIN odontology_consultation_indices oci ON (oc.id = oci.odontology_consultation_id)
			WHERE oc.institution_id = :institutionId
			AND oc.billable = true
			AND oc.created_on BETWEEN :startDate AND :endDate
			GROUP BY oc.id, oc.patient_id, oc.patient_medical_coverage_id , oc.clinical_specialty_id, oc.doctor_id, oci.permanent_c, oci.permanent_p, oci.permanent_o, oci.temporary_c, oci.temporary_e, oci.temporary_o, reasons.description, other_problems.description, diagnostics.description, procedures.description, odontology_procedures.description
			)
			SELECT CONCAT(pe.last_name, ' ', pe.other_last_names) as patientSurname,
			CONCAT(pe.first_name, ' ', pe.middle_names) as patientFirstName,
			px.name_self_determination as selfPerceivedName,
			it.description as identificationType, pe.identification_number as identificationNumber,
			to_char(pe.birth_date,'DD/MM/YYYY') as birthDate,  g.description as gender,
			CONCAT(a2.street, ' ', a2.number, ' ', a2.floor, ' ', a2.apartment, ' ', c2.description) as address,
			px.phone_number as phoneNumber, px.email as email,
			mc."name" as coverageName, pmc.affiliate_number as affiliateNumber,
			cst.start_date as startDate,
			cs.id as clinicalSpecialtyId, cs.name as clinicalSpecialty,
			hp.id as professionalId,
			CONCAT(p2.last_name, ' ', p2.other_last_names, ' ',p2.first_name, ' ', p2.middle_names) as professionalName,
			cst.reasons as reasons,  cst.problems, cst.procedures,
			cst.weight, cst.height, cst.systolicBloodPressure, cst.diastolicBloodPressure,
			cst.cardiovascularRisk, cst.glycosylatedHemoglobin, cst.bloodGlucose, cst.headCircunference, cst.cpo, cst.ceo,
			cst.hierarchicalUnitId as hierarchicalUnitId, hu.alias as hierarchicalUnitAlias,
			hut.id as hierarchicalUnitTypeId, hut.description as hierarchicalUnitTypeDescription
			FROM consultation cst
			JOIN patient pa ON (cst.patient_id = pa.id)
			JOIN person pe ON (pa.person_id = pe.id)
			LEFT JOIN identification_type it ON (pe.identification_type_id = it.id)
			LEFT JOIN person_extended px ON (px.person_id = pe.id)
			LEFT JOIN self_perceived_gender g ON (px.gender_self_determination = g.id)
			LEFT JOIN address a2 ON (px.address_id = a2.id)
			LEFT JOIN city c2 ON (a2.city_id = c2.id)
			LEFT JOIN patient_medical_coverage pmc ON (pmc.id = cst.patient_medical_coverage_id)
			LEFT JOIN medical_coverage mc on (mc.id = pmc.medical_coverage_id)
			LEFT JOIN clinical_specialty cs ON (cst.clinical_specialty_id = cs.id)
			JOIN healthcare_professional hp ON (cst.doctor_id = hp.id)
			JOIN person p2 ON (hp.person_id = p2.id)
			LEFT JOIN hierarchical_unit hu ON (cst.hierarchicalUnitId = hu.id)
			LEFT JOIN hierarchical_unit_type hut ON (hu.type_id = hut.id)
		</query>
	</named-native-query>

	<named-native-query name="Reports.NursingConsultationDetail" result-set-mapping="Reports.ConsultationDetailResult">
		<query>
			WITH consultation AS (
			SELECT oc.patient_id, oc.patient_medical_coverage_id, oc.clinical_specialty_id,
			oc.doctor_id, oc.created_on as start_date, null as reasons,  problems.description as problems, proced.description as procedures,
			MAX(CASE WHEN ovs.loinc_code='29463-7' THEN ovs.value END) as weight,
			MAX(CASE WHEN ovs.loinc_code='8302-2' THEN ovs.value END) as height,
			MAX(CASE WHEN ovs.loinc_code='8480-6' THEN ovs.value END) as systolicBloodPressure,
			MAX(CASE WHEN ovs.loinc_code='8462-4' THEN ovs.value END) as diastolicBloodPressure,
			MAX(CASE WHEN ovs.loinc_code='65853-4' THEN ovs.value END) as cardiovascularRisk,
			MAX(CASE WHEN ovs.loinc_code='62854-5' THEN ovs.value END)  as glycosylatedHemoglobin,
			MAX(CASE WHEN ovs.loinc_code='15074-8' THEN ovs.value END) as bloodGlucose,
			MAX(CASE WHEN ovs.loinc_code='11947-9' THEN ovs.value END) as headCircunference,
			'nursing' as consultation_type, oc.hierarchical_unit_id as hierarchicalUnitId
			FROM nursing_consultation oc
			JOIN document d ON (d.source_id = oc.id and d.source_type_id = 7)
			LEFT JOIN (
			SELECT dhc.document_id,  STRING_AGG(s.pt, ', ') as description
			FROM document_health_condition dhc
			JOIN health_condition hc ON (hc.id = dhc.health_condition_id)
			JOIN snomed s ON (s.id = hc.snomed_id)
			GROUP BY dhc.document_id
			) AS problems on (problems.document_id = d.id)
			LEFT JOIN (
			SELECT dp.document_id,  STRING_AGG(s.pt, ', ') as description
			FROM document_procedure dp
			JOIN "procedures" p ON (p.id = dp.procedure_id)
			JOIN snomed s ON (s.id = p.snomed_id)
			GROUP BY dp.document_id
			) AS proced on (proced.document_id = d.id)
			LEFT JOIN document_vital_sign dvs ON (dvs.document_id = d.id)
			LEFT JOIN observation_vital_sign ovs ON (ovs.id = dvs.observation_vital_sign_id)
			WHERE oc.institution_id = :institutionId
			AND oc.created_on BETWEEN :startDate AND :endDate
			GROUP BY oc.id, problems.description, proced.description
			)
			SELECT CONCAT(pe.last_name, ' ', pe.other_last_names) as patientSurname,
			CONCAT(pe.first_name, ' ', pe.middle_names) as patientFirstName,
			px.name_self_determination as selfPerceivedName,
			it.description as identificationType, pe.identification_number as identificationNumber,
			to_char(pe.birth_date,'DD/MM/YYYY') as birthDate,  g.description as gender,
			CONCAT(a2.street, ' ', a2.number, ' ', a2.floor, ' ', a2.apartment, ' ', c2.description) as address,
			px.phone_number as phoneNumber, px.email as email,
			mc."name" as coverageName, pmc.affiliate_number as affiliateNumber,
			cst.start_date as startDate,
			cs.id as clinicalSpecialtyId, cs.name as clinicalSpecialty,
			hp.id as professionalId,
			CONCAT(p2.last_name, ' ', p2.other_last_names, ' ',p2.first_name, ' ', p2.middle_names) as professionalName,
			cst.reasons as reasons,  cst.problems, cst.procedures,
			cst.weight, cst.height, cst.systolicBloodPressure, cst.diastolicBloodPressure,
			cst.cardiovascularRisk, cst.glycosylatedHemoglobin, cst.bloodGlucose, cst.headCircunference, null as cpo, null as ceo,
			cst.hierarchicalUnitId as hierarchicalUnitId, hu.alias as hierarchicalUnitAlias,
			hut.id as hierarchicalUnitTypeId, hut.description as hierarchicalUnitTypeDescription
			FROM consultation cst
			JOIN patient pa ON (cst.patient_id = pa.id)
			JOIN person pe ON (pa.person_id = pe.id)
			LEFT JOIN identification_type it ON (pe.identification_type_id = it.id)
			LEFT JOIN person_extended px ON (px.person_id = pe.id)
			LEFT JOIN self_perceived_gender g ON (px.gender_self_determination = g.id)
			LEFT JOIN address a2 ON (px.address_id = a2.id)
			LEFT JOIN city c2 ON (a2.city_id = c2.id)
			LEFT JOIN patient_medical_coverage pmc on (pmc.id = cst.patient_medical_coverage_id)
			LEFT JOIN medical_coverage mc ON (mc.id = pmc.medical_coverage_id)
			LEFT JOIN clinical_specialty cs ON (cs.id = cst.clinical_specialty_id)
			JOIN healthcare_professional hp ON (cst.doctor_id = hp.id)
			JOIN person p2 ON (hp.person_id = p2.id)
			LEFT JOIN hierarchical_unit hu ON (cst.hierarchicalUnitId = hu.id)
			LEFT JOIN hierarchical_unit_type hut ON (hu.type_id = hut.id)
		</query>
	</named-native-query>

    <!-- ========================================== -->
    <!-- ============== Appointment =============== -->
    <!-- ========================================== -->

    <named-native-query name="Appointment.medicalCoverage">
        <query>select ap.patient_medical_coverage_id
            from appointment ap
            join appointment_assn apassn on (ap.id = apassn.appointment_id)
            join diary d on (apassn.diary_id = d.id)
			left join diary_associated_professional dap on (dap.diary_id = d.id)
			where ap.patient_id = :patientId and
			ap.date_type_id = :currentDate and
			ap.patient_medical_coverage_id is not null and
            (ap.appointment_state_id = :confirmedAppointmentState or
			ap.appointment_state_id = :assignedAppointmentState ) and
            (d.healthcare_professional_id = :professionalId or
			dap.healthcare_professional_id = :professionalId)
            order by hour asc
            limit 1
        </query>
    </named-native-query>


    <!-- ========================================== -->
    <!-- ============== Results-mapping =============== -->
    <!-- ========================================== -->

    <sql-result-set-mapping name="HCE.findAllMedicationsResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.MedicationVo">
            <column name="id" class="java.lang.Integer"/>
            <column name="sctidCode" class="java.lang.String"/>
            <column name="sctidTerm" class="java.lang.String"/>
            <column name="status" class="java.lang.String"/>
            <column name="sequence" class="java.lang.Integer"/>
            <column name="count" class="java.lang.Integer"/>
            <column name="duration" class="java.lang.Double"/>
            <column name="duration_unit" class="java.lang.String"/>
            <column name="frequency" class="java.lang.Integer"/>
            <column name="period_unit" class="java.lang.String"/>
            <column name="effectiveTime" class="java.sql.Date"/>
            <column name="end_date" class="java.sql.Date"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.getDocumentReferenceResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.BundleVo">
            <column name="id" class="java.lang.Integer"/>
            <column name="first_name" class="java.lang.String"/>
            <column name="middle_names" class="java.lang.String"/>
            <column name="last_name" class="java.lang.String"/>
            <column name="hasDocuments" class="java.lang.Boolean"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.getPatientResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.PatientVo">
            <column name="first_name" class="java.lang.String"/>
            <column name="middle_names" class="java.lang.String"/>
            <column name="last_name" class="java.lang.String"/>
            <column name="other_last_names" class="java.lang.String"/>
            <column name="mothers_last_name" class="java.lang.String"/>
            <column name="identification_number" class="java.lang.String"/>
            <column name="gender_id" class="java.lang.Short"/>
            <column name="birth_date" class="java.lang.String"/>
            <column name="phone_number" class="java.lang.String"/>
            <column name="address_id" class="java.lang.Integer"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.findAllConditionResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.ConditionVo">
            <column name="id" class="java.lang.Integer"/>
            <column name="code" class="java.lang.String"/>
            <column name="term" class="java.lang.String"/>
            <column name="clinical_status" class="java.lang.String"/>
            <column name="verification_status_id" class="java.lang.String"/>
            <column name="start_date" class="java.sql.Date"/>
            <column name="severity" class="java.lang.String"/>
            <column name="created_on" class="java.sql.Date"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.findAllImmunizationsResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.ImmunizationVo">
            <column name="id" class="java.lang.Integer"/>
            <column name="code" class="java.lang.String"/>
            <column name="term" class="java.lang.String"/>
            <column name="status_id" class="java.lang.String"/>
            <column name="administration_date" class="java.sql.Date"/>
            <column name="created_on" class="java.sql.Date"/>
            <column name="expiration_date" class="java.sql.Date"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.findAllAllergiesResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.AllergyIntoleranceVo">
            <column name="id" class="java.lang.Integer"/>
            <column name="code" class="java.lang.String"/>
            <column name="term" class="java.lang.String"/>
            <column name="status_id" class="java.lang.String"/>
            <column name="verification_status_id" class="java.lang.String"/>
            <column name="category_id" class="java.lang.Short"/>
            <column name="criticality" class="java.lang.Short"/>
            <column name="start_date" class="java.sql.Date"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.getOrganizationResult" >
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.OrganizationVo">
            <column name="sisa_code" class="java.lang.String"/>
            <column name="name" class="java.lang.String"/>
            <column name="phone_number" class="java.lang.String"/>
            <column name="address_id" class="java.lang.Integer"/>
        </constructor-result>
    </sql-result-set-mapping>
	<!--<sql-result-set-mapping name="HCE.getMedicationResult">
		<constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.MedicationVo">
			<column name="id" class="java.lang.Integer"/>
			<column name="sctidCode" class="java.lang.String"/>
			<column name="sctidTerm" class="java.lang.String"/>
			<column name="status" class="java.lang.String"/>
			<column name="sequence" class="java.lang.Integer"/>
			<column name="count" class="java.lang.Integer"/>
			<column name="duration" class="java.lang.Double"/>
			<column name="duration_unit" class="java.lang.String"/>
			<column name="frequency" class="java.lang.Integer"/>
			<column name="period_unit" class="java.lang.String"/>
			<column name="effectiveTime" class="java.sql.Date"/>
			<column name="end_date" class="java.sql.Date"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="HCE.getOrganizationFromIdResult" >
		<constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.OrganizationVo">
			<column name="sisa_code" class="java.lang.String"/>
			<column name="name" class="java.lang.String"/>
			<column name="phone_number" class="java.lang.String"/>
			<column name="address_id" class="java.lang.Integer"/>
		</constructor-result>
	</sql-result-set-mapping>-->
	<sql-result-set-mapping name="HCE.getPractitionerResult" >
		<constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.PractitionerVo">
			<column name="person_id" class="java.lang.Integer"/>
			<column name="identification_number" class="java.lang.String"/>
			<column name="first_name" class="java.lang.String"/>
			<column name="middle_names" class="java.lang.String"/>
			<column name="last_name" class="java.lang.String"/>
			<column name="other_last_names" class="java.lang.String"/>
			<column name="phone_prefix" class="java.lang.String"/>
			<column name="phone_number" class="java.lang.String"/>
			<column name="address_id" class="java.lang.Integer"/>
			<column name="gender_id" class="java.lang.Short"/>
			<column name="birth_date" class="java.util.Date"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="HCE.getCoverageResult" >
		<constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.CoverageVo">
			<column name="patientMedicalCoverageId" class="java.lang.Integer"/>
			<column name="medicalCoverageId" class="java.lang.Integer"/>
			<column name="affiliate_number" class="java.lang.String"/>
			<column name="active" class="java.lang.Boolean"/>
			<column name="patient_id" class="java.lang.Integer"/>
			<column name="start_date" class="java.util.Date"/>
			<column name="end_date" class="java.util.Date"/>
			<column name="cuit" class="java.lang.String"/>
			<column name="name" class="java.lang.String"/>
			<column name="plan_id" class="java.lang.Integer"/>
			<column name="plan" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="HCE.getMedicationRequestResult" >
		<constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.MedicationRequestVo">
			<column name="id" class="java.lang.Integer"/>
			<column name="status_id" class="java.lang.String"/>
			<column name="intent_id" class="java.lang.String"/>
			<column name="categoryId" class="java.lang.String"/>
			<!--<column name="categoryDescription" class="java.lang.String"/>-->
			<column name="medicationStatementId" class="java.lang.Integer"/>
			<column name="patient_id" class="java.lang.Integer"/>
			<column name="institution_id" class="java.lang.Integer"/>
			<column name="request_date" class="java.util.Date"/>
			<column name="doctor_id" class="java.lang.Integer"/>
			<column name="problemId" class="java.lang.String"/>
			<column name="problemPt" class="java.lang.String"/>
			<column name="medical_coverage_id" class="java.lang.Integer"/>
			<column name="description" class="java.lang.String"/>
			<column name="has_recipe" class="java.lang.Boolean"/>
			<column name="frequency" class="java.lang.Integer"/>
			<column name="period_unit" class="java.lang.String"/>
			<column name="quantityValue" class="java.lang.Float"/>
			<column name="quantityUnit" class="java.lang.String"/>
			<column name="duration" class="java.lang.Double"/>
			<column name="duration_unit" class="java.lang.String"/>
			<column name="prescription_date" class="java.util.Date"/>
			<column name="due_date" class="java.util.Date"/>
			<column name="sequence" class="java.lang.Integer"/>
			<column name="timingRepeat" class="java.lang.Integer"/>
			<column name="prescription_line_state" class="java.lang.Short"/>
			<column name="prescription_line_number" class="java.lang.Integer"/>
			<column name="requestUuid" class="java.util.UUID"/>
			<column name="lineUuid" class="java.util.UUID"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="HCE.getMedicationDataForValidationResult" >
		<constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.MedicationRequestVo">
			<column name="id" class="java.lang.Integer"/>
			<column name="status_id" class="java.lang.String"/>
			<column name="intent_id" class="java.lang.String"/>
			<column name="categoryId" class="java.lang.String"/>
			<column name="medicationStatementId" class="java.lang.Integer"/>
			<column name="patient_id" class="java.lang.Integer"/>
			<column name="institution_id" class="java.lang.Integer"/>
			<column name="request_date" class="java.util.Date"/>
			<column name="doctor_id" class="java.lang.Integer"/>
			<column name="medicationCode" class="java.lang.String"/>
			<column name="medical_coverage_id" class="java.lang.Integer"/>
			<column name="description" class="java.lang.String"/>
			<column name="has_recipe" class="java.lang.Boolean"/>
			<column name="frequency" class="java.lang.Integer"/>
			<column name="period_unit" class="java.lang.String"/>
			<column name="quantityValue" class="java.lang.Float"/>
			<column name="quantityUnit" class="java.lang.String"/>
			<column name="duration" class="java.lang.Double"/>
			<column name="duration_unit" class="java.lang.String"/>
			<column name="prescription_date" class="java.util.Date"/>
			<column name="due_date" class="java.util.Date"/>
			<column name="sequence" class="java.lang.Integer"/>
			<column name="timingRepeat" class="java.lang.Integer"/>
			<column name="prescription_line_state" class="java.lang.Short"/>
			<column name="identification_number" class="java.lang.String"/>
			<column name="medicalCoverageId" class="java.lang.Integer"/>
			<column name="affiliate_number" class="java.lang.String"/>
			<column name="prescription_line_number" class="java.lang.Integer"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="HCE.getServiceRequestResult" >
		<constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.ServiceRequestVo">
			<column name="id" class="java.lang.Integer"/>
			<column name="serviceRequestStatus" class="java.lang.String"/>
			<column name="intent_id" class="java.lang.String"/>
			<column name="categoryId" class="java.lang.String"/>
			<column name="diagnosticReportId" class="java.lang.Integer"/>
			<column name="patient_id" class="java.lang.Integer"/>
			<column name="institution_id" class="java.lang.Integer"/>
			<column name="request_date" class="java.util.Date"/>
			<column name="doctor_id" class="java.lang.Integer"/>
			<column name="problemId" class="java.lang.String"/>
			<column name="problemPt" class="java.lang.String"/>
			<column name="medical_coverage_id" class="java.lang.Integer"/>
			<column name="description" class="java.lang.String"/>
			<column name="link" class="java.lang.String"/>
			<column name="diagnosticReportStatus" class="java.lang.String"/>
			<column name="sctid" class="java.lang.String"/>
			<column name="pt" class="java.lang.String"/>
			<column name="serviceRequestUuid" class="java.util.UUID"/>
			<column name="diagnosticReportUuid" class="java.util.UUID"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="HCE.getServiceRequestDataForValidationResult" >
		<constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.ServiceRequestVo">
			<column name="serviceRequestId" class="java.lang.Integer"/>
			<column name="diagnosticReportId" class="java.lang.Integer"/>
			<column name="patient_id" class="java.lang.Integer"/>
			<column name="identification_number" class="java.lang.String"/>
			<column name="institution_id" class="java.lang.Integer"/>
			<column name="request_date" class="java.util.Date"/>
			<column name="doctor_id" class="java.lang.Integer"/>
			<column name="medical_coverage_id" class="java.lang.Integer"/>
			<column name="medicalCoverageId" class="java.lang.Integer"/>
			<column name="affiliate_number" class="java.lang.String"/>
			<column name="serviceRequestStatusId" class="java.lang.String"/>
			<column name="diagnosticReportStatusId" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
    <sql-result-set-mapping name="Reports.OutpatientSummaryResult">
        <constructor-result target-class="net.pladema.reports.repository.ConsultationSummary">
            <column name="professional_id" class="java.lang.Integer"/>
            <column name="specialty_id" class="java.lang.Integer"/>
            <column name="specialty" class="java.lang.String"/>
            <column name="specialtyType" class="java.lang.Short"/>
            <column name="age" class="java.lang.Integer"/>
            <column name="gender_id" class="java.lang.Short"/>
            <column name="OS" class="java.lang.Boolean"/>
			<column name="hierarchicalUnitId" class="java.lang.Integer"/>
			<column name="hierarchicalUnitTypeId" class="java.lang.Integer"/>
		</constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="Reports.ConsultationDetailResult">
        <constructor-result target-class="net.pladema.reports.repository.ConsultationDetailWithoutInstitution">
            <column name="patientSurname" class="java.lang.String"/>
            <column name="patientFirstName" class="java.lang.String"/>
			<column name="selfPerceivedName" class="java.lang.String"/>
            <column name="identificationType" class="java.lang.String"/>
            <column name="identificationNumber" class="java.lang.String"/>
            <column name="birthDate" class="java.lang.String"/>
            <column name="gender" class="java.lang.String"/>
            <column name="address" class="java.lang.String"/>
            <column name="phoneNumber" class="java.lang.String"/>
            <column name="email" class="java.lang.String"/>
            <column name="coverageName" class="java.lang.String"/>
            <column name="affiliateNumber" class="java.lang.String"/>
            <column name="startDate" class="java.time.LocalDateTime"/>
            <column name="clinicalSpecialtyId" class="java.lang.Integer"/>
            <column name="clinicalSpecialty" class="java.lang.String"/>
            <column name="professionalId" class="java.lang.Integer"/>
            <column name="professionalName" class="java.lang.String"/>
            <column name="reasons" class="java.lang.String"/>
            <column name="problems" class="java.lang.String"/>
			<column name="procedures" class="java.lang.String"/>
            <column name="weight" class="java.lang.String"/>
            <column name="height" class="java.lang.String"/>
            <column name="systolicBloodPressure" class="java.lang.String"/>
            <column name="diastolicBloodPressure" class="java.lang.String"/>
			<column name="cardiovascularRisk" class="java.lang.String"/>
			<column name="glycosylatedHemoglobin" class="java.lang.String"/>
			<column name="bloodGlucose" class="java.lang.String"/>
			<column name="headCircunference" class="java.lang.String"/>
			<column name="cpo" class="java.lang.String"/>
			<column name="ceo" class="java.lang.String"/>
			<column name="hierarchicalUnitId" class="java.lang.Integer"/>
			<column name="hierarchicalUnitAlias" class="java.lang.String"/>
			<column name="hierarchicalUnitTypeId" class="java.lang.Integer"/>
			<column name="hierarchicalUnitTypeDescription" class="java.lang.String"/>
		</constructor-result>

    </sql-result-set-mapping>

</entity-mappings>