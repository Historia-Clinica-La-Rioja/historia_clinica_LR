<entity-mappings
        version="2.1" xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm
    http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd">

    <!-- JPA Named Native Queries -->

    <!-- ========================================== -->
    <!-- ====== Historia clínica electrónica ====== -->
    <!-- ========================================== -->

    <named-native-query name="HCE.findAllMedications" result-set-mapping="HCE.findAllMedicationsResult">
        <query>with temporal as (
            SELECT DISTINCT
            ms.id as medicationStatementId, ms.snomed_id, ms.status_id, ms.created_on, ms.updated_on,
            dsg.*,
            row_number() OVER (PARTITION by ms.snomed_id ORDER BY ms.updated_on desc) AS rw
            FROM document d
            JOIN document_medicamention_statement dms ON d.id = dms.document_id
            JOIN medication_statement ms ON dms.medication_statement_id = ms.id
            LEFT JOIN dosage dsg ON ms.dosage_id = dsg.id
            WHERE ms.patient_id = :patientId
            AND d.type_id IN :documentTypeId
            AND d.status_id = :documentStatusId
            )
            SELECT  t.medicationStatementId AS id , s.sctid AS sctidCode, s.pt AS sctidTerm, status_id AS status,
            t.sequence, t.count, t.duration, t.duration_unit, t.frequency, t.period_unit,
            coalesce(t.start_date, t.created_on) as effectiveTime, t.end_date
            FROM temporal t
            JOIN snomed s ON t.snomed_id = s.id
            WHERE rw = 1 AND status_id = :statusId
            ORDER BY t.updated_on
        </query>
    </named-native-query>

    <named-native-query name="HCE.getDocumentReference" result-set-mapping="HCE.getDocumentReferenceResult">
        <query>
            select pat.id, first_name, middle_names, last_name, bool_and(op.id is not null) as hasDocuments
            from patient pat
            join person per on ( pat.person_id = per.id )
            left join outpatient_consultation op on ( pat.id = op.patient_id )
            where pat.id = :patientId
            group by pat.id, first_name, middle_names, last_name
        </query>
    </named-native-query>

    <named-native-query name="HCE.getPatient" result-set-mapping="HCE.getPatientResult">
        <query>
            select p.first_name, p.middle_names, p.last_name, p.other_last_names, pe.mothers_last_name,
            p.identification_number, p.gender_id, p.birth_date, pe.phone_number, pe.address_id
            from patient pat
            join person p on ( pat.person_id = p.id )
            left join person_extended pe on ( p.id = pe.person_id )
            where pat.id = :patientId
        </query>
    </named-native-query>

    <named-native-query name="HCE.getAddress">
        <query>
            select a.street, a.number, a.floor, a.apartment, a.postcode,
            ci.description as city, p.description as province, co.description as country
            from address a
            left join city ci on ( a.city_id = ci.id )
            left join department d on ( ci.department_id = d.id )
            left join province p on ( d.province_id = p.id )
            left join country co on ( p.country_id = co.id )
            where a.id = :addressId
        </query>
    </named-native-query>

    <named-native-query name="HCE.findAllCondition" result-set-mapping="HCE.findAllConditionResult">
        <query>
            WITH t AS(
            SELECT hc.id, snomed_id, hc.status_id, verification_status_id, start_date, severity,
            hc.created_on, hc.updated_on,
            row_number() over (partition by snomed_id order by hc.updated_on desc) as rw
            FROM document d
            JOIN document_health_condition dhc on d.id = dhc.document_id
            JOIN health_condition hc on dhc.health_condition_id = hc.id
            WHERE d.status_id = :docStatusId
            AND d.type_id = :documentTypeId
            AND hc.patient_id = :patientId
            AND hc.problem_id IN :diagnosisId
            )
            SELECT t.id as id, s.sctid as code, s.pt as term, t.status_id as clinical_status,
            t.verification_status_id, t.start_date, t.severity, t.created_on
            FROM t
            JOIN snomed s ON snomed_id = s.id
            WHERE rw = 1
            AND NOT verification_status_id = :statusId
        </query>
    </named-native-query>

    <named-native-query name="HCE.findAllImmunizations" result-set-mapping="HCE.findAllImmunizationsResult">
        <query>
            WITH t AS (
            SELECT inm.id, snomed_id, inm.status_id, administration_date, expiration_date, inm.created_on, inm.updated_on,
            row_number() over (partition by snomed_id, administration_date order by inm.updated_on desc) as rw
            FROM document d
            JOIN document_inmunization di on d.id = di.document_id
            JOIN inmunization inm on di.inmunization_id = inm.id
            WHERE d.status_id = :docStatusId
            AND d.type_id IN :documentTypeId
            AND inm.patient_id = :patientId
            )
            SELECT t.id as id, s.sctid as code, s.pt as term, status_id, administration_date, created_on, expiration_date
            FROM t
            JOIN snomed s ON t.snomed_id = s.id
            WHERE rw = 1 AND NOT status_id = :statusId
            ORDER BY t.updated_on DESC
        </query>
    </named-native-query>

    <named-native-query name="HCE.findAllAllergies" result-set-mapping="HCE.findAllAllergiesResult">
        <query>
            with temporal as (
            SELECT DISTINCT ai.id, ai.snomed_id, ai.status_id, ai.verification_status_id,
            ai.category_id, ai.criticality, ai.start_date, ai.updated_on,
            row_number() over (partition by ai.snomed_id order by ai.updated_on desc) as rw
            FROM document d
            JOIN document_allergy_intolerance dai ON d.id = dai.document_id
            JOIN allergy_intolerance ai ON dai.allergy_intolerance_id = ai.id
            WHERE d.type_id = :documentTypeId
            AND d.status_id = :documentStatusId
            AND ai.patient_id = :patientId
            )
            SELECT t.id AS id, s.sctid AS code, s.pt as term, t.status_id, t.verification_status_id,
            t.category_id, t.criticality, t.start_date
            FROM temporal t
            JOIN snomed s ON t.snomed_id = s.id
            WHERE rw = 1 AND NOT status_id = :allergyIntoleranceStatus
            ORDER BY t.updated_on desc
        </query>
    </named-native-query>

    <named-native-query name="HCE.getOrganization" result-set-mapping="HCE.getOrganizationResult">
        <query>
            select distinct sisa_code, name, phone_number, address_id
            from institution i
            where id = (
            select distinct institution_id
            from (
            select institution_id from internment_episode ie where patient_id = :patientId
            union
            select institution_id from outpatient_consultation oc where patient_id = :patientId
            ) as subquery
            limit 1)
        </query>
    </named-native-query>

    <!-- ========================================== -->
    <!-- ================ Reports ================= -->
    <!-- ========================================== -->

    <named-native-query name="Reports.ConsultationSummary" result-set-mapping="Reports.OutpatientSummaryResult">
        <query>SELECT oc.doctor_id as professional_id,
            cs.id as specialty_id, cs."name" as specialty, cs.clinical_specialty_type_id as specialtyType,
            extract(year from (age(oc.start_date, per.birth_date))) as "age", per.gender_id,
            CASE WHEN oc.patient_medical_coverage_id is null THEN false ELSE true END as "OS"
            FROM outpatient_consultation oc
            LEFT JOIN clinical_specialty cs on (oc.clinical_specialty_id = cs.id)
            JOIN patient pat on (oc.patient_id = pat.id)
            JOIN person per on (pat.person_id = per.id)
            WHERE oc.institution_id = :institutionId
            AND oc.start_date between :from and :to
            AND oc.billable
            UNION ALL
            SELECT vc.doctor_id as professional_id,
            cs.id as specialty_id, cs."name" as specialty, cs.clinical_specialty_type_id as specialtyType,
            extract(year from (age(vc.performed_date, per.birth_date))) as "age", per.gender_id,
            CASE WHEN vc.patient_medical_coverage_id is null THEN false ELSE true END as "OS"
            FROM vaccine_consultation vc
            LEFT JOIN clinical_specialty cs on (vc.clinical_specialty_id = cs.id)
            JOIN patient pat on (vc.patient_id = pat.id)
            JOIN person per on (pat.person_id = per.id)
            WHERE vc.institution_id = :institutionId
            AND vc.performed_date between :from and :to
            AND vc.billable
        </query>
    </named-native-query>

	<named-native-query name="Reports.OdontologyConsultationSummary" result-set-mapping="Reports.OutpatientSummaryResult">
		<query>SELECT oc.doctor_id as professional_id,
			cs.id as specialty_id, cs."name" as specialty, cs.clinical_specialty_type_id as specialtyType,
			extract(year from (age(oc.created_on, per.birth_date))) as "age", per.gender_id,
			CASE WHEN oc.patient_medical_coverage_id is null THEN false ELSE true END as "OS"
			FROM odontology_consultation oc
			LEFT JOIN clinical_specialty cs on (oc.clinical_specialty_id = cs.id)
			JOIN patient pat on (oc.patient_id = pat.id)
			JOIN person per on (pat.person_id = per.id)
			WHERE oc.institution_id = :institutionId
			AND oc.created_on between :from and :to
			AND oc.billable
		</query>
	</named-native-query>

	<named-native-query name="Reports.NursingConsultationSummary" result-set-mapping="Reports.OutpatientSummaryResult">
		<query>
			SELECT nc.doctor_id as professional_id,
			cs.id as specialty_id, cs."name" as specialty, cs.clinical_specialty_type_id as specialtyType,
			extract(year from (age(nc.created_on, per.birth_date))) as "age", per.gender_id,
			CASE WHEN nc.patient_medical_coverage_id is null THEN false ELSE true END as "OS"
			FROM nursing_consultation nc
			LEFT JOIN clinical_specialty cs on (nc.clinical_specialty_id = cs.id)
			JOIN patient pat on (nc.patient_id = pat.id)
			JOIN person per on (pat.person_id = per.id)
			WHERE nc.institution_id = :institutionId
			AND nc.created_on between :from and :to
		</query>
	</named-native-query>

    <named-native-query name="Reports.ConsultationDetail" result-set-mapping="Reports.ConsultationDetailResult">
        <query>
			WITH consultation AS (
			SELECT  oc.institution_id, oc.patient_id, oc.patient_medical_coverage_id, oc.clinical_specialty_id,
			oc.doctor_id, oc.start_date as start_date, ocr.reasons as reasons,  prob.descriptions as problems, proced.cst_procedures as procedures,
			vs.weight, vs.height, vs.systolic as systolicBloodPressure, vs.diastolic as diastolicBloodPressure,
			vs.cardiovascular_risk as cardiovascularRisk, vs.glycosylated as glycosylatedHemoglobin, vs.blood_glucose as bloodGlucose, vs.head_circunference as headCircunference,
			'outpatient' as consultation_type
			FROM outpatient_consultation oc
			LEFT JOIN (
			SELECT ocr.outpatient_consultation_id as id, STRING_AGG(r.description, ', ') as reasons
			FROM outpatient_consultation_reasons ocr
			JOIN reasons r ON (ocr.reason_id = r.id)
			GROUP BY ocr.outpatient_consultation_id
			) ocr ON (oc.id = ocr.id )
			LEFT JOIN (
			SELECT oc.id, STRING_AGG(sno.pt, ', ') as descriptions
			FROM outpatient_consultation oc
			JOIN document doc ON (oc.document_id = doc.id)
			JOIN document_health_condition dhc ON (doc.id = dhc.document_id)
			JOIN health_condition hc ON (dhc.health_condition_id = hc.id)
			JOIN snomed sno ON (hc.snomed_id = sno.id)
			WHERE hc.problem_id != '57177007'
			GROUP BY oc.id
			) prob ON (oc.id = prob.id)
			LEFT JOIN (
			SELECT oc.id,
			MAX(CASE WHEN ovs.loinc_code='8480-6' THEN ovs.value END) as systolic,
			MAX(CASE WHEN ovs.loinc_code='8462-4' THEN ovs.value END) as diastolic,
			MAX(CASE WHEN ovs.loinc_code='8302-2' THEN ovs.value END) as height,
			MAX(CASE WHEN ovs.loinc_code='29463-7' THEN ovs.value END) as weight,
			MAX(CASE WHEN ovs.loinc_code='65853-4' THEN ovs.value END) as cardiovascular_risk,
			MAX(CASE WHEN ovs.loinc_code='62854-5' THEN ovs.value END) as glycosylated,
			MAX(CASE WHEN ovs.loinc_code='15074-8' THEN ovs.value END) as blood_glucose,
			MAX(CASE WHEN ovs.loinc_code='11947-9' THEN ovs.value END) as head_circunference
			FROM outpatient_consultation oc
			LEFT JOIN document_vital_sign dvs ON (oc.document_id = dvs.document_id)
			LEFT JOIN observation_vital_sign ovs ON (dvs.observation_vital_sign_id = ovs.id)
			GROUP BY oc.id
			ORDER BY oc.id
			) vs ON (oc.id = vs.id)
			left join (
			select oc.id, string_agg(s.pt, ', ') as cst_procedures
			from outpatient_consultation oc
			join document d on(d.source_id = oc.id and d.source_type_id = 1)
			join document_procedure dp on(d.id = dp.document_id)
			join "procedures" p on(dp.procedure_id = p.id)
			join snomed s on(p.snomed_id = s.id)
			group by oc.id
			) proced on(proced.id = oc.id)
			WHERE oc.institution_id = :institutionId
			AND oc.billable = true
			AND oc.start_date BETWEEN :startDate AND :endDate
			UNION ALL
			SELECT vc.institution_id, vc.patient_id, vc.patient_medical_coverage_id, vc.clinical_specialty_id,
			vc.doctor_id, vc.performed_date as start_date, NULL AS reasons,  NULL AS problems, null as procedures,
			NULL AS weight, NULL AS height, NULL AS systolicBloodPressure, NULL AS diastolicBloodPressure,
			null as cardiovascularRisk, null as glycosylatedHemoglobin, null as bloodGlucose, null as headCircunference,
			'vaccine' as consultation_type
			FROM vaccine_consultation vc
			WHERE vc.institution_id = :institutionId
			AND vc.billable = true
			AND vc.performed_date BETWEEN :startDate AND :endDate
			)
			SELECT p.description as province, d.description as department, i.sisa_code as sisaCode, i.name as institution,
			CONCAT(pe.last_name, ' ', pe.other_last_names) as patientSurname,
			CONCAT(pe.first_name, ' ', pe.middle_names) as patientFirstName,
			px.name_self_determination as selfPerceivedName,
			it.description as identificationType, pe.identification_number as identificationNumber,
			to_char(pe.birth_date,'DD/MM/YYYY') as birthDate,  g.description as gender,
			CONCAT(a2.street, ' ', a2.number, ' ', a2.floor, ' ', a2.apartment, ' ', c2.description) as address,
			px.phone_number as phoneNumber, px.email as email,
			coverage.coverageName, coverage.affiliateNumber,
			to_char(cst.start_date,'DD/MM/YYYY') as startDate,
			cs.id as clinicalSpecialtyId, cs.name as clinicalSpecialty,
			hp.id as professionalId,
			CONCAT(p2.last_name, ' ', p2.other_last_names, ' ',p2.first_name, ' ', p2.middle_names) as professionalName,
			cst.reasons as reasons,  cst.problems, cst.procedures,
			cst.weight, cst.height, cst.systolicBloodPressure, cst.diastolicBloodPressure,
			cst.cardiovascularRisk, cst.glycosylatedHemoglobin, cst.bloodGlucose, cst.headCircunference, null as cpo, null as ceo
			FROM consultation cst
			JOIN institution i ON (cst.institution_id = i.id)
			JOIN address a ON (i.address_id = a.id)
			LEFT JOIN city c ON (a.city_id = c.id)
			JOIN department d ON (c.department_id = d.id)
			JOIN province p ON (d.province_id = p.id)
			JOIN patient pa ON (cst.patient_id = pa.id)
			JOIN person pe ON (pa.person_id = pe.id)
			LEFT JOIN identification_type it ON (pe.identification_type_id = it.id)
			LEFT JOIN person_extended px ON (px.person_id = pe.id)
			LEFT JOIN self_perceived_gender g ON (px.gender_self_determination = g.id)
			LEFT JOIN address a2 ON (px.address_id = a2.id)
			LEFT JOIN city c2 ON (a2.city_id = c2.id)
			LEFT JOIN (
			select pmc.id, mc."name" AS coverageName, affiliate_number AS affiliateNumber
			from patient_medical_coverage pmc
			join medical_coverage mc on (pmc.medical_coverage_id = mc.id)
			) coverage ON (cst.patient_medical_coverage_id = coverage.id)
			LEFT JOIN clinical_specialty cs ON (cst.clinical_specialty_id = cs.id)
			JOIN healthcare_professional hp ON (cst.doctor_id = hp.id)
			JOIN person p2 ON (hp.person_id = p2.id)
        </query>
    </named-native-query>

	<named-native-query name="Reports.OdontologyConsultationDetail" result-set-mapping="Reports.ConsultationDetailResult">
		<query>
			WITH consultation AS (
			SELECT oc.institution_id, oc.patient_id, oc.patient_medical_coverage_id, oc.clinical_specialty_id,
			oc.doctor_id, oc.created_on as start_date, ocr.reasons as reasons,  concat_ws('/split/', otherprob.descriptions, prob.descriptions) as problems,
			concat_ws('/split/', proced.cst_procedures, otherproced.cst_procedures) as procedures,
			null as weight, null as height, null as systolicBloodPressure, null as diastolicBloodPressure,
			null as cardiovascularRisk, null as glycosylatedHemoglobin, null as bloodGlucose, null as headCircunference, indexs.cpo, indexs.ceo,
			'odontology' as consultation_type
			FROM odontology_consultation oc
			LEFT JOIN (
			SELECT ocr.odontology_consultation_id as id, STRING_AGG(r.description, ', ') as reasons
			FROM odontology_consultation_reason ocr
			JOIN odontology_reason r ON (ocr.reason_id = r.id)
			GROUP BY ocr.odontology_consultation_id
			) ocr ON (oc.id = ocr.id )
			LEFT JOIN (
			SELECT oc.id, STRING_AGG(s2.pt, '/split/') as descriptions
			FROM odontology_consultation oc
			JOIN document doc ON (oc.id = doc.source_id and doc.source_type_id = 6)
			left join document_health_condition dhc on(doc.id = dhc.document_id)
			join health_condition hc on(dhc.health_condition_id = hc.id)
			join snomed s2 on(hc.snomed_id = s2.id)
			GROUP BY oc.id
			) otherprob ON (oc.id = otherprob.id)
			LEFT JOIN (
			SELECT oc.id, STRING_AGG(sno.pt, '/split/') as descriptions
			FROM odontology_consultation oc
			JOIN document doc ON (oc.id = doc.source_id and doc.source_type_id = 6)
			left JOIN document_odontology_diagnostic dod ON (doc.id = dod.document_id)
			JOIN odontology_diagnostic od ON (dod.odontology_diagnostic_id = od.id)
			JOIN snomed sno ON (od.snomed_id = sno.id)
			GROUP BY oc.id
			) prob ON (oc.id = prob.id)
			left join (
			select oc.id, string_agg(s.pt, '/split/') as cst_procedures
			from odontology_consultation oc
			join document d on(d.source_id = oc.id)
			join document_procedure dp on(d.id = dp.document_id and d.source_type_id = 6)
			join "procedures" p on(dp.procedure_id = p.id)
			join snomed s on(p.snomed_id = s.id)
			group by oc.id
			) proced on(proced.id = oc.id)
			left join (
			select oc.id, string_agg(s.pt, '/split/') as cst_procedures
			from odontology_consultation oc
			join document d on(d.source_id = oc.id)
			join document_odontology_procedure dop on(dop.document_id = d.id)
			join odontology_procedure op on(dop.odontology_procedure_id = op.id)
			join snomed s on(op.snomed_id = s.id)
			group by oc.id
			) otherproced on(otherproced.id = oc.id)
			left join (
			select oc.id, concat_ws('-', oci.permanent_c, oci.permanent_p, oci.permanent_o) as cpo, concat_ws('-', oci.temporary_c, oci.temporary_e, oci.temporary_o) as ceo
			from odontology_consultation oc
			join odontology_consultation_indices oci on(oc.id = oci.odontology_consultation_id)
			group by oc.id, oci.permanent_c, oci.permanent_p, oci.permanent_o, oci.temporary_c, oci.temporary_e, oci.temporary_o
			) indexs on(indexs.id = oc.id)
			WHERE oc.institution_id = :institutionId
			AND oc.billable = true
			AND oc.created_on BETWEEN :startDate AND :endDate
			)
			SELECT p.description as province, d.description as department, i.sisa_code as sisaCode, i.name as institution,
			CONCAT(pe.last_name, ' ', pe.other_last_names) as patientSurname,
			CONCAT(pe.first_name, ' ', pe.middle_names) as patientFirstName,
			px.name_self_determination as selfPerceivedName,
			it.description as identificationType, pe.identification_number as identificationNumber,
			to_char(pe.birth_date,'DD/MM/YYYY') as birthDate,  g.description as gender,
			CONCAT(a2.street, ' ', a2.number, ' ', a2.floor, ' ', a2.apartment, ' ', c2.description) as address,
			px.phone_number as phoneNumber, px.email as email,
			coverage.coverageName, coverage.affiliateNumber,
			to_char(cst.start_date,'DD/MM/YYYY') as startDate,
			cs.id as clinicalSpecialtyId, cs.name as clinicalSpecialty,
			hp.id as professionalId,
			CONCAT(p2.last_name, ' ', p2.other_last_names, ' ',p2.first_name, ' ', p2.middle_names) as professionalName,
			cst.reasons as reasons,  cst.problems, cst.procedures,
			cst.weight, cst.height, cst.systolicBloodPressure, cst.diastolicBloodPressure,
			cst.cardiovascularRisk, cst.glycosylatedHemoglobin, cst.bloodGlucose, cst.headCircunference, cst.cpo, cst.ceo
			FROM consultation cst
			JOIN institution i ON (cst.institution_id = i.id)
			JOIN address a ON (i.address_id = a.id)
			LEFT JOIN city c ON (a.city_id = c.id)
			JOIN department d ON (c.department_id = d.id)
			JOIN province p ON (d.province_id = p.id)
			JOIN patient pa ON (cst.patient_id = pa.id)
			JOIN person pe ON (pa.person_id = pe.id)
			LEFT JOIN identification_type it ON (pe.identification_type_id = it.id)
			LEFT JOIN person_extended px ON (px.person_id = pe.id)
			LEFT JOIN self_perceived_gender g ON (px.gender_self_determination = g.id)
			LEFT JOIN address a2 ON (px.address_id = a2.id)
			LEFT JOIN city c2 ON (a2.city_id = c2.id)
			LEFT JOIN (
			select pmc.id, mc."name" AS coverageName, affiliate_number AS affiliateNumber
			from patient_medical_coverage pmc
			join medical_coverage mc on (pmc.medical_coverage_id = mc.id)
			) coverage ON (cst.patient_medical_coverage_id = coverage.id)
			LEFT JOIN clinical_specialty cs ON (cst.clinical_specialty_id = cs.id)
			JOIN healthcare_professional hp ON (cst.doctor_id = hp.id)
			JOIN person p2 ON (hp.person_id = p2.id)
		</query>
	</named-native-query>

	<named-native-query name="Reports.NursingConsultationDetail" result-set-mapping="Reports.ConsultationDetailResult">
		<query>
			WITH consultation AS (
			SELECT  oc.institution_id, oc.patient_id, oc.patient_medical_coverage_id, oc.clinical_specialty_id,
			oc.doctor_id, oc.created_on as start_date, null as reasons,  prob.descriptions as problems, proced.cst_procedures as procedures,
			vs.weight, vs.height, vs.systolic as systolicBloodPressure, vs.diastolic as diastolicBloodPressure,
			vs.cardiovascular_risk as cardiovascularRisk, vs.glycosylated as glycosylatedHemoglobin, vs.blood_glucose as bloodGlucose, vs.head_circunference as headCircunference,
			'nursing' as consultation_type
			FROM nursing_consultation oc
			LEFT JOIN (
			SELECT oc.id, STRING_AGG(sno.pt, ', ') as descriptions
			FROM nursing_consultation oc
			JOIN document doc ON (oc.id = doc.source_id and doc.source_type_id = 7)
			JOIN document_health_condition dhc ON (doc.id = dhc.document_id)
			JOIN health_condition hc ON (dhc.health_condition_id = hc.id)
			JOIN snomed sno ON (hc.snomed_id = sno.id)
			GROUP BY oc.id
			) prob ON (oc.id = prob.id)
			LEFT JOIN (
			SELECT oc.id,
			MAX(CASE WHEN ovs.loinc_code='8480-6' THEN ovs.value END) as systolic,
			MAX(CASE WHEN ovs.loinc_code='8462-4' THEN ovs.value END) as diastolic,
			MAX(CASE WHEN ovs.loinc_code='8302-2' THEN ovs.value END) as height,
			MAX(CASE WHEN ovs.loinc_code='29463-7' THEN ovs.value END) as weight,
			MAX(CASE WHEN ovs.loinc_code='65853-4' THEN ovs.value END) as cardiovascular_risk,
			MAX(CASE WHEN ovs.loinc_code='62854-5' THEN ovs.value END) as glycosylated,
			MAX(CASE WHEN ovs.loinc_code='15074-8' THEN ovs.value END) as blood_glucose,
			MAX(CASE WHEN ovs.loinc_code='11947-9' THEN ovs.value END) as head_circunference
			FROM nursing_consultation oc
			join document d on(oc.id = d.source_id and d.source_type_id = 7)
			LEFT JOIN document_vital_sign dvs ON (d.id = dvs.document_id)
			LEFT JOIN observation_vital_sign ovs ON (dvs.observation_vital_sign_id = ovs.id)
			GROUP BY oc.id
			ORDER BY oc.id
			) vs ON (oc.id = vs.id)
			left join (
			select oc.id, string_agg(s.pt, ', ') as cst_procedures
			from nursing_consultation oc
			join document d on(d.source_id = oc.id)
			join document_procedure dp on(d.id = dp.document_id and d.source_type_id = 7)
			join "procedures" p on(dp.procedure_id = p.id)
			join snomed s on(p.snomed_id = s.id)
			group by oc.id
			) proced on(proced.id = oc.id)
			WHERE oc.institution_id = :institutionId
			AND oc.created_on BETWEEN :startDate AND :endDate
			)
			SELECT p.description as province, d.description as department, i.sisa_code as sisaCode, i.name as institution,
			CONCAT(pe.last_name, ' ', pe.other_last_names) as patientSurname,
			CONCAT(pe.first_name, ' ', pe.middle_names) as patientFirstName,
			px.name_self_determination as selfPerceivedName,
			it.description as identificationType, pe.identification_number as identificationNumber,
			to_char(pe.birth_date,'DD/MM/YYYY') as birthDate,  g.description as gender,
			CONCAT(a2.street, ' ', a2.number, ' ', a2.floor, ' ', a2.apartment, ' ', c2.description) as address,
			px.phone_number as phoneNumber, px.email as email,
			coverage.coverageName, coverage.affiliateNumber,
			to_char(cst.start_date,'DD/MM/YYYY') as startDate,
			cs.id as clinicalSpecialtyId, cs.name as clinicalSpecialty,
			hp.id as professionalId,
			CONCAT(p2.last_name, ' ', p2.other_last_names, ' ',p2.first_name, ' ', p2.middle_names) as professionalName,
			cst.reasons as reasons,  cst.problems, cst.procedures,
			cst.weight, cst.height, cst.systolicBloodPressure, cst.diastolicBloodPressure,
			cst.cardiovascularRisk, cst.glycosylatedHemoglobin, cst.bloodGlucose, cst.headCircunference, null as cpo, null as ceo
			FROM consultation cst
			JOIN institution i ON (cst.institution_id = i.id)
			JOIN address a ON (i.address_id = a.id)
			LEFT JOIN city c ON (a.city_id = c.id)
			JOIN department d ON (c.department_id = d.id)
			JOIN province p ON (d.province_id = p.id)
			JOIN patient pa ON (cst.patient_id = pa.id)
			JOIN person pe ON (pa.person_id = pe.id)
			LEFT JOIN identification_type it ON (pe.identification_type_id = it.id)
			LEFT JOIN person_extended px ON (px.person_id = pe.id)
			LEFT JOIN self_perceived_gender g ON (px.gender_self_determination = g.id)
			LEFT JOIN address a2 ON (px.address_id = a2.id)
			LEFT JOIN city c2 ON (a2.city_id = c2.id)
			LEFT JOIN (
			select pmc.id, mc."name" AS coverageName, affiliate_number AS affiliateNumber
			from patient_medical_coverage pmc
			join medical_coverage mc on (pmc.medical_coverage_id = mc.id)
			) coverage ON (cst.patient_medical_coverage_id = coverage.id)
			LEFT JOIN clinical_specialty cs ON (cst.clinical_specialty_id = cs.id)
			JOIN healthcare_professional hp ON (cst.doctor_id = hp.id)
			JOIN person p2 ON (hp.person_id = p2.id)
		</query>
	</named-native-query>

	<!-- ========================================== -->
	<!-- ============== Program Reports =============== -->
	<!-- ========================================== -->

	<named-native-query name="ProgramReports.ConsultationDetailEpiI" result-set-mapping="ProgramReports.ConsultationDetailEpiIResult">
		<query>
			SELECT CONCAT(pe.last_name, ' ', pe.other_last_names, ' ', pe.first_name, ' ', pe.middle_names) as patientFullName,
			CONCAT(substring(pe.last_name, 1, 3), substring(pe.first_name, 1, 2)) as coding,
			to_char(pe.birth_date, 'DD/MM/YYYY') as birthDate, g.description as gender,
			to_char(hc.created_on, 'DD/MM/YYYY') as startDate, dep.description as department,
			CONCAT(ci.description, ' - ', a.street, ' N° ', a.number, case when a.floor is not null then concat(' Piso: ', a.floor, 'Departamento: ', a.apartment) end) as address,
			hc.cie10_codes as cie10Codes,
			CONCAT(it.description, ' ', pe.identification_number) as identificationNumber, s.pt as problems
			FROM health_condition hc
			INNER JOIN patient pa ON hc.patient_id=pa.id
			LEFT JOIN document_health_condition dhe ON dhe.health_condition_id=hc.id
			LEFT JOIN document dd ON dhe.document_id=dd.id
			LEFT JOIN outpatient_consultation oc ON oc.document_id=dd.id
			LEFT JOIN institution ins ON oc.institution_id=ins.id
			INNER JOIN person pe ON pa.person_id=pe.id
			INNER JOIN identification_type it ON pe.identification_type_id=it.id
			INNER JOIN gender g ON pe.gender_id=g.id
			LEFT JOIN person_extended pex ON pex.person_id=pe.id
			LEFT JOIN address a ON pex.address_id=a.id
			LEFT JOIN city ci ON a.city_id=ci.id
			LEFT JOIN department dep ON ci.department_id=dep.id
			INNER JOIN snomed s ON hc.snomed_id=s.id
			INNER JOIN problem_type pt ON hc.problem_id=pt.id
			WHERE (pt.id='55607006' OR pt.id='439401001')
			AND ins.id = :institutionId
			AND oc.created_on BETWEEN :startDate AND :endDate
			AND hc.status_id='55561003'
			AND hc.verification_status_id='59156000'
			AND (s.sctid='1119303003' OR s.sctid='840539006' OR s.sctid='409671005' OR s.sctid='409676000' OR s.sctid='409677009' OR s.sctid='409678004' OR s.sctid='409679007' OR s.sctid='866057003'
			OR LOWER(s.pt) LIKE '%botulismo%' OR LOWER(s.pt) LIKE '%brote de enfermedad%' OR LOWER(s.pt) LIKE '%carbunco humano%' OR LOWER(s.pt) LIKE '%colera%'
			OR LOWER(s.pt) LIKE '%coqueluche%' OR LOWER(s.pt) LIKE '%difteria%' OR LOWER(s.pt) LIKE '%encefalopatía%' OR LOWER(s.pt) LIKE '%encefalitis%'
			OR LOWER(s.pt) LIKE '%fiebre del nilo%' OR LOWER(s.pt) LIKE '%fiebre amarilla%' OR LOWER(s.pt) LIKE '%fiebre hemorrágica%' OR LOWER(s.pt) LIKE '%fiebre recurrente%'
			OR LOWER(s.pt) LIKE '%fiebre tifoidea%' OR LOWER(s.pt) LIKE '%fiebre paratifoidea%' OR LOWER(s.pt) LIKE '%gripe humana%' OR LOWER(s.pt) LIKE '%hantavirosis%'
			OR (LOWER(s.pt) LIKE '%hepatitis%' AND NOT(LOWER(s.pt) LIKE '%hepatitis c%') AND NOT(LOWER(s.pt) LIKE '%hepatitis b%') AND NOT(LOWER(s.pt) LIKE '%hepatitis d%') AND NOT(LOWER(s.pt) LIKE '%hepatitis e%'))
			OR LOWER(s.pt) LIKE '%intoxicación%moluscos%' OR LOWER(s.pt) LIKE '%leishmaniasis visceral%' OR LOWER(s.pt) LIKE '%lepra%' OR LOWER(s.pt) LIKE '%leptospirosis%'
			OR LOWER(s.pt) LIKE '%meningoencefalitis%' OR LOWER(s.pt) LIKE '%mening%micótica%' OR LOWER(s.pt) LIKE '%mening%parasitaria%'OR LOWER(s.pt) LIKE '%meningococcemia%'
			OR LOWER(s.pt) LIKE '%mening%tubercul%' OR LOWER(s.pt) LIKE '%paludismo%' OR LOWER(s.pt) LIKE '%peste%' OR LOWER(s.pt) LIKE '%poliomielitis%'
			OR LOWER(s.pt) LIKE '%psitacosis%' OR LOWER(s.pt) LIKE '%rabia%' OR LOWER(s.pt) LIKE '%rubeola%' OR LOWER(s.pt) LIKE '%sarampión%' OR LOWER(s.pt) LIKE '%síndr%urémico%hemol%'
			OR LOWER(s.pt) LIKE '%síndr%guillén barré%' OR LOWER(s.pt) LIKE '%síndrome respiratorio agudo severo%' OR LOWER(s.pt) LIKE '%sars%' OR LOWER(s.pt) LIKE '%tétano%'
			OR LOWER(s.pt) LIKE '%tifus%' OR LOWER(s.pt) LIKE '%triquinosis%' OR LOWER(s.pt) LIKE '%viruela%')
			<!--AND ((EXTRACT(MONTH FROM oc.created_on)=(EXTRACT(MONTH FROM CURRENT_TIMESTAMP)-1) AND EXTRACT(YEAR FROM oc.created_on)=EXTRACT(YEAR FROM CURRENT_TIMESTAMP)) OR (EXTRACT(MONTH FROM oc.created_on)=1 AND EXTRACT(YEAR FROM oc.created_on)=(EXTRACT(YEAR FROM CURRENT_TIMESTAMP)-1)))-->
		</query>
	</named-native-query>

	<named-native-query name="ProgramReports.ConsultationDetailEpiII" result-set-mapping="ProgramReports.ConsultationDetailEpiIIResult">
		<query>
			WITH people AS (
			SELECT hc.id AS id, CONCAT(pe.last_name, ' ', pe.other_last_names, ' ', pe.first_name, ' ', pe.middle_names),
			CONCAT(substring(pe.last_name, 1, 3), substring(pe.first_name, 1, 2)), pe.birth_date, g.description,
			CASE
			WHEN (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pe.birth_date)) &lt; 0 then
			((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pe.birth_date)) -1)
			ELSE ((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pe.birth_date)))
			end AS anios,
			CASE
			WHEN (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pe.birth_date)) &lt; 0 then
			(12 +(EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pe.birth_date)))
			ELSE ((EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pe.birth_date)))
			end as meses,
			hc.created_on, dep.description, CONCAT(ci.description, ' - ', a.street, ' N° ', a.number, CASE WHEN a.floor is not null then CONCAT(' Piso: ', a.floor, 'Departamento: ', a.apartment) end), hc.cie10_codes as CIE10,
			CONCAT(it.description, ' ', pe.identification_number), s.sctid as snomed, s.pt as term
			FROM health_condition hc INNER JOIN patient pa on hc.patient_id=pa.id
			LEFT JOIN document_health_condition dhe ON dhe.health_condition_id=hc.id
			LEFT JOIN document dd on dhe.document_id=dd.id
			LEFT JOIN outpatient_consultation oc ON oc.document_id=dd.id
			LEFT JOIN institution ins on oc.institution_id=ins.id
			INNER JOIN person pe on pa.person_id=pe.id
			INNER JOIN identification_type it on pe.identification_type_id=it.id
			INNER JOIN gender g on pe.gender_id=g.id
			LEFT JOIN person_extended pex on pex.person_id=pe.id
			LEFT JOIN address a on pex.address_id=a.id
			LEFT JOIN city ci on a.city_id=ci.id
			LEFT JOIN department dep on ci.department_id=dep.id
			INNER JOIN snomed s on hc.snomed_id=s.id
			INNER JOIN problem_type pt on hc.problem_id=pt.id
			WHERE ins.id= :institutionId AND (pt.id='55607006' OR pt.id='439401001') AND hc.status_id='55561003' AND hc.verification_status_id='59156000'
			AND oc.institution_id= :institutionId
			AND oc.created_on BETWEEN :startDate AND :endDate),
			<!--AND (((EXTRACT(MONTH FROM oc.created_on)=(EXTRACT(MONTH FROM CURRENT_TIMESTAMP)-1) AND EXTRACT(YEAR FROM oc.created_on)=EXTRACT(YEAR FROM CURRENT_TIMESTAMP)) OR (EXTRACT(MONTH FROM oc.created_on)=1 AND EXTRACT(YEAR FROM oc.created_on)=(EXTRACT(YEAR FROM CURRENT_TIMESTAMP)-1))))),-->
			data_ep AS (
			SELECT *,
			CASE
			WHEN anios&lt;1 AND meses&lt;6 then '(&lt;6)'
			WHEN anios&lt;1 AND meses>=6 AND meses &lt;=11 then '[6-11]'
			WHEN anios&lt;1 AND meses>=12 AND meses &lt;=23 then '[12-23]'
			WHEN anios>=2 AND anios&lt;=4 then '[2-4]'
			WHEN anios>=5 AND anios&lt;=9 then '[5-9]'
			WHEN anios>=10 AND anios&lt;=14 then '[10-14]'
			WHEN anios>=15 AND anios&lt;=19 then '[15-19]'
			WHEN anios>=20 AND anios&lt;=24 then '[20-24]'
			WHEN anios>=25 AND anios&lt;=34 then '[25-34]'
			WHEN anios>=35 AND anios&lt;=44 then '[35-44]'
			WHEN anios>=45 AND anios&lt;=64 then '[45-64]'
			WHEN anios>=65 AND anios&lt;=74 then '[65-74]'
			WHEN anios>75 then '(>75)'
			end AS grupo
			FROM people
			)
			SELECT CONCAT(term, ' (CIE10:', CIE10, ')') as diagnostic, grupo as rango, count(id) as contador
			FROM data_ep
			WHERE lower(term) like '%influenza%' or lower(term) like '%gripe%' or lower(term) like '%gripal%' or lower(term) like '%virosis respiratoria%' or lower(term) like '%virus sincicial respiratorio%' or lower(term) like '%adenovirus%' or lower(term) like '%neumonía%' or lower(term) like '%neuropatía%' or lower(term) like '%neumonítis%' or lower(term) like '%neumónico%'
			or lower(term) like '%pulmonía%' or lower(term) like '%bronquilitis%' or lower(term) like '%ETS%' or lower(term) like '%H1N1%' or lower(term) like '%diarrea%' or lower(term) like '%gastroenteritis%' or lower(term) like '%enteritis%' or lower(term) like '%colitis%' or lower(term) like '%diarreico%'  or lower(term) like '%diabetes%'
			or lower(term) like '%accidente%' or lower(term) like '%alcoholismo%' or lower(term) like '%escorpion%' or lower(term) like '%araña%' or lower(term) like '%bronquitis%' or lower(term) like '%brucelosis%' or lower(term) like '%cancer%' or lower(term) like '%catarro%' or lower(term) like '%chagas%' or lower(term) like '%desnutrición%'
			or lower(term) like '%encefalitis%' or lower(term) like '%enteroparasitosis%' or lower(term) like '%escabiosis%' or lower(term) like '%escarlatina%' or lower(term) like '%envenenamiento%animales%venenosos%' or lower(term) like '%fiebre reumatica%' or lower(term) like '%giardiasis%'
			or lower(term) like '%hepatitis b%' or lower(term) like '%hepatitis c%' or lower(term) like '%hepatitis d%' or lower(term) like '%hepatitis e%' or lower(term) like '%helmintiatis%' or lower(term) like '%hidatidosis%' or lower(term) like '%hipertensión arterial%' or lower(term) like '%hipertiroidismo%'
			or lower(term) like '%hipotiroidismo%' or lower(term) like '%HIV%' or lower(term) like '%infección%' or (lower(term) like '%intoxicación%' AND not(lower(term) like '%moluscos%')) or lower(term) like '%irag%' or lower(term) like '%lesiones%'
			or lower(term) like '%leishmaniasis cutánea%' or lower(term) like '%leishmaniasis mucosa%' or lower(term) like '%lupus%' or lower(term) like '%meningitis%' or lower(term) like '%micosis%' or lower(term) like '%mielitis transversa%' or lower(term) like '%mononucleosis%'
			or lower(term) like '%obesidad%' or lower(term) like '%ofidismo%' or lower(term) like '%parotiditis%' or lower(term) like '%pediculosis%' or lower(term) like '%mordida%' or lower(term) like '%picadura%' or lower(term) like '%piodermitis%' or lower(term) like '%polineuritis%'
			or lower(term) like '%salmonellosis%' or lower(term) like '%sida%' or lower(term) like '%sífilis%' or lower(term) like '%síndrome febril%' or lower(term) like '%supuración genital%' or lower(term) like '%toxinfección%' or lower(term) like '%toxoplasmosis%' or lower(term) like '%tuberculosis%'
			or lower(term) like '%varicela%' or lower(term) like '%defunción%'
			group by diagnostic, rango

		</query>
	</named-native-query>
	
	<named-native-query name="ProgramReports.ConsultationDetailRecupero" result-set-mapping="ProgramReports.ConsultationDetailRecuperoResult">
		<query>
			SELECT concat(ins.name, '(SISA: ', ins.sisa_code, ' | CUIT: ', ins.cuit, ')') AS institution, cs.name AS clinicalSpecialty,
			concat(p.first_name, ' ', p.middle_names, ' ', p.last_name, ' ', p.other_last_names) as provider, p.identification_number AS providerDni,
			oc.start_date AS attentionDate,
			CASE
			WHEN (EXTRACT(HOUR FROM oc.created_on)) &lt; 3 THEN
			concat(24-3, ':', EXTRACT(MINUTE FROM oc.created_on))
			ELSE concat(EXTRACT(HOUR FROM oc.created_on)-3, ':', EXTRACT(MINUTE FROM oc.created_on))
			end AS hour,
			(row_number() over(partition by oc.doctor_id order by oc.start_date)) AS consultationNumber,
			pp.identification_number as patientDni, concat(pp.first_name , ' ', pp.last_name) AS patientName, g.description AS gender, pp.birth_date AS birthDate,
			CASE
			WHEN (EXTRACT(MONTH FROM oc.start_date) - EXTRACT(MONTH FROM pp.birth_date)) &lt; 0 THEN
			concat((EXTRACT(YEAR FROM oc.start_date) - EXTRACT(YEAR FROM pp.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM oc.start_date) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			ELSE concat((EXTRACT(YEAR FROM oc.start_date) - EXTRACT(YEAR FROM pp.birth_date)), ' Años, ', (EXTRACT(MONTH FROM oc.start_date) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			end AS ageTurn,
			CASE
			WHEN (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)) &lt; 0 THEN
			concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pp.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			ELSE concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pp.birth_date)), ' Años, ', (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			end AS ageToday,
			(SELECT string_agg(concat(mc.name, '(RNOS: ', hi.rnos, ')'), ', ') FROM patient_medical_coverage pmc LEFT JOIN medical_coverage mc on pmc.medical_coverage_id=mc.id LEFT JOIN health_insurance hi ON hi.id=mc.id WHERE pmc.patient_id=pa.id) AS medicalCoverage,
			concat(a.street, ' N° ', a.number, CASE WHEN a.floor is not null THEN concat(' Piso: ', a.floor, 'Departamento: ', a.apartment) end) AS address,
			c.description AS location,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id and s_vs.id=10) AS bmi,
			(SELECT string_agg(r.description, ', ') FROM outpatient_consultation_reasons ocr INNER JOIN reasons r on ocr.reason_id=r.id WHERE ocr.outpatient_consultation_id=oc.id) as reasons,
			(SELECT string_agg(concat(s_proc.pt, '(', ps.description, ' | SNOMED: ', s_proc.sctid, ' | CIE10: ', proc.cie10_codes, ')'), ', ') FROM document_procedure dp INNER JOIN procedures proc on dp.procedure_id=proc.id INNER JOIN procedures_status ps ON proc.status_id=ps.id INNER JOIN snomed s_proc ON proc.snomed_id=s_proc.id WHERE dp.document_id=d.id) AS procedures,
			(SELECT string_agg(concat(s_prob.pt,' (',ccs.description,' &amp; ',cvs.description,' - Fecha: ',hc.start_date ,')', '[SNOMED: ', s_prob.sctid, ' | CIE10: ', hc.cie10_codes, ']'), ', ')
			FROM document_health_condition dhc INNER JOIN health_condition hc ON dhc.health_condition_id=hc.id INNER JOIN problem_type pt on hc.problem_id=pt.id INNER JOIN snomed s_prob on hc.snomed_id=s_prob.id INNER JOIN condition_clinical_status ccs ON hc.status_id=ccs.id INNER JOIN condition_verification_status cvs ON hc.verification_status_id=cvs.id WHERE dhc.document_id=d.id) AS problems,
			(SELECT string_agg(concat(s_med.pt, '[SNOMED: ', s_med.sctid, ' | CIE10: ', ms.cie10_codes, '] (status: ', mss.description, ')'), ', ') FROM document_medicamention_statement dms INNER JOIN medication_statement ms ON dms.medication_statement_id=ms.id INNER JOIN medication_statement_status mss ON ms.status_id=mss.id INNER JOIN snomed s_med ON ms.snomed_id=s_med.id WHERE dms.document_id=d.id) AS medication,
			(SELECT string_agg(ev.description, ', ') FROM note ev WHERE d.other_note_id=ev.id) AS evolution
			FROM outpatient_consultation oc
			LEFT JOIN institution ins ON oc.institution_id=ins.id
			LEFT JOIN clinical_specialty cs ON oc.clinical_specialty_id=cs.id
			LEFT JOIN healthcare_professional hp ON oc.doctor_id=hp.id
			INNER JOIN person p ON hp.person_id=p.id
			LEFT JOIN patient pa ON oc.patient_id=pa.id
			INNER JOIN person pp ON pa.person_id=pp.id
			LEFT JOIN person_extended pe ON pe.person_id=pp.id
			INNER JOIN gender g ON pp.gender_id=g.id
			LEFT JOIN gender gg ON pe.gender_self_determination=gg.id
			LEFT JOIN patient_medical_coverage pmc ON pmc.patient_id=pa.id
			LEFT JOIN medical_coverage mc ON pmc.medical_coverage_id=mc.id
			LEFT JOIN address a ON pe.address_id=a.id
			LEFT JOIN city c ON a.city_id=c.id
			LEFT JOIN document d ON oc.document_id=d.id
			WHERE ins.id=:institutionId
			AND oc.created_on BETWEEN :startDate AND :endDate
			AND (pmc.id is not null AND NOT (lower(mc.name) like '%sumar%'))
			ORDER BY oc.created_on;
		</query>
	</named-native-query>
	
	<named-native-query name="ProgramReports.ConsultationDetailSumar" result-set-mapping="ProgramReports.ConsultationDetailSumarResult">
		<query>
			SELECT concat(ins.name, '(SISA: ', ins.sisa_code, ' | CUIT: ', ins.cuit, ')') AS institution,
			concat(p.first_name, ' ', p.middle_names, ' ', p.last_name, ' ', p.other_last_names) as provider, p.identification_number AS providerDni,
			oc.start_date AS attentionDate, oc.clinical_specialty_id,
			CASE
			WHEN (EXTRACT(HOUR FROM oc.created_on)) &lt; 3 THEN
			concat(24-3, ':', EXTRACT(MINUTE FROM oc.created_on))
			ELSE concat(EXTRACT(HOUR FROM oc.created_on)-3, ':', EXTRACT(MINUTE FROM oc.created_on))
			END AS hour,
			(row_number() over(partition by oc.doctor_id order by oc.start_date)) AS consultationNumber,
			pp.identification_number AS patientDni, concat(pp.first_name , ' ', pp.last_name) AS patientName, g.description AS gender, gg.description AS selfPerceivedGender, pe.name_self_determination selfPerceivedName, pp.birth_date birthDate,
			CASE
			WHEN (EXTRACT(MONTH FROM oc.start_date) - EXTRACT(MONTH FROM pp.birth_date)) &lt; 0 THEN
			concat((EXTRACT(YEAR FROM oc.start_date) - EXTRACT(YEAR FROM pp.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM oc.start_date) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			ELSE concat((EXTRACT(YEAR FROM oc.start_date) - EXTRACT(YEAR FROM pp.birth_date)), ' Años, ', (EXTRACT(MONTH FROM oc.start_date) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			END AS ageTurn,
			CASE
			WHEN (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)) &lt; 0 THEN
			concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pp.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			ELSE concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pp.birth_date)), ' Años, ', (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			END AS ageToday,
			et.pt ethnicity,
			(SELECT string_agg(concat(mc.name, '(RNOS: ', hi.rnos, ')'), ', ') FROM patient_medical_coverage pmc LEFT JOIN medical_coverage mc ON pmc.medical_coverage_id=mc.id LEFT JOIN health_insurance hi ON hi.id=mc.id WHERE pmc.patient_id=pa.id) AS medicalCoverage,
			concat(a.street, ' N° ', a.number, CASE WHEN a.floor is not null THEN concat(' Piso: ', a.floor, 'Departamento: ', a.apartment) end) AS address,
			c.description AS location,
			ed.description AS educationLevel,
			lab.description AS occupation,
			cs.id as clinicalSpecialtyId, cs.name as clinicalSpecialty,
			hp.id as professionalId,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=1) AS systolicBloodPressure,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=2) AS diastolicBloodPressure,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=3) AS meanArterialPressure,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=4) AS temperature,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=5) AS heartRate,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=6) AS respirationRate,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=7) AS oxygenSaturationHemoglobin,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=8) AS height,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=9) AS weight,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=10) AS bmi,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs on dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs on ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=1409) AS headCircunference,
			(SELECT string_agg(r.description, ', ') FROM outpatient_consultation_reasons ocr INNER JOIN reasons r ON ocr.reason_id=r.id WHERE ocr.outpatient_consultation_id=oc.id) AS reasons,
			(SELECT string_agg(concat(s_proc.pt, '(', ps.description, ' | SNOMED: ', s_proc.sctid, ' | CIE10: ', proc.cie10_codes, ')'), ', ') FROM document_procedure dp INNER JOIN procedures proc ON dp.procedure_id=proc.id INNER JOIN procedures_status ps ON proc.status_id=ps.id INNER JOIN snomed s_proc ON proc.snomed_id=s_proc.id WHERE dp.document_id=d.id) AS procedures,
			(SELECT string_agg(concat(s_prob.pt,' (',ccs.description,' &amp; ',cvs.description,' - Fecha: ',hc.start_date ,')', '[SNOMED: ', s_prob.sctid, ' | CIE10: ', hc.cie10_codes, ']'), ', ')
			FROM document_health_condition dhc INNER JOIN health_condition hc on dhc.health_condition_id=hc.id INNER JOIN problem_type pt on hc.problem_id=pt.id INNER JOIN snomed s_prob on hc.snomed_id=s_prob.id INNER JOIN condition_clinical_status ccs ON hc.status_id=ccs.id INNER JOIN condition_verification_status cvs ON hc.verification_status_id=cvs.id WHERE dhc.document_id=d.id) AS problems,
			(SELECT string_agg(concat(s_med.pt, '[SNOMED: ', s_med.sctid, ' | CIE10: ', ms.cie10_codes, '] (status: ', mss.description, ')'), ', ') FROM document_medicamention_statement dms INNER JOIN medication_statement ms ON dms.medication_statement_id=ms.id INNER JOIN medication_statement_status mss ON ms.status_id=mss.id INNER JOIN snomed s_med ON ms.snomed_id=s_med.id WHERE dms.document_id=d.id) AS medication,
			(SELECT string_agg(ev.description, ', ') FROM note ev WHERE d.other_note_id=ev.id) AS evolution
			FROM outpatient_consultation oc
			LEFT JOIN institution ins ON oc.institution_id=ins.id
			LEFT JOIN clinical_specialty cs ON (oc.clinical_specialty_id=cs.id)
			JOIN healthcare_professional hp ON (oc.doctor_id=hp.id)
			JOIN person p ON (hp.person_id=p.id)
			LEFT JOIN patient pa ON oc.patient_id=pa.id
			INNER JOIN person pp ON pa.person_id=pp.id
			LEFT JOIN person_extended pe ON pe.person_id=pp.id
			LEFT JOIN ethnicity et ON pe.ethnicity_id=et.id
			LEFT JOIN education_level ed ON pe.education_level_id=ed.id
			LEFT JOIN occupation lab ON pe.occupation_id=lab.id
			INNER JOIN gender g ON pp.gender_id=g.id
			LEFT JOIN gender gg ON pe.gender_self_determination=gg.id
			LEFT JOIN patient_medical_coverage pmc ON pmc.patient_id=pa.id
			LEFT JOIN medical_coverage mc ON pmc.medical_coverage_id=mc.id
			LEFT JOIN address a ON pe.address_id=a.id
			LEFT JOIN city c ON a.city_id=c.id
			LEFT JOIN document d ON oc.document_id=d.id
			WHERE ins.id=:institutionId
			AND oc.created_on BETWEEN :startDate AND :endDate
			AND (pmc.id is null Or lower(mc.name) like '%sumar%')
			ORDER BY oc.created_on;
		</query>
	</named-native-query>

	<named-native-query name="ProgramReports.ConsultationDetailOdontologia" result-set-mapping="ProgramReports.ConsultationDetailOdontologiaResult">
		<query>
			with procedimientos as(
			SELECT dp.document_id as document_id, s.pt as pt, ps.description as description, s.sctid as sctid, proc.cie10_codes from document_procedure dp
			INNER JOIN procedures proc on dp.procedure_id=proc.id
			INNER JOIN procedures_status ps on proc.status_id=ps.id
			INNER JOIN snomed s on proc.snomed_id=s.id
			where ps.description&lt;>'Ingresado por error' and ps.description&lt;>'Desconocido'
			), medicacion as (
			SELECT dms.document_id, s.pt, s.sctid, ms.cie10_codes from document_medicamention_statement dms
			INNER JOIN medication_statement ms on dms.medication_statement_id=ms.id
			INNER JOIN medication_statement_status mss on ms.status_id=mss.id
			INNER JOIN snomed s on ms.snomed_id=s.id
			), problemas as(
			SELECT dhc.document_id, s.sctid, concat(s.pt,' (',ccs.description,' &amp; ',cvs.description,' - Fecha: ',hc.start_date ,')') as description, hc.cie10_codes from document_health_condition dhc
			INNER JOIN health_condition hc on dhc.health_condition_id=hc.id
			INNER JOIN problem_type pt on hc.problem_id=pt.id
			INNER JOIN snomed s on hc.snomed_id=s.id
			INNER JOIN condition_clinical_status ccs on hc.status_id=ccs.id
			INNER JOIN condition_verification_status cvs on hc.verification_status_id=cvs.id
			where ccs.id&lt;>'723510000'
			)
			SELECT concat(ins.name, '(SISA: ', ins.sisa_code, ' | CUIT: ', ins.cuit, ')') AS institution,
			cs.name as operativeUnit,
			concat(p.first_name, ' ', p.middle_names, ' ', p.last_name, ' ', p.other_last_names) as provider,
			p.identification_number as providerDni,
			oc.performed_date as attentionDate,
			(row_number() over(partition by oc.doctor_id order by oc.performed_date)) as consultationNumber,
			pp.identification_number as patientDni,
			concat(pp.first_name , ' ', pp.last_name) as patientName,
			g.description as gender,
			gg.description as selfPerceivedGender,
			pe.name_self_determination as selfPerceivedName,
			pp.birth_date as birthDate,
			case
			when (EXTRACT(MONTH FROM oc.performed_date) - EXTRACT(MONTH FROM pp.birth_date)) &lt; 0 then
			concat((EXTRACT(YEAR FROM oc.performed_date) - EXTRACT(YEAR FROM pp.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM oc.performed_date) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			else concat((EXTRACT(YEAR FROM oc.performed_date) - EXTRACT(YEAR FROM pp.birth_date)), ' Años, ', (EXTRACT(MONTH FROM oc.performed_date) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			end as ageTurn,
			case
			when (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)) &lt; 0 then
			concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pp.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			else concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pp.birth_date)), ' Años, ', (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			end as ageToday,
			et.pt as ethnicity,
			(SELECT string_agg(concat(mc.name, '(RNOS: ', hi.rnos, ')'), ', ') from patient_medical_coverage pmc LEFT JOIN medical_coverage mc on pmc.medical_coverage_id=mc.id LEFT JOIN health_insurance hi on hi.id=mc.id where pmc.patient_id=pa.id) as medicalCoverage,
			concat(oci.permanent_c, ' | ', oci.permanent_p, ' | ', oci.permanent_o) as indexCpo,
			concat(oci.temporary_c, ' | ', oci.temporary_e, ' | ', oci.temporary_o) as indexCeo,
			oci.permanent_teeth_present as permanentTeethPresent,
			oci.temporary_teeth_present as temporaryTeethPresent,
			concat(a.street, ' N° ', a.number, case when a.floor is not null then concat(' Piso: ', a.floor, 'Departamento: ', a.apartment) end) as address,
			c.description as location,
			ed.description as educationLevel,
			lab.description as occupation,
			(SELECT string_agg(r.description, ', ') from odontology_consultation_reason ocr INNER JOIN reasons r on ocr.reason_id=r.id where ocr.odontology_consultation_id=oc.id) as reasons,
			(SELECT string_agg(concat(proc.pt, '(', proc.description, ' | SNOMED: ', proc.sctid, ' | CIE10: ', proc.cie10_codes, ')'), ', ') from procedimientos proc where proc.document_id=d.id) as procedures,
			(SELECT string_agg(concat(prob.description, '[SNOMED: ', prob.sctid, ' | CIE10: ', prob.cie10_codes, ']'), ', ') from problemas prob where prob.document_id=d.id) as problems,
			(SELECT string_agg(concat(med.pt, '(SNOMED:', med.sctid, ' | CIE10: ', med.cie10_codes, ')'), ', ') from medicacion med where med.document_id=d.id) as medication,
			(SELECT string_agg(ev.description, ', ') from note ev where d.other_note_id=ev.id) as evolution
			from odontology_consultation oc
			LEFT JOIN odontology_consultation_indices oci ON oc.id=oci.odontology_consultation_id
			LEFT JOIN institution ins on oc.institution_id=ins.id
			LEFT JOIN clinical_specialty cs on oc.clinical_specialty_id=cs.id
			LEFT JOIN healthcare_professional hp ON oc.doctor_id=hp.id
			INNER JOIN person p on hp.person_id=p.id
			LEFT JOIN patient pa on oc.patient_id=pa.id
			INNER JOIN person pp on pa.person_id=pp.id
			LEFT JOIN person_extended pe on pe.person_id=pp.id
			LEFT JOIN ethnicity et on pe.ethnicity_id=et.id
			LEFT JOIN education_level ed on pe.education_level_id=ed.id
			LEFT JOIN occupation lab on pe.occupation_id=lab.id
			INNER JOIN gender g on pp.gender_id=g.id
			LEFT JOIN gender gg on pe.gender_self_determination=gg.id
			LEFT JOIN patient_medical_coverage pmc ON pmc.patient_id=pa.id
			LEFT JOIN medical_coverage mc on pmc.medical_coverage_id=mc.id
			LEFT JOIN address a on pe.address_id=a.id
			LEFT JOIN city c on a.city_id=c.id
			LEFT JOIN document d ON oc.id=d.source_id AND oc.created_by = d.created_by AND date_trunc('minute', oc.created_on) = date_trunc('minute', d.created_on) --oc.created_on=d.created_on
			WHERE (pmc.id is null Or lower(mc.name) like '%sumar%')
			AND ins.id= :institutionId
			AND oc.created_on BETWEEN :startDate AND :endDate <!--(oc.created_on >= date_trunc('month', (now() + (INTERVAL '-2 month'))) AND oc.created_on &lt; date_trunc('month', now()))-->
			order by oc.created_on;
		</query>
	</named-native-query>
	
	<!-- ========================================== -->
	<!-- ============== General Reports =============== -->
	<!-- ========================================== -->

	<named-native-query name="GeneralReports.ConsultationDetailEmergencias" result-set-mapping="GeneralReports.ConsultationDetailEmergenciasResult">
		<query>
			SELECT ece.created_on as createdOn,
			ins.id as institutionId,
			concat(ins.name, ' ', ins.sisa_code) AS institution,
			ece.ambulance_company_id as ambulance,
			d_of.description as office,
			css.description as sector,
			CASE
			WHEN ece.has_police_intervention=true THEN
			concat('Sí')
			ELSE concat('No')
			END AS policeIntervention,
			concat(EXTRACT(DAY FROM ece.updated_on), '/', EXTRACT(MONTH FROM ece.updated_on), '/', EXTRACT(YEAR FROM ece.updated_on)) as attentionDate,
			case
			when (EXTRACT(HOUR FROM ece.updated_on)) &lt; 3 then
			concat(24-3, ':', EXTRACT(MINUTE FROM ece.updated_on))
			else concat(EXTRACT(HOUR FROM ece.updated_on)-3, ':', EXTRACT(MINUTE FROM ece.updated_on))
			end as attentionHour,
			concat(it.description, ' ', pe.identification_number) as identification,
			concat(pe.last_name, ' ', pe.other_last_names) as lastName,
			concat(pe.first_name, ' ', pe.middle_names) as names,
			concat(mc.name, '(', hi.rnos, ')', pmc.affiliate_number) as medicalCoverage,
			ec_in_t.description AS emergencyCareEntrance,
			ec_st.description AS situation,
			ec_t.description AS emergencyCareType,
			(SELECT string_agg(tr.notes, ', ') FROM triage tr WHERE tr.emergency_care_episode_id=ece.id) AS triageNote,
			concat(tr_cat.name, ' Codigo: ', tr_cat.color_name) as triageLevel,
			ec_dis.administrative_discharge_on as dateDischarge,
			ec_dis.ambulance_company_id AS ambulanceDischarge,
			dis.description as typeDischarge,
			dis_out.description as patientExit
			FROM emergency_care_episode ece
			INNER JOIN institution ins ON ece.institution_id = ins.id
			INNER JOIN emergency_care_state ec_st ON ece.emergency_care_state_id = ec_st.id
			INNER JOIN patient pa ON ece.patient_id = pa.id
			INNER JOIN person pe ON pa.person_id = pe.id
			INNER JOIN identification_type it ON pe.identification_type_id=it.id
			LEFT JOIN patient_medical_coverage pmc on ece.patient_medical_coverage_id=pmc.id
			LEFT JOIN medical_coverage mc ON pmc.medical_coverage_id=mc.id
			LEFT JOIN health_insurance hi ON hi.id=mc.id
			LEFT JOIN emergency_care_entrance_type ec_in_t ON ece.emergency_care_entrance_type_id = ec_in_t.id
			LEFT JOIN emergency_care_type ec_t ON ece.emergency_care_type_id = ec_t.id
			LEFT JOIN emergency_care_discharge ec_dis ON ece.id = ec_dis.emergency_care_episode_id
			LEFT JOIN discharge_type dis ON ec_dis.discharge_type_id = dis.id
			LEFT JOIN emergency_care_entrance_type dis_out ON ec_dis.hospital_transport_id=dis_out.id
			LEFT JOIN doctors_office d_of ON ece.doctors_office_id=d_of.id
			LEFT JOIN clinical_specialty_sector css ON d_of.sector_id=css.id
			LEFT JOIN triage_category tr_cat  ON ece.triage_category_id=tr_cat.id
			WHERE (ece.created_on >= date_trunc('hour', (now() + (INTERVAL '-24 hour')))
			AND ece.created_on &lt; date_trunc('hour', now()))
			AND ins.id = :institutionId
		</query>
	</named-native-query>

	<named-native-query name="GeneralReports.ConsultationDetailDiabeticos" result-set-mapping="GeneralReports.ConsultationDetailDiabeticosResult">
		<query>
			WITH signos_vitales as(
			SELECT d.id as id_doc,
			s.id, s.pt as name,
			CAST(ovs.value AS decimal) as value
			FROM document d INNER JOIN document_vital_sign dvs on dvs.document_id=d.id
			INNER JOIN observation_vital_sign ovs on dvs.observation_vital_sign_id=ovs.id
			INNER JOIN snomed s on ovs.snomed_id=s.id
			), medicacion as (
			SELECT dms.document_id, s.pt, s.sctid FROM document_medicamention_statement dms
			INNER JOIN medication_statement ms on dms.medication_statement_id=ms.id
			INNER JOIN medication_statement_status mss on ms.status_id=mss.id
			INNER JOIN snomed s on ms.snomed_id=s.id
			), motivos_list as(
			SELECT string_agg(rr.description, ', ') as descriptions, ocrr.outpatient_consultation_id
			FROM outpatient_consultation_reasons ocrr
			INNER JOIN reasons rr on ocrr.reason_id=rr.id
			GROUP BY outpatient_consultation_id
			)
			SELECT oc.id as id,
			concat(ins.name, ' (SISA: ', ins.sisa_code, ')') as institution,
			oc.created_on as attentionDate,
			concat(p.first_name, ' ', p.middle_names, ' ', p.last_name, ' ', p.other_last_names) as lender,
			p.identification_number as identificationLender,
			concat(pp.first_name, ' ', pp.middle_names , ' ', pp.last_name, ' ', pp.other_last_names) as patient,
			pp.identification_number as identificationPatient,
			s_hc.pt as problem,
			mo.descriptions as reasons,
			sv_hg.value as glycosylatedHemoglobinBloodPressure,
			(SELECT string_agg(concat(med.pt, '(SNOMED:', med.sctid, ')'), ', ') FROM medicacion med where med.document_id=d.id) as medication
			FROM outpatient_consultation oc
			LEFT JOIN institution ins ON oc.institution_id=ins.id
			LEFT JOIN motivos_list mo on mo.outpatient_consultation_id=oc.id
			LEFT JOIN healthcare_professional hp ON oc.doctor_id=hp.id
			INNER JOIN person p on hp.person_id=p.id
			INNER JOIN identification_type itp ON p.identification_type_id=itp.id
			LEFT JOIN patient pa on oc.patient_id=pa.id
			INNER JOIN person pp on pa.person_id=pp.id
			INNER JOIN identification_type itpp ON pp.identification_type_id=itpp.id
			INNER JOIN document d on oc.document_id=d.id
			INNER JOIN document_health_condition dhc on dhc.document_id=d.id INNER JOIN health_condition hc on dhc.health_condition_id=hc.id INNER JOIN snomed s_hc on hc.snomed_id=s_hc.id
			LEFT JOIN signos_vitales sv_hg on sv_hg.id_doc=oc.document_id and sv_hg.id=1411
			where (s_hc.pt like '%diabetes%')
			AND ins.id= :institutionId
			AND oc.created_on BETWEEN :startDate AND :endDate
			<!--AND ((EXTRACT(MONTH FROM oc.created_on)=(EXTRACT(MONTH FROM CURRENT_TIMESTAMP)-1) AND EXTRACT(YEAR FROM oc.created_on)=EXTRACT(YEAR FROM CURRENT_TIMESTAMP)) OR (EXTRACT(MONTH FROM oc.created_on)=1 AND EXTRACT(YEAR FROM oc.created_on)=(EXTRACT(YEAR FROM CURRENT_TIMESTAMP)-1)))-->
		</query>
	</named-native-query>

	<named-native-query name="GeneralReports.ConsultationDetailHipertensos" result-set-mapping="GeneralReports.ConsultationDetailHipertensosResult">
		<query>
			with signos_vitales as(
			SELECT d.id as id_doc, s.id, s.pt as name, CAST(ovs.value AS decimal) as value
			FROM document d INNER JOIN document_vital_sign dvs on dvs.document_id=d.id INNER JOIN observation_vital_sign ovs on dvs.observation_vital_sign_id=ovs.id
			INNER JOIN snomed s on ovs.snomed_id=s.id
			), medicacion as (
			SELECT dms.document_id, s.pt, s.sctid FROM document_medicamention_statement dms
			INNER JOIN medication_statement ms on dms.medication_statement_id=ms.id
			INNER JOIN medication_statement_status mss on ms.status_id=mss.id
			INNER JOIN snomed s on ms.snomed_id=s.id
			), motivos_list as(
			SELECT string_agg(rr.description, ', ') as descriptions, ocrr.outpatient_consultation_id FROM outpatient_consultation_reasons ocrr INNER JOIN reasons rr on ocrr.reason_id=rr.id group by outpatient_consultation_id
			)
			SELECT oc.id as id,
			concat(ins.name, ' (SISA: ', ins.sisa_code, ')') as institution,
			oc.created_on as attentionDate,
			concat(p.first_name, ' ', p.middle_names, ' ', p.last_name, ' ', p.other_last_names) as lender,
			p.identification_number as identificationLender,
			concat(pp.first_name, ' ', pp.middle_names , ' ', pp.last_name, ' ', pp.other_last_names) as patient,
			pp.identification_number as identificationPatient,
			s_hc.pt as problem,
			mo.descriptions as reasons,
			concat(sv_ps.value, '/',sv_pd.value) as glycosylatedHemoglobinBloodPressure,
			(SELECT string_agg(concat(med.pt, '(SNOMED:', med.sctid, ')'), ', ') FROM medicacion med WHERE med.document_id=d.id) as medication
			FROM outpatient_consultation oc
			LEFT JOIN institution ins ON oc.institution_id=ins.id
			LEFT JOIN motivos_list mo on mo.outpatient_consultation_id=oc.id
			LEFT JOIN healthcare_professional hp ON oc.doctor_id=hp.id
			INNER JOIN person p on hp.person_id=p.id
			INNER JOIN identification_type itp ON p.identification_type_id=itp.id
			LEFT JOIN patient pa on oc.patient_id=pa.id
			INNER JOIN person pp on pa.person_id=pp.id
			INNER JOIN identification_type itpp ON pp.identification_type_id=itpp.id
			INNER JOIN document d on oc.document_id=d.id
			INNER JOIN document_health_condition dhc on dhc.document_id=d.id INNER JOIN health_condition hc on dhc.health_condition_id=hc.id INNER JOIN snomed s_hc on hc.snomed_id=s_hc.id
			LEFT JOIN signos_vitales sv_ps on sv_ps.id_doc=oc.document_id and sv_ps.id=1
			LEFT JOIN signos_vitales sv_pd on sv_pd.id_doc=oc.document_id and sv_pd.id=2
			WHERE ins.id= :institutionId AND (s_hc.pt like '%hipertensión arterial%' or mo.descriptions like '%hipertensión%')
			AND oc.created_on BETWEEN :startDate AND :endDate <!-- oc.created_on>= timestamp with time zone '2022-01-02 00:00:00.000Z' -->
		</query>
	</named-native-query>

	<named-native-query name="GeneralReports.ComplementaryStudies" result-set-mapping="GeneralReports.ComplementaryStudiesResult">
		<query>
			SELECT concat(i.name, '(SISA: ', i.sisa_code, ' | CUIT: ', i.cuit, ')') AS institution,
			sr.request_date as date, sr_cat.description AS category,
			CASE
			WHEN dr_st.id='1' THEN 'Pendiente'
			WHEN dr_st.id='261782000' THEN 'Completado'
			WHEN dr_st.id='89925002' THEN 'Eliminado'
			ELSE 'Otro'
			END AS order,
			ri.description AS typeOfRequest,
			src.description AS origin,
			concat(pe_pat.last_name, ' ', pe_pat.other_last_names, ', ', pe_pat.first_name, ' ', pe_pat.middle_names) AS patientName, id_t.description AS documentTypePatient, pe_pat.identification_number AS documentNumberPatient,
			mc.name AS socialWork, pmc.affiliate_number AS affiliateNumber,
			concat(pe_hp.last_name, ' ', pe_hp.other_last_names, ', ', pe_hp.first_name, ' ', pe_hp.middle_names) AS professionalName, id_tt.description AS documentTypeProfessional, pe_hp.identification_number AS documentNumberProfessional,
			hp.license_number AS license, n.description AS note,
			d_r.effective_time AS dateOfIssue, concat(s_dr.pt, ' (SNOMED: ', s_dr.sctid, ' | CIE10: ', d_r.cie10_codes, ')') AS studyName, n_dr.description AS additionalNotes,
			concat(s_hc.pt, ' [Estado: ', hc_st.description, ', Verificación: ', hc_ver.description, ', Severidad:', hc_sev.display, ', Tipo: ', hc_t.description, '] (SNOMED: ', s_hc.sctid, ' | CIE10: ', hc.cie10_codes, ') Fecha: ', hc.start_date) AS associatedProblems
			FROM document d
			INNER JOIN service_request sr ON d.source_id=sr.id AND d.source_type_id=3 AND d.type_id=6
			INNER JOIN service_request_category sr_cat ON sr.category_id=sr_cat.id
			INNER JOIN service_request_status sr_st ON sr.status_id=sr_st.id
			INNER JOIN request_intent ri ON sr.intent_id=ri.id
			INNER JOIN source_type src ON sr.source_type_id=src.id
			INNER JOIN patient pa ON sr.patient_id=pa.id
			INNER JOIN person pe_pat ON pa.person_id=pe_pat.id
			INNER JOIN identification_type id_t ON pe_pat.identification_type_id=id_t.id
			LEFT JOIN patient_medical_coverage pmc ON sr.medical_coverage_id=pmc.id
			LEFT JOIN medical_coverage mc ON pmc.medical_coverage_id=mc.id
			LEFT JOIN health_insurance hi ON hi.id=mc.id
			INNER JOIN healthcare_professional hp ON sr.doctor_id=hp.id
			INNER JOIN person pe_hp ON pe_hp.id=hp.person_id
			INNER JOIN identification_type id_tt ON pe_hp.identification_type_id=id_tt.id
			INNER JOIN institution i ON sr.institution_id=i.id
			LEFT JOIN note n ON sr.note_id=n.id
			INNER JOIN (select * from document_diagnostic_report ddr_ WHERE ddr_.diagnostic_report_id IN (SELECT MAX(ddrr.diagnostic_report_id) FROM document_diagnostic_report ddrr GROUP BY ddrr.document_id)) ddr ON ddr.document_id=d.id
			INNER JOIN diagnostic_report d_r ON ddr.diagnostic_report_id=d_r.id
			INNER JOIN diagnostic_report_status dr_st ON d_r.status_id=dr_st.id
			INNER JOIN snomed s_dr ON d_r.snomed_id=s_dr.id
			LEFT JOIN note n_dr ON d_r.note_id=n_dr.id
			INNER JOIN health_condition hc ON d_r.health_condition_id=hc.id
			INNER JOIN condition_clinical_status hc_st ON hc.status_id=hc_st.id
			INNER JOIN condition_verification_status hc_ver ON hc.verification_status_id=hc_ver.id
			INNER JOIN problem_type hc_t ON hc.problem_id=hc_t.id
			INNER JOIN health_condition_severity hc_sev ON hc.severity=hc_sev.code
			INNER JOIN snomed s_hc ON hc.snomed_id=s_hc.id
			WHERE d.created_on BETWEEN :startDate AND :endDate
			AND i.id= :institutionId
			order by d.created_on;
		</query>
	</named-native-query>

	<named-native-query name="GeneralReports.OutPatientOlderAdults" result-set-mapping="GeneralReports.OutPatientOlderAdultsResult">
		<query>
			SELECT concat(ins.name, '(SISA: ', ins.sisa_code, ' | CUIT: ', ins.cuit, ')') AS institution,
			concat(p.first_name, ' ', p.middle_names, ' ', p.last_name, ' ', p.other_last_names) AS lender, p.identification_number AS lenderDni,
			oc.start_date AS attentionDate,
			CASE
			WHEN (EXTRACT(HOUR FROM oc.created_on)) &lt; 3 THEN
			concat(24-3, ':', EXTRACT(MINUTE FROM oc.created_on))
			ELSE concat(EXTRACT(HOUR FROM oc.created_on)-3, ':', EXTRACT(MINUTE FROM oc.created_on))
			END AS hour,
			(row_number() over(partition by oc.doctor_id order by oc.start_date)) AS consultationNumber,
			pp.identification_number as patientDni, concat(pp.first_name , ' ', pp.last_name) AS patientName, g.description AS gender, pp.birth_date birthDate,
			CASE
			WHEN (EXTRACT(MONTH FROM oc.start_date) - EXTRACT(MONTH FROM pp.birth_date)) &lt; 0 THEN
			concat((EXTRACT(YEAR FROM oc.start_date) - EXTRACT(YEAR FROM pp.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM oc.start_date) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			ELSE concat((EXTRACT(YEAR FROM oc.start_date) - EXTRACT(YEAR FROM pp.birth_date)), ' Años, ', (EXTRACT(MONTH FROM oc.start_date) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			END AS ageTurn,
			CASE
			WHEN (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)) &lt; 0 THEN
			concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pp.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			ELSE concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pp.birth_date)), ' Años, ', (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			END AS ageToday,
			(SELECT string_agg(concat(mc.name, '(RNOS: ', hi.rnos, ')'), ', ') FROM patient_medical_coverage pmc LEFT JOIN medical_coverage mc ON pmc.medical_coverage_id=mc.id LEFT JOIN health_insurance hi ON hi.id=mc.id WHERE pmc.patient_id=pa.id) AS medicalCoverage,
			concat(a.street, ' N° ', a.number, case WHEN a.floor is not null THEN concat(' Piso: ', a.floor, 'Departamento: ', a.apartment) end) AS address,
			c.description AS locationPatient,
			pe.phone_number AS phoneNumber,
			(SELECT string_agg(concat(s_prob.pt,' (',ccs.description,' &amp; ',cvs.description,' - Fecha: ',hc.start_date ,')', '[SNOMED: ', s_prob.sctid, ' | CIE10: ', hc.cie10_codes, ']'), ', ')
			from document_health_condition dhc INNER JOIN health_condition hc ON dhc.health_condition_id=hc.id INNER JOIN problem_type pt ON hc.problem_id=pt.id INNER JOIN snomed s_prob on hc.snomed_id=s_prob.id INNER JOIN condition_clinical_status ccs ON hc.status_id=ccs.id INNER JOIN condition_verification_status cvs ON hc.verification_status_id=cvs.id where dhc.document_id=d.id) AS problems
			from outpatient_consultation oc
			LEFT JOIN institution ins ON oc.institution_id=ins.id
			LEFT JOIN clinical_specialty cs ON oc.clinical_specialty_id=cs.id
			LEFT JOIN healthcare_professional hp ON oc.doctor_id=hp.id
			INNER JOIN person p ON hp.person_id=p.id
			LEFT JOIN patient pa ON oc.patient_id=pa.id
			INNER JOIN person pp ON pa.person_id=pp.id
			LEFT JOIN person_extended pe ON pe.person_id=pp.id
			INNER JOIN gender g ON pp.gender_id=g.id
			LEFT JOIN gender gg ON pe.gender_self_determination=gg.id
			LEFT JOIN patient_medical_coverage pmc ON pmc.patient_id=pa.id
			LEFT JOIN medical_coverage mc ON pmc.medical_coverage_id=mc.id
			LEFT JOIN address a ON pe.address_id=a.id
			LEFT JOIN city c ON a.city_id=c.id
			LEFT JOIN document d ON oc.document_id=d.id
			WHERE d.created_on BETWEEN :startDate AND :endDate
			AND EXTRACT(year FROM age(oc.start_date, pp.birth_date)) >= 60
			AND ins.id= :institutionId
			order by oc.created_on
		</query>
	</named-native-query>

	<named-native-query name="GeneralReports.HospitalizationOlderAdults" result-set-mapping="GeneralReports.HospitalizationOlderAdultsResult">
		<query>
			SELECT ins.name AS institution,
			concat(pe.last_name, ' ', pe.other_last_names) AS lastName, concat(pe.first_name, ' ', pe.middle_names) AS name, g.description AS gender,
			concat(i_t.description, ' ', pe.identification_number) AS identification, pe.birth_date birthDate,
			CASE
			WHEN (EXTRACT(MONTH FROM ie.entry_date) - EXTRACT(MONTH FROM pe.birth_date)) &lt; 0 THEN
			concat((EXTRACT(YEAR FROM ie.entry_date) - EXTRACT(YEAR FROM pe.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM ie.entry_date) - EXTRACT(MONTH FROM pe.birth_date)), ' Meses')
			ELSE concat((EXTRACT(YEAR FROM ie.entry_date) - EXTRACT(YEAR FROM pe.birth_date)), ' Años, ', (EXTRACT(MONTH FROM ie.entry_date) - EXTRACT(MONTH FROM pe.birth_date)), ' Meses')
			END AS ageTurn,
			CASE
			WHEN (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pe.birth_date)) &lt; 0 then
			concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pe.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pe.birth_date)), ' Meses')
			ELSE concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pe.birth_date)), ' Años, ', (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pe.birth_date)), ' Meses')
			END AS ageToday, pex.phone_number AS phone,
			ie.entry_date AS entrance, ie.probable_discharge_date AS probableEnablement,
			bed.bed_number AS bed, b_cat.description AS category, room.description AS room, sector.description AS sector, pd.administrative_discharge_date AS medicalClearance,
			(SELECT string_agg(concat(s_prob.pt,' (',ccs.description,' &amp; ',cvs.description,' - Fecha: ',hc.start_date ,')', '[SNOMED: ', s_prob.sctid, ' | CIE10: ', hc.cie10_codes, ']'), ', ')
			FROM document_health_condition dhc INNER JOIN health_condition hc ON dhc.health_condition_id=hc.id INNER JOIN problem_type pt ON hc.problem_id=pt.id INNER JOIN snomed s_prob ON hc.snomed_id=s_prob.id INNER JOIN condition_clinical_status ccs ON hc.status_id=ccs.id INNER JOIN condition_verification_status cvs ON hc.verification_status_id=cvs.id WHERE dhc.document_id=d.id) AS problem
			FROM internment_episode ie
			INNER JOIN institution ins ON ie.institution_id=ins.id
			LEFT JOIN patient_discharge pd ON ie.id = pd.internment_episode_id
			LEFT JOIN discharge_type dt ON pd.discharge_type_id = dt.id
			INNER JOIN patient pa ON ie.patient_id = pa.id
			INNER JOIN person pe ON pa.person_id = pe.id
			INNER JOIN identification_type i_t ON pe.identification_type_id=i_t.id
			INNER JOIN gender g ON pe.gender_id=g.id
			LEFT JOIN person_extended pex ON pex.person_id=pe.id
			LEFT JOIN bed ON ie.bed_id=bed.id
			LEFT JOIN room ON bed.room_id=room.id
			LEFT JOIN sector ON room.sector_id=sector.id
			LEFT JOIN bed_category b_cat ON bed.bed_category_id=b_cat.id
			LEFT JOIN document d ON ie.anamnesis_doc_id=d.id
			LEFT JOIN document dd ON ie.epicrisis_doc_id=dd.id
			WHERE (ie.status_id = 1 OR pd.internment_episode_id is null)
			AND d.created_on BETWEEN :startDate AND :endDate
			AND ins.id= :institutionId
			AND EXTRACT(year FROM age(ie.entry_date, pe.birth_date)) >= 60
		</query>
	</named-native-query>

	<!-- ========================================== -->
	<!-- ============== Nursing Reports =============== -->
	<!-- ========================================== -->

	<named-native-query name="NursingReports.HospitalizationNursing" result-set-mapping="NursingReports.HospitalizationNursingResult">
		<query>
			WITH signos_vitales AS(
			SELECT d.id AS id_doc, s.id, s.pt AS name, ovs.value AS value
			FROM document d INNER JOIN document_vital_sign dvs ON dvs.document_id=d.id INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id
			INNER JOIN snomed s ON ovs.snomed_id=s.id
			), procedimientos AS(
			SELECT dp.document_id AS document_id, s.pt AS pt, ps.description AS description, s.sctid AS sctid, proc.cie10_codes FROM document_procedure dp
			INNER JOIN procedures proc on dp.procedure_id=proc.id
			INNER JOIN procedures_status ps on proc.status_id=ps.id
			INNER JOIN snomed s on proc.snomed_id=s.id
			WHERE ps.description&lt;>'Ingresado por error' AND ps.description&lt;>'Desconocido'
			)
			SELECT ins.name AS institution, concat(pe.last_name, ' ', pe.other_last_names) AS lastName, concat(pe.first_name, ' ', pe.middle_names) AS completeName, g.description AS gender, concat(i_t.description, ' ', pe.identification_number) AS identification,
			concat(pe_pr.last_name, ' ', pe_pr.other_last_names, ', ', pe_pr.first_name, ' ', pe_pr.middle_names) AS professional, pr_s.license_number AS licenseNumber,
			ie.entry_date AS entryDate, ie.probable_discharge_date AS probableDischargeDate,
			bed.bed_number AS bed, b_cat.description AS categoryBed, room.description AS roomName, sector.description AS sector, pd.administrative_discharge_date AS dischargeDate,
			(SELECT string_agg(concat(pr.pt, ' (', pr.sctid, ')'), ' | ') FROM procedimientos pr WHERE pr.document_id=d.id) AS procedures,
			(SELECT string_agg(concat(sv.name, ': ', sv.value), ' | ') FROM signos_vitales sv WHERE sv.id_doc=d.id) AS vitalSign
			FROM internment_episode ie
			INNER JOIN institution ins ON ie.institution_id=ins.id
			LEFT JOIN patient_discharge pd ON ie.id = pd.internment_episode_id
			LEFT JOIN discharge_type dt ON pd.discharge_type_id = dt.id
			INNER JOIN patient pa ON ie.patient_id = pa.id
			INNER JOIN person pe ON pa.person_id = pe.id
			INNER JOIN identification_type i_t ON pe.identification_type_id=i_t.id
			INNER join gender g ON pe.gender_id=g.id
			LEFT JOIN bed ON ie.bed_id=bed.id
			LEFT JOIN room ON bed.room_id=room.id
			LEFT JOIN sector ON room.sector_id=sector.id
			LEFT JOIN bed_category b_cat ON bed.bed_category_id=b_cat.id
			LEFT JOIN document d ON ie.anamnesis_doc_id=d.id
			LEFT JOIN document dd ON ie.epicrisis_doc_id=dd.id
			INNER JOIN healthcare_professional_group hpg ON hpg.internment_episode_id=ie.id
			INNER JOIN healthcare_professional pr_s ON hpg.healthcare_professional_id=pr_s.id
			INNER JOIN person pe_pr ON pr_s.person_id=pe_pr.id
			INNER JOIN professional_professions pr_r ON pr_r.healthcare_professional_id=pr_s.id
			INNER JOIN professional_specialty spc ON pr_r.professional_specialty_id=spc.id
			WHERE (ie.status_id = 1 OR pd.internment_episode_id IS NULL) AND (spc.sctid_code='5275007' OR spc.sctid_code='308211001' OR spc.sctid_code='1951000221103')
			AND d.created_on BETWEEN :startDate AND :endDate
			AND ins.id= :institutionId
		</query>
	</named-native-query>

	<named-native-query name="NursingReports.OutpatientNursing" result-set-mapping="NursingReports.OutpatientNursingResult">
		<query>
			WITH signos_vitales AS(
			SELECT d.id AS id_doc, s.id, s.pt AS name, ovs.value AS value
			FROM document d INNER JOIN document_vital_sign dvs ON dvs.document_id=d.id INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id
			INNER JOIN snomed s ON ovs.snomed_id=s.id
			), procedimientos AS(
			SELECT dp.document_id AS document_id, s.pt AS pt, ps.description AS description, s.sctid AS sctid, proc.cie10_codes FROM document_procedure dp
			INNER JOIN procedures proc on dp.procedure_id=proc.id
			INNER JOIN procedures_status ps on proc.status_id=ps.id
			INNER JOIN snomed s on proc.snomed_id=s.id
			WHERE ps.description&lt;>'Ingresado por error' AND ps.description&lt;>'Desconocido'
			)
			SELECT concat(ins.name, '(SISA: ', ins.sisa_code, ' | CUIT: ', ins.cuit, ')') AS institution, cs.name AS operativeUnit,
			concat(p.first_name, ' ', p.middle_names, ' ', p.last_name, ' ', p.other_last_names) AS patientProvider, p.identification_number AS providerDni,
			oc.performed_date AS attentionDate,
			CASE
			WHEN (EXTRACT(HOUR FROM oc.created_on)) &lt; 3 THEN
			concat(24-3, ':', EXTRACT(MINUTE FROM oc.created_on))
			ELSE concat(EXTRACT(HOUR FROM oc.created_on)-3, ':', EXTRACT(MINUTE FROM oc.created_on))
			END AS hour,
			(row_number() over(partition by oc.doctor_id ORDER BY oc.performed_date)) AS consultationNumber,
			pp.identification_number AS patientDni, concat(pp.first_name , ' ', pp.last_name) AS patientName, g.description AS gender, gg.description AS selfPerceivedGender, pe.name_self_determination selfPerceivedName, pp.birth_date birthDate,
			CASE
			WHEN (EXTRACT(MONTH FROM oc.performed_date) - EXTRACT(MONTH FROM pp.birth_date)) &lt; 0 THEN
			concat((EXTRACT(YEAR FROM oc.performed_date) - EXTRACT(YEAR FROM pp.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM oc.performed_date) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			ELSE concat((EXTRACT(YEAR FROM oc.performed_date) - EXTRACT(YEAR FROM pp.birth_date)), ' Años, ', (EXTRACT(MONTH FROM oc.performed_date) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			END AS ageTurn,
			CASE
			WHEN (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)) &lt; 0 THEN
			concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pp.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			ELSE concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pp.birth_date)), ' Años, ', (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			END AS ageToday,
			et.pt ethnicity,
			(SELECT string_agg(concat(mc.name, '(RNOS: ', hi.rnos, ')'), ', ') FROM patient_medical_coverage pmc LEFT JOIN medical_coverage mc ON pmc.medical_coverage_id=mc.id LEFT JOIN health_insurance hi ON hi.id=mc.id WHERE pmc.patient_id=pa.id) AS medicalCoverage,
			concat(a.street, ' N° ', a.number, CASE WHEN a.floor IS NOT NULL THEN concat(' Piso: ', a.floor, 'Departamento: ', a.apartment) END) AS patientAddress,
			c.description AS patientLocation,
			ed.description AS educationLevel,
			lab.description AS occupation,
			(SELECT string_agg(concat(s_v.name, ':', s_v.value), ' | ') FROM signos_vitales s_v WHERE s_v.id_doc=d.id) AS vitalSign,
			(SELECT string_agg(concat(proc.pt, '(', proc.description, ' | SNOMED: ', proc.sctid, ' | CIE10: ', proc.cie10_codes, ')'), ', ') FROM procedimientos proc WHERE proc.document_id=d.id) AS procedures,
			(SELECT string_agg(ev.description, ', ') FROM note ev WHERE d.other_note_id=ev.id) AS evolution
			FROM nursing_consultation oc
			LEFT JOIN institution ins ON oc.institution_id=ins.id
			LEFT JOIN clinical_specialty cs ON oc.clinical_specialty_id=cs.id
			LEFT JOIN healthcare_professional hp ON oc.doctor_id=hp.id
			INNER JOIN person p ON hp.person_id=p.id
			LEFT JOIN patient pa ON oc.patient_id=pa.id
			INNER JOIN person pp ON pa.person_id=pp.id
			LEFT JOIN person_extended pe ON pe.person_id=pp.id
			LEFT JOIN ethnicity et ON pe.ethnicity_id=et.id
			LEFT JOIN education_level ed ON pe.education_level_id=ed.id
			LEFT JOIN occupation lab ON pe.occupation_id=lab.id
			INNER JOIN gender g ON pp.gender_id=g.id
			LEFT JOIN gender gg ON pe.gender_self_determination=gg.id
			LEFT JOIN patient_medical_coverage pmc ON pmc.patient_id=pa.id
			LEFT JOIN medical_coverage mc on pmc.medical_coverage_id=mc.id
			LEFT JOIN address a ON pe.address_id=a.id
			LEFT JOIN city c ON a.city_id=c.id
			LEFT JOIN document d ON (oc.created_by = d.created_by AND date_trunc('minute', oc.updated_on) = date_trunc('minute', d.created_on)) AND d.source_id=oc.id
			WHERE <!--((EXTRACT(MONTH FROM oc.created_on)=(EXTRACT(MONTH FROM CURRENT_TIMESTAMP)-1) AND EXTRACT(YEAR FROM oc.created_on)=EXTRACT(YEAR FROM CURRENT_TIMESTAMP)) OR (EXTRACT(MONTH FROM oc.created_on)=1 AND EXTRACT(YEAR FROM oc.created_on)=(EXTRACT(YEAR FROM CURRENT_TIMESTAMP)-1)))
			-->
			oc.created_on BETWEEN :startDate AND :endDate
			AND (pmc.id IS NOT NULL AND NOT (lower(mc.name) LIKE '%sumar%'))
			AND ins.id= :institutionId
		</query>
	</named-native-query>

	<named-native-query name="NursingReports.NursingEmergencies" result-set-mapping="NursingReports.NursingEmergenciesResult">
		<query>
			SELECT --ece.created_on, ins.id as institution_id,
			concat(ins.name, ' ', ins.sisa_code) AS institution,
			ece.ambulance_company_id AS ambulance,
			d_of.description AS office,
			css.description AS sector,
			CASE
			WHEN ece.has_police_intervention=true THEN
			concat('Sí')
			ELSE concat('No')
			END AS policeIntervention,
			concat(EXTRACT(DAY FROM ece.updated_on), '/', EXTRACT(MONTH FROM ece.updated_on), '/', EXTRACT(YEAR FROM ece.updated_on)) AS attentionDate,
			CASE
			WHEN (EXTRACT(HOUR FROM ece.updated_on)) &lt; 3 THEN
			concat(24-EXTRACT(HOUR FROM ece.updated_on), ':', EXTRACT(MINUTE FROM ece.updated_on))
			ELSE concat(EXTRACT(HOUR FROM ece.updated_on)-3, ':', EXTRACT(MINUTE FROM ece.updated_on))
			END AS attentionHour,
			concat(puc.last_name, ' ', puc.other_last_names, ', ', puc.first_name, ' ', puc.middle_names) AS professionalRegistering,
			concat(puu.last_name, ' ', puu.other_last_names, ', ', puu.first_name, ' ', puu.middle_names) AS professionalAttention,
			concat(it.description, ' ', pe.identification_number) AS identification,
			concat(pe.last_name, ' ', pe.other_last_names) AS lastName,
			concat(pe.first_name, ' ', pe.middle_names) AS names,
			g.description AS gender,
			gg.description AS selfPerceivedGender,
			pex.name_self_determination selfPerceivedName,
			pe.birth_date birthDate,
			CASE
			WHEN (EXTRACT(MONTH FROM ece.created_on) - EXTRACT(MONTH FROM pe.birth_date)) &lt; 0 THEN
			concat((EXTRACT(YEAR FROM ece.created_on) - EXTRACT(YEAR FROM pe.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM ece.created_on) - EXTRACT(MONTH FROM pe.birth_date)), ' Meses')
			ELSE concat((EXTRACT(YEAR FROM ece.created_on) - EXTRACT(YEAR FROM pe.birth_date)), ' Años, ', (EXTRACT(MONTH FROM ece.created_on) - EXTRACT(MONTH FROM pe.birth_date)), ' Meses')
			END AS ageTurn,
			case
			WHEN (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pe.birth_date)) &lt; 0 THEN
			concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pe.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pe.birth_date)), ' Meses')
			ELSE concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pe.birth_date)), ' Años, ', (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pe.birth_date)), ' Meses')
			END AS ageToday,
			et.pt ethnicity,
			concat(a.street, ' N° ', a.number, CASE WHEN a.floor IS NOT NULL THEN concat(' Piso: ', a.floor, 'Departamento: ', a.apartment) END) AS addressPatient,
			c.description AS locationPatient,
			concat(mc.name, '(', hi.rnos, ')', pmc.affiliate_number) AS medicalCoverage,
			ec_in_t.description AS emergencyCareEntrance,
			ec_st.description AS statePatient,
			ec_t.description AS attentionType,
			(SELECT string_agg(tr.notes, ', ') FROM triage tr WHERE tr.emergency_care_episode_id=ece.id) AS triageNote,
			concat(tr_cat.name, ' Codigo: ', tr_cat.color_name) as triageLevel,
			ec_dis.administrative_discharge_on dateDischarge, ec_dis.ambulance_company_id AS ambulanceDischarge,
			dis.description AS typeDischarge,
			dis_out.description AS patientExit
			FROM emergency_care_episode ece
			INNER JOIN institution ins ON ece.institution_id = ins.id
			INNER JOIN emergency_care_state ec_st ON ece.emergency_care_state_id = ec_st.id
			INNER JOIN patient pa ON ece.patient_id = pa.id
			INNER JOIN person pe ON pa.person_id = pe.id
			INNER JOIN identification_type it ON pe.identification_type_id=it.id
			LEFT JOIN person_extended pex ON pex.person_id=pe.id
			LEFT JOIN gender gg ON pex.gender_self_determination=gg.id
			LEFT JOIN ethnicity et ON pex.ethnicity_id=et.id
			LEFT JOIN education_level ed ON pex.education_level_id=ed.id
			LEFT JOIN occupation lab ON pex.occupation_id=lab.id
			LEFT JOIN address a ON pex.address_id=a.id
			LEFT JOIN city c ON a.city_id=c.id
			INNER JOIN gender g ON pe.gender_id=g.id
			LEFT JOIN patient_medical_coverage pmc ON ece.patient_medical_coverage_id=pmc.id
			LEFT JOIN medical_coverage mc ON pmc.medical_coverage_id=mc.id
			LEFT JOIN health_insurance hi ON hi.id=mc.id
			LEFT JOIN emergency_care_entrance_type ec_in_t ON ece.emergency_care_entrance_type_id = ec_in_t.id
			LEFT JOIN emergency_care_type ec_t ON ece.emergency_care_type_id = ec_t.id
			LEFT JOIN emergency_care_discharge ec_dis ON ece.id = ec_dis.emergency_care_episode_id
			LEFT JOIN discharge_type dis ON ec_dis.discharge_type_id = dis.id
			LEFT JOIN emergency_care_entrance_type dis_out ON ec_dis.hospital_transport_id=dis_out.id
			LEFT JOIN doctors_office d_of ON ece.doctors_office_id=d_of.id
			LEFT JOIN clinical_specialty_sector css ON d_of.sector_id=css.id
			LEFT JOIN triage_category tr_cat  ON ece.triage_category_id=tr_cat.id
			<!--LEFT JOIN document d ON d.source_id=ece.id AND d.source_type_id=4-->
			INNER JOIN users uc ON ece.created_by=uc.id
			INNER JOIN user_role ucr ON ucr.user_id=uc.id
			INNER JOIN ROLE rc ON ucr.role_id=rc.id
			INNER JOIN user_person uc_p ON uc_p.user_id=uc.id
			INNER JOIN person puc ON uc_p.person_id=puc.id
			INNER JOIN users uu ON ece.updated_by=uu.id
			INNER JOIN user_role uur ON uur.user_id=uu.id
			INNER JOIN ROLE ru ON uur.role_id=ru.id
			INNER JOIN user_person uu_p ON uu_p.user_id=uu.id
			INNER JOIN person puu ON uu_p.person_id=puu.id
			WHERE (rc.description like '%Enfermero%' OR ru.description LIKE '%Enfermero%')
			AND
			(ece.created_on >= date_trunc('hour', (NOW() + (INTERVAL '-24 hour')))
			AND ece.created_on &lt; date_trunc('hour', NOW()))
			AND ins.id = :institutionId
		</query>
	</named-native-query>

	<named-native-query name="NursingReports.TotalNursingRecovery" result-set-mapping="NursingReports.TotalNursingRecoveryResult">
		<query>
			WITH source AS (
			SELECT oc.id, oc.created_by, oc.created_on, oc.institution_id, oc.patient_id, 'Consulta Ambulatoria' AS origin, oc.document_id FROM outpatient_consultation oc
			UNION
			SELECT nc.id, nc.created_by, nc.created_on, nc.institution_id, nc.patient_id, 'Consulta de Enfermería' AS origin, dnc.id AS document_id FROM nursing_consultation nc LEFT JOIN document dnc ON nc.id=dnc.source_id AND dnc.source_type_id=7
			UNION
			SELECT ie.id, ie.created_by, ie.created_on, ie.institution_id, ie.patient_id, 'Internación' AS origin, ie.anamnesis_doc_id AS document_id FROM internment_episode ie
			UNION
			SELECT ece.id, ece.created_by, ece.created_on, ece.institution_id, ece.patient_id, 'Guardia' AS origin, dece.id FROM emergency_care_episode ece LEFT JOIN document dece ON ece.id=dece.source_id AND dece.source_type_id=4
			), source_details AS (
			SELECT DISTINCT s.*, up.person_id, hp.id AS healthcare_professional_id, hp.license_number
			FROM source s
			INNER JOIN user_person up ON s.created_by=up.user_id
			INNER JOIN healthcare_professional hp ON hp.person_id=up.person_id
			INNER JOIN professional_professions hpp ON hpp.healthcare_professional_id=hp.id
			INNER JOIN professional_specialty prs ON hpp.professional_specialty_id=prs.id
			INNER JOIN healthcare_professional_specialty hps ON hps.professional_profession_id=hpp.id
			INNER JOIN clinical_specialty cs ON cs.id=hps.clinical_specialty_id
			WHERE prs.sctid_code IN ('1951000221103', '308211001', '5275007')
			)

			SELECT DISTINCT concat(ins.name, '(SISA: ', ins.sisa_code, ' | CUIT: ', ins.cuit, ')') AS institution, oc.origin AS source,
			concat(p.first_name, ' ', p.middle_names, ' ', p.last_name, ' ', p.other_last_names) AS lender, p.identification_number AS lenderDni,
			oc.created_on AS attentionDate,
			CASE
			WHEN (EXTRACT(HOUR FROM oc.created_on)) &lt; 3 THEN
			concat(24-3, ':', EXTRACT(MINUTE FROM oc.created_on))
			ELSE concat(EXTRACT(HOUR FROM oc.created_on)-3, ':', EXTRACT(MINUTE FROM oc.created_on))
			END AS hour,
			pp.identification_number AS patientDni, concat(pp.first_name , ' ', pp.last_name) AS patientName, g.description AS gender, gg.description AS selfPerceivedGener, pe.name_self_determination selfPerceiverName, pp.birth_date birthday,
			CASE
			WHEN (EXTRACT(MONTH FROM oc.created_on) - EXTRACT(MONTH FROM pp.birth_date)) &lt; 0 THEN
			concat((EXTRACT(YEAR FROM oc.created_on) - EXTRACT(YEAR FROM pp.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM oc.created_on) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			ELSE concat((EXTRACT(YEAR FROM oc.created_on) - EXTRACT(YEAR FROM pp.birth_date)), ' Años, ', (EXTRACT(MONTH FROM oc.created_on) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			END AS ageTurn,
			CASE
			WHEN (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)) &lt; 0 THEN
			concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pp.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			ELSE concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pp.birth_date)), ' Años, ', (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			END AS ageToday,
			et.pt ethnicity,
			(SELECT string_agg(concat(mc.name, '(RNOS: ', hi.rnos, ')'), ', ') from patient_medical_coverage pmc LEFT JOIN medical_coverage mc ON pmc.medical_coverage_id=mc.id LEFT JOIN health_insurance hi on hi.id=mc.id WHERE pmc.patient_id=pa.id) as medicalCoverage,
			concat(a.street, ' N° ', a.number, CASE WHEN a.floor IS NOT NULL THEN concat(' Piso: ', a.floor, 'Departamento: ', a.apartment) END) AS address,
			c.description AS location,
			ed.description AS educationLevel,
			lab.description AS occupation,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=1) AS systolicBloodPressure,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=2) AS diastolicBloodPressure,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=3) AS meanArterialPressure,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=4) AS temperature,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=5) AS heartRate,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=6) AS respirationRate,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=7) AS oxygenSaturationHemoglobin,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=8) AS height,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=9) AS weight,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=10) AS bmi,
			(SELECT string_agg(concat(s_proc.pt, '(', ps.description, ' | SNOMED: ', s_proc.sctid, ' | CIE10: ', proc.cie10_codes, ')'), ', ') FROM document_procedure dp INNER JOIN procedures PROC ON dp.procedure_id=proc.id INNER JOIN procedures_status ps ON proc.status_id=ps.id INNER JOIN snomed s_proc ON proc.snomed_id=s_proc.id WHERE dp.document_id=d.id) AS procedures,
			(SELECT string_agg(concat(s_prob.pt,' (',ccs.description,' &amp; ',cvs.description,' - Fecha: ',hc.start_date ,')', '[SNOMED: ', s_prob.sctid, ' | CIE10: ', hc.cie10_codes, ']'), ', ')
			FROM document_health_condition dhc INNER JOIN health_condition hc ON dhc.health_condition_id=hc.id INNER JOIN problem_type pt ON hc.problem_id=pt.id INNER JOIN snomed s_prob ON hc.snomed_id=s_prob.id INNER JOIN condition_clinical_status ccs ON hc.status_id=ccs.id INNER JOIN condition_verification_status cvs ON hc.verification_status_id=cvs.id WHERE dhc.document_id=d.id) AS problems,
			(SELECT string_agg(concat(s_med.pt, '[SNOMED: ', s_med.sctid, ' | CIE10: ', ms.cie10_codes, '] (status: ', mss.description, ')'), ', ') FROM document_medicamention_statement dms INNER JOIN medication_statement ms ON dms.medication_statement_id=ms.id INNER JOIN medication_statement_status mss ON ms.status_id=mss.id INNER JOIN snomed s_med ON ms.snomed_id=s_med.id WHERE dms.document_id=d.id) AS medication,
			(SELECT string_agg(ev.description, ', ') FROM note ev WHERE d.other_note_id=ev.id) AS evolution
			FROM source_details oc
			LEFT JOIN institution ins ON oc.institution_id=ins.id
			INNER JOIN person p ON oc.person_id=p.id
			LEFT JOIN patient pa ON oc.patient_id=pa.id
			INNER JOIN person pp ON pa.person_id=pp.id
			LEFT JOIN person_extended pe ON pe.person_id=pp.id
			LEFT JOIN ethnicity et ON pe.ethnicity_id=et.id
			LEFT JOIN education_level ed ON pe.education_level_id=ed.id
			LEFT JOIN occupation lab ON pe.occupation_id=lab.id
			INNER JOIN gender g ON pp.gender_id=g.id
			LEFT JOIN gender gg ON pe.gender_self_determination=gg.id
			LEFT JOIN patient_medical_coverage pmc ON pmc.patient_id=pa.id
			LEFT JOIN medical_coverage mc ON pmc.medical_coverage_id=mc.id
			LEFT JOIN address a ON pe.address_id=a.id
			LEFT JOIN city c ON a.city_id=c.id
			LEFT JOIN document d ON oc.document_id=d.id
			WHERE oc.created_on BETWEEN :startDate AND :endDate
			AND (pmc.id IS NOT NULL AND NOT (lower(mc.name) LIKE '%sumar%')) AND ins.id=:institutionId
			ORDER BY oc.created_on;
		</query>
	</named-native-query>

	<!-- ========================================== -->
	<!-- ============== Odontology Reports =============== -->
	<!-- ========================================== -->

	<named-native-query name="OdontologyReports.ConsultationDetailReporteIPromocion" result-set-mapping="OdontologyReports.ConsultationDetailOdontologyResult">
		<query>
			with usuarios as(
			select distinct u.id, i.name from users u inner join user_role ur ON ur.user_id=u.id inner join institution i ON ur.institution_id=i.id
			WHERE i.id= :institutionId
			)
			select uss.name as institution,
			concat(p.last_name, ' ', p.other_last_names, ' ', p.first_name, ' ', p.middle_names) as professional,
			concat(s_p.pt, s_pp.pt) as procedures,
			count(d.id) as contador
			from document d
			left join document_odontology_procedure dop on dop.document_id=d.id
			left join odontology_procedure op on dop.odontology_procedure_id=op.id
			left join snomed s_p on op.snomed_id=s_p.id
			left join document_procedure dp on dp.document_id=d.id
			left join procedures pr on dp.procedure_id=pr.id
			left join snomed s_pp on pr.snomed_id=s_pp.id
			inner join users u on d.created_by=u.id
			inner join user_person up on up.user_id=u.id
			inner join person p on up.person_id=p.id
			inner join usuarios uss on uss.id=u.id
			where (s_p.sctid='58707002' OR s_p.sctid='399201000221106' OR s_p.pt like '%educación%'  OR s_p.sctid= '225223002' OR s_pp.sctid='311401005' )
			<!--AND ((EXTRACT(MONTH FROM d.created_on)=(EXTRACT(MONTH FROM CURRENT_TIMESTAMP)-1) AND EXTRACT(YEAR FROM d.created_on)=EXTRACT(YEAR FROM CURRENT_TIMESTAMP))
			OR (EXTRACT(YEAR FROM d.created_on)=(EXTRACT(YEAR FROM CURRENT_TIMESTAMP)-1) AND EXTRACT(MONTH FROM d.created_on)=12))-->
			AND d.created_on BETWEEN :startDate AND :endDate
			group by institution, professional, procedures
		</query>
	</named-native-query>

	<named-native-query name="OdontologyReports.ConsultationDetailReporteIIPrevencion" result-set-mapping="OdontologyReports.ConsultationDetailOdontologyResult">
		<query>
			with usuarios as(
			select distinct u.id, i.name from users u inner join user_role ur ON ur.user_id=u.id inner join institution i ON ur.institution_id=i.id
			WHERE i.id= :institutionId
			)
			select uss.name as institution,
			concat(p.last_name, ' ', p.other_last_names, ' ', p.first_name, ' ', p.middle_names) as professional,
			s_p.pt as procedures,
			count(d.id) as contador
			from document d
			left join document_odontology_procedure dop on dop.document_id=d.id
			left join odontology_procedure op on dop.odontology_procedure_id=op.id
			left join snomed s_p on op.snomed_id=s_p.id
			inner join users u on d.created_by=u.id
			inner join user_person up on up.user_id=u.id
			inner join person p on up.person_id=p.id
			inner join usuarios uss on uss.id=u.id
			where (s_p.sctid='399111000221101'
			OR s_p.sctid='234713009'
			OR s_p.sctid='399191000221108'
			OR s_p.sctid='313042009'
			OR s_p.sctid='234723000'
			OR s_p.sctid='398921000221100'
			OR s_p.sctid='4721000221105'
			OR s_p.sctid='32150000'
			OR s_p.sctid='398991000221103'
			OR s_p.sctid='399181000221105'
			OR s_p.sctid='399141000221102'
			OR s_p.sctid='285569006'
			OR s_p.sctid='241048009' OR s_p.sctid='241049001'  OR s_p.sctid='241050001'
			OR s_p.sctid='446463003'
			OR s_p.sctid='399311000221103'
			OR s_p.sctid='398901000221107'
			OR s_p.sctid='398751000221108' )
			<!--AND ((EXTRACT(MONTH FROM d.created_on)=(EXTRACT(MONTH FROM CURRENT_TIMESTAMP)-1) AND EXTRACT(YEAR FROM d.created_on)=EXTRACT(YEAR FROM CURRENT_TIMESTAMP))
			OR (EXTRACT(YEAR FROM d.created_on)=(EXTRACT(YEAR FROM CURRENT_TIMESTAMP)-1) AND EXTRACT(MONTH FROM d.created_on)=12))-->
			AND d.created_on BETWEEN :startDate AND :endDate
			group by institution, professional, procedures
		</query>
	</named-native-query>

	<named-native-query name="OdontologyReports.ConsultationDetailReporteIIIPrevencionGrupal" result-set-mapping="OdontologyReports.ConsultationDetailOdontologyResult">
		<query>
			with usuarios as(
			SELECT distinct u.id, i.name from users u INNER JOIN user_role ur ON ur.user_id=u.id INNER JOIN institution i ON ur.institution_id=i.id
			WHERE i.id= :institutionId
			)
			SELECT uss.name as institution,
			concat(p.last_name, ' ', p.other_last_names, ' ', p.first_name, ' ', p.middle_names) as professional,
			s_p.pt as procedures,
			count(d.id) as contador
			from document d
			LEFT JOIN document_odontology_procedure dop on dop.document_id=d.id
			LEFT JOIN odontology_procedure op on dop.odontology_procedure_id=op.id
			LEFT JOIN snomed s_p on op.snomed_id=s_p.id
			INNER JOIN users u on d.created_by=u.id
			INNER JOIN user_person up on up.user_id=u.id
			INNER JOIN person p on up.person_id=p.id
			INNER JOIN usuarios uss on uss.id=u.id
			WHERE (s_p.pt like '%fluoración%' OR s_p.sctid='399141000221102' OR s_p.sctid='399111000221101')
			<!--AND ((EXTRACT(MONTH FROM d.created_on)=(EXTRACT(MONTH FROM CURRENT_TIMESTAMP)-1) AND EXTRACT(YEAR FROM d.created_on)=EXTRACT(YEAR FROM CURRENT_TIMESTAMP))
			OR (EXTRACT(YEAR FROM d.created_on)=(EXTRACT(YEAR FROM CURRENT_TIMESTAMP)-1) AND EXTRACT(MONTH FROM d.created_on)=12))-->
			AND d.created_on BETWEEN :startDate AND :endDate
			group by institution, professional, procedures
		</query>
	</named-native-query>
	
	<named-native-query name="OdontologyReports.ConsultationDetailReporteIVOperatoria" result-set-mapping="OdontologyReports.ConsultationDetailOdontologyResult">
		<query>
			WITH usuarios as(
			SELECT distinct u.id, i.name FROM users u INNER JOIN user_role ur ON ur.user_id=u.id INNER JOIN institution i ON ur.institution_id=i.id
			WHERE i.id= :institutionId
			)
			SELECT uss.name as institution,
			concat(p.last_name, ' ', p.other_last_names, ' ', p.first_name, ' ', p.middle_names) as professional,
			s_p.pt as procedures,
			count(d.id) as contador
			FROM document d
			LEFT JOIN document_odontology_procedure dop on dop.document_id=d.id
			LEFT JOIN odontology_procedure op on dop.odontology_procedure_id=op.id
			LEFT JOIN snomed s_p on op.snomed_id=s_p.id
			INNER JOIN users u on d.created_by=u.id
			INNER JOIN user_person up on up.user_id=u.id
			INNER JOIN person p on up.person_id=p.id
			INNER JOIN usuarios uss on uss.id=u.id
			WHERE (s_p.sctid='399041000221101' OR s_p.sctid='399031000221108' OR s_p.sctid='399081000221109' OR s_p.sctid='399071000221106' OR s_p.sctid='399051000221104' OR s_p.sctid='399061000221102'
			OR s_p.sctid='399131000221109' OR s_p.sctid='3443008' OR s_p.sctid='80764003' OR s_p.sctid='57673005' OR s_p.sctid='305301009' OR s_p.sctid='398891000221108' OR s_p.sctid='398961000221108')
			<!--AND ((EXTRACT(MONTH from d.created_on)=(EXTRACT(MONTH from CURRENT_TIMESTAMP)-1) AND EXTRACT(YEAR from d.created_on)=EXTRACT(YEAR from CURRENT_TIMESTAMP))
			OR (EXTRACT(YEAR from d.created_on)=(EXTRACT(YEAR from CURRENT_TIMESTAMP)-1) AND EXTRACT(MONTH from d.created_on)=12))-->
			AND d.created_on BETWEEN :startDate AND :endDate
			group by institution, professional, procedures
		</query>
	</named-native-query>
	
	<named-native-query name="OdontologyReports.ConsultationDetailReporteVEndodoncia" result-set-mapping="OdontologyReports.ConsultationDetailOdontologyResult">
		<query>
			WITH usuarios as(
			SELECT distinct u.id, i.name FROM users u INNER JOIN user_role ur ON ur.user_id=u.id INNER JOIN institution i ON ur.institution_id=i.id
			WHERE i.id= :institutionId
			)
			SELECT uss.name as institution,
			concat(p.last_name, ' ', p.other_last_names, ' ', p.first_name, ' ', p.middle_names) as professional,
			s_p.pt as procedures,
			count(d.id) as contador
			FROM document d
			LEFT JOIN document_odontology_procedure dop on dop.document_id=d.id
			LEFT JOIN odontology_procedure op on dop.odontology_procedure_id=op.id
			LEFT JOIN snomed s_p on op.snomed_id=s_p.id
			INNER JOIN users u on d.created_by=u.id
			INNER JOIN user_person up on up.user_id=u.id
			INNER JOIN person p on up.person_id=p.id
			INNER JOIN usuarios uss on uss.id=u.id
			where (s_p.sctid='399011000221100'
			OR s_p.sctid='399001000221103'
			OR s_p.sctid='234734002'
			OR s_p.sctid='234709002'
			OR s_p.sctid='398941000221109'
			OR s_p.sctid='398821000221106')
			<!--AND ((EXTRACT(MONTH FROM d.created_on)=(EXTRACT(MONTH FROM CURRENT_TIMESTAMP)-1) AND EXTRACT(YEAR FROM d.created_on)=EXTRACT(YEAR FROM CURRENT_TIMESTAMP))
			OR (EXTRACT(YEAR FROM d.created_on)=(EXTRACT(YEAR FROM CURRENT_TIMESTAMP)-1) AND EXTRACT(MONTH FROM d.created_on)=12))-->
			AND d.created_on BETWEEN :startDate AND :endDate
			group by institution, professional, procedures
		</query>
	</named-native-query>


    <!-- ========================================== -->
    <!-- ============== Appointment =============== -->
    <!-- ========================================== -->

    <named-native-query name="Appointment.medicalCoverage">
        <query>select ap.patient_medical_coverage_id
            from appointment ap
            join appointment_assn apassn on (ap.id = apassn.appointment_id)
            join diary d on (apassn.diary_id = d.id)
			left join diary_associated_professional dap on (dap.diary_id = d.id)
			where ap.patient_id = :patientId and
			ap.date_type_id = :currentDate and
			ap.patient_medical_coverage_id is not null and
            (ap.appointment_state_id = :confirmedAppointmentState or
			ap.appointment_state_id = :assignedAppointmentState ) and
            (d.healthcare_professional_id = :professionalId or
			dap.healthcare_professional_id = :professionalId)
            order by hour asc
            limit 1
        </query>
    </named-native-query>


    <!-- ========================================== -->
    <!-- ============== Results-mapping =============== -->
    <!-- ========================================== -->

    <sql-result-set-mapping name="HCE.findAllMedicationsResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.MedicationVo">
            <column name="id" class="java.lang.Integer"/>
            <column name="sctidCode" class="java.lang.String"/>
            <column name="sctidTerm" class="java.lang.String"/>
            <column name="status" class="java.lang.String"/>
            <column name="sequence" class="java.lang.Integer"/>
            <column name="count" class="java.lang.Integer"/>
            <column name="duration" class="java.lang.Double"/>
            <column name="duration_unit" class="java.lang.String"/>
            <column name="frequency" class="java.lang.Integer"/>
            <column name="period_unit" class="java.lang.String"/>
            <column name="effectiveTime" class="java.sql.Date"/>
            <column name="end_date" class="java.sql.Date"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.getDocumentReferenceResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.BundleVo">
            <column name="id" class="java.lang.Integer"/>
            <column name="first_name" class="java.lang.String"/>
            <column name="middle_names" class="java.lang.String"/>
            <column name="last_name" class="java.lang.String"/>
            <column name="hasDocuments" class="java.lang.Boolean"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.getPatientResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.PatientVo">
            <column name="first_name" class="java.lang.String"/>
            <column name="middle_names" class="java.lang.String"/>
            <column name="last_name" class="java.lang.String"/>
            <column name="other_last_names" class="java.lang.String"/>
            <column name="mothers_last_name" class="java.lang.String"/>
            <column name="identification_number" class="java.lang.String"/>
            <column name="gender_id" class="java.lang.Short"/>
            <column name="birth_date" class="java.lang.String"/>
            <column name="phone_number" class="java.lang.String"/>
            <column name="address_id" class="java.lang.Integer"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.findAllConditionResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.ConditionVo">
            <column name="id" class="java.lang.Integer"/>
            <column name="code" class="java.lang.String"/>
            <column name="term" class="java.lang.String"/>
            <column name="clinical_status" class="java.lang.String"/>
            <column name="verification_status_id" class="java.lang.String"/>
            <column name="start_date" class="java.sql.Date"/>
            <column name="severity" class="java.lang.String"/>
            <column name="created_on" class="java.sql.Date"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.findAllImmunizationsResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.ImmunizationVo">
            <column name="id" class="java.lang.Integer"/>
            <column name="code" class="java.lang.String"/>
            <column name="term" class="java.lang.String"/>
            <column name="status_id" class="java.lang.String"/>
            <column name="administration_date" class="java.sql.Date"/>
            <column name="created_on" class="java.sql.Date"/>
            <column name="expiration_date" class="java.sql.Date"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.findAllAllergiesResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.AllergyIntoleranceVo">
            <column name="id" class="java.lang.Integer"/>
            <column name="code" class="java.lang.String"/>
            <column name="term" class="java.lang.String"/>
            <column name="status_id" class="java.lang.String"/>
            <column name="verification_status_id" class="java.lang.String"/>
            <column name="category_id" class="java.lang.Short"/>
            <column name="criticality" class="java.lang.Short"/>
            <column name="start_date" class="java.sql.Date"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.getOrganizationResult" >
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.OrganizationVo">
            <column name="sisa_code" class="java.lang.String"/>
            <column name="name" class="java.lang.String"/>
            <column name="phone_number" class="java.lang.String"/>
            <column name="address_id" class="java.lang.Integer"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="Reports.OutpatientSummaryResult">
        <constructor-result target-class="net.pladema.reports.repository.ConsultationSummary">
            <column name="professional_id" class="java.lang.Integer"/>
            <column name="specialty_id" class="java.lang.Integer"/>
            <column name="specialty" class="java.lang.String"/>
            <column name="specialtyType" class="java.lang.Short"/>
            <column name="age" class="java.lang.Integer"/>
            <column name="gender_id" class="java.lang.Short"/>
            <column name="OS" class="java.lang.Boolean"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="Reports.ConsultationDetailResult">
        <constructor-result target-class="net.pladema.reports.repository.ConsultationDetail">
            <column name="province" class="java.lang.String"/>
            <column name="department" class="java.lang.String"/>
            <column name="sisaCode" class="java.lang.String"/>
            <column name="institution" class="java.lang.String"/>
            <column name="patientSurname" class="java.lang.String"/>
            <column name="patientFirstName" class="java.lang.String"/>
			<column name="selfPerceivedName" class="java.lang.String"/>
            <column name="identificationType" class="java.lang.String"/>
            <column name="identificationNumber" class="java.lang.String"/>
            <column name="birthDate" class="java.lang.String"/>
            <column name="gender" class="java.lang.String"/>
            <column name="address" class="java.lang.String"/>
            <column name="phoneNumber" class="java.lang.String"/>
            <column name="email" class="java.lang.String"/>
            <column name="coverageName" class="java.lang.String"/>
            <column name="affiliateNumber" class="java.lang.String"/>
            <column name="startDate" class="java.lang.String"/>
            <column name="clinicalSpecialtyId" class="java.lang.Integer"/>
            <column name="clinicalSpecialty" class="java.lang.String"/>
            <column name="professionalId" class="java.lang.Integer"/>
            <column name="professionalName" class="java.lang.String"/>
            <column name="reasons" class="java.lang.String"/>
            <column name="problems" class="java.lang.String"/>
			<column name="procedures" class="java.lang.String"/>
            <column name="weight" class="java.lang.String"/>
            <column name="height" class="java.lang.String"/>
            <column name="systolicBloodPressure" class="java.lang.String"/>
            <column name="diastolicBloodPressure" class="java.lang.String"/>
			<column name="cardiovascularRisk" class="java.lang.String"/>
			<column name="glycosylatedHemoglobin" class="java.lang.String"/>
			<column name="bloodGlucose" class="java.lang.String"/>
			<column name="headCircunference" class="java.lang.String"/>
			<column name="cpo" class="java.lang.String"/>
			<column name="ceo" class="java.lang.String"/>
        </constructor-result>
    </sql-result-set-mapping>
	<sql-result-set-mapping name="ProgramReports.ConsultationDetailEpiIResult">
		<constructor-result target-class="net.pladema.programreports.repository.ConsultationDetailEpiI">
			<column name="patientFullName" class="java.lang.String"/>
			<column name="coding" class="java.lang.String"/>
			<column name="birthDate" class="java.lang.String"/>
			<column name="gender" class="java.lang.String"/>
			<column name="startDate" class="java.lang.String"/>
			<column name="department" class="java.lang.String"/>
			<column name="address" class="java.lang.String"/>
			<column name="cie10Codes" class="java.lang.String"/>
			<column name="identificationNumber" class="java.lang.String"/>
			<column name="problems" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="ProgramReports.ConsultationDetailEpiIIResult">
		<constructor-result target-class="net.pladema.programreports.repository.ConsultationDetailEpiII">
			<column name="diagnostic" class="java.lang.String"/>
			<column name="rango" class="java.lang.String"/>
			<column name="contador" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="ProgramReports.ConsultationDetailRecuperoResult">
		<constructor-result target-class="net.pladema.programreports.repository.ConsultationDetailRecupero">
			<column name="institution" class="java.lang.String"/>
			<column name="clinicalSpecialty" class="java.lang.String"/>
			<column name="provider" class="java.lang.String"/>
			<column name="providerDni" class="java.lang.String"/>
			<column name="attentionDate" class="java.lang.String"/>
			<column name="hour" class="java.lang.String"/>
			<column name="consultationNumber" class="java.lang.String"/>
			<column name="patientDni" class="java.lang.String"/>
			<column name="patientName" class="java.lang.String"/>
			<column name="gender" class="java.lang.String"/>
			<column name="birthDate" class="java.lang.String"/>
			<column name="ageTurn" class="java.lang.String"/>
			<column name="ageToday" class="java.lang.String"/>
			<column name="medicalCoverage" class="java.lang.String"/>
			<column name="address" class="java.lang.String"/>
			<column name="location" class="java.lang.String"/>
			<column name="bmi" class="java.lang.String"/>
			<column name="reasons" class="java.lang.String"/>
			<column name="procedures" class="java.lang.String"/>
			<column name="problems" class="java.lang.String"/>
			<column name="medication" class="java.lang.String"/>
			<column name="evolution" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="ProgramReports.ConsultationDetailSumarResult">
		<constructor-result target-class="net.pladema.programreports.repository.ConsultationDetailRecupero">
			<column name="institution" class="java.lang.String"/>
			<column name="clinicalSpecialtyId" class="java.lang.Integer"/>
			<column name="clinicalSpecialty" class="java.lang.String"/>
			<column name="professionalId" class="java.lang.Integer"/>
			<column name="provider" class="java.lang.String"/>
			<column name="providerDni" class="java.lang.String"/>
			<column name="attentionDate" class="java.lang.String"/>
			<column name="hour" class="java.lang.String"/>
			<column name="consultationNumber" class="java.lang.String"/>
			<column name="patientDni" class="java.lang.String"/>
			<column name="patientName" class="java.lang.String"/>
			<column name="gender" class="java.lang.String"/>
			<column name="selfPerceivedGender" class="java.lang.String"/>
			<column name="selfPerceivedName" class="java.lang.String"/>
			<column name="birthDate" class="java.lang.String"/>
			<column name="ageTurn" class="java.lang.String"/>
			<column name="ageToday" class="java.lang.String"/>
			<column name="ethnicity" class="java.lang.String"/>
			<column name="medicalCoverage" class="java.lang.String"/>
			<column name="address" class="java.lang.String"/>
			<column name="location" class="java.lang.String"/>
			<column name="educationLevel" class="java.lang.String"/>
			<column name="occupation" class="java.lang.String"/>
			<column name="systolicBloodPressure" class="java.lang.String"/>
			<column name="diastolicBloodPressure" class="java.lang.String"/>
			<column name="meanArterialPressure" class="java.lang.String"/>
			<column name="temperature" class="java.lang.String"/>
			<column name="heartRate" class="java.lang.String"/>
			<column name="respirationRate" class="java.lang.String"/>
			<column name="oxygenSaturationHemoglobin" class="java.lang.String"/>
			<column name="height" class="java.lang.String"/>
			<column name="weight" class="java.lang.String"/>
			<column name="bmi" class="java.lang.String"/>
			<column name="headCircunference" class="java.lang.String"/>
			<column name="reasons" class="java.lang.String"/>
			<column name="procedures" class="java.lang.String"/>
			<column name="problems" class="java.lang.String"/>
			<column name="medication" class="java.lang.String"/>
			<column name="evolution" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="ProgramReports.ConsultationDetailOdontologiaResult">
		<constructor-result target-class="net.pladema.programreports.repository.ConsultationDetailOdontologia">
			<column name="institution" class="java.lang.String"/>
			<column name="operativeUnit" class="java.lang.String"/>
			<column name="provider" class="java.lang.String"/>
			<column name="providerDni" class="java.lang.String"/>
			<column name="attentionDate" class="java.lang.String"/>
			<column name="consultationNumber" class="java.lang.String"/>
			<column name="patientDni" class="java.lang.String"/>
			<column name="patientName" class="java.lang.String"/>
			<column name="gender" class="java.lang.String"/>
			<column name="selfPerceivedGender" class="java.lang.String"/>
			<column name="selfPerceivedName" class="java.lang.String"/>
			<column name="birthDate" class="java.lang.String"/>
			<column name="ageTurn" class="java.lang.String"/>
			<column name="ageToday" class="java.lang.String"/>
			<column name="ethnicity" class="java.lang.String"/>
			<column name="medicalCoverage" class="java.lang.String"/>
			<column name="indexCpo" class="java.lang.String"/>
			<column name="indexCeo" class="java.lang.String"/>
			<column name="permanentTeethPresent" class="java.lang.String"/>
			<column name="temporaryTeethPresent" class="java.lang.String"/>
			<column name="address" class="java.lang.String"/>
			<column name="location" class="java.lang.String"/>
			<column name="educationLevel" class="java.lang.String"/>
			<column name="occupation" class="java.lang.String"/>
			<column name="reasons" class="java.lang.String"/>
			<column name="procedures" class="java.lang.String"/>
			<column name="problems" class="java.lang.String"/>
			<column name="medication" class="java.lang.String"/>
			<column name="evolution" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="GeneralReports.ConsultationDetailEmergenciasResult">
		<constructor-result target-class="net.pladema.generalreports.repository.ConsultationDetailEmergencias">
			<column name="createdOn" class="java.lang.String"/>
			<column name="institutionId" class="java.lang.String"/>
			<column name="institution" class="java.lang.String"/>
			<column name="ambulance" class="java.lang.String"/>
			<column name="office" class="java.lang.String"/>
			<column name="sector" class="java.lang.String"/>
			<column name="policeIntervention" class="java.lang.String"/>
			<column name="attentionDate" class="java.lang.String"/>
			<column name="attentionHour" class="java.lang.String"/>
			<column name="identification" class="java.lang.String"/>
			<column name="lastName" class="java.lang.String"/>
			<column name="names" class="java.lang.String"/>
			<column name="medicalCoverage" class="java.lang.String"/>
			<column name="emergencyCareEntrance" class="java.lang.String"/>
			<column name="situation" class="java.lang.String"/>
			<column name="emergencyCareType" class="java.lang.String"/>
			<column name="triageNote" class="java.lang.String"/>
			<column name="triageLevel" class="java.lang.String"/>
			<column name="dateDischarge" class="java.lang.String"/>
			<column name="ambulanceDischarge" class="java.lang.String"/>
			<column name="typeDischarge" class="java.lang.String"/>
			<column name="patientExit" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="GeneralReports.ConsultationDetailDiabeticosResult">
		<constructor-result target-class="net.pladema.generalreports.repository.ConsultationDetailDiabeticosHipertensos">
			<column name="id" class="java.lang.String"/>
			<column name="institution" class="java.lang.String"/>
			<column name="attentionDate" class="java.lang.String"/>
			<column name="lender" class="java.lang.String"/>
			<column name="identificationLender" class="java.lang.String"/>
			<column name="patient" class="java.lang.String"/>
			<column name="identificationPatient" class="java.lang.String"/>
			<column name="problem" class="java.lang.String"/>
			<column name="reasons" class="java.lang.String"/>
			<column name="glycosylatedHemoglobinBloodPressure" class="java.lang.String"/>
			<column name="medication" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="GeneralReports.ConsultationDetailHipertensosResult">
		<constructor-result target-class="net.pladema.generalreports.repository.ConsultationDetailDiabeticosHipertensos">
			<column name="id" class="java.lang.String"/>
			<column name="institution" class="java.lang.String"/>
			<column name="attentionDate" class="java.lang.String"/>
			<column name="lender" class="java.lang.String"/>
			<column name="identificationLender" class="java.lang.String"/>
			<column name="patient" class="java.lang.String"/>
			<column name="identificationPatient" class="java.lang.String"/>
			<column name="problem" class="java.lang.String"/>
			<column name="reasons" class="java.lang.String"/>
			<column name="glycosylatedHemoglobinBloodPressure" class="java.lang.String"/>
			<column name="medication" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="OdontologyReports.ConsultationDetailOdontologyResult">
		<constructor-result target-class="net.pladema.odontologyreport.repository.ConsultationDetailOdontology">
			<column name="institution" class="java.lang.String"/>
			<column name="professional" class="java.lang.String"/>
			<column name="procedures" class="java.lang.String"/>
			<column name="contador" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="GeneralReports.ComplementaryStudiesResult">
		<constructor-result target-class="net.pladema.generalreports.repository.ComplementaryStudies">
			<column name="institution" class="java.lang.String"/>
			<column name="date" class="java.lang.String"/>
			<column name="category" class="java.lang.String"/>
			<column name="order" class="java.lang.String"/>
			<column name="typeOfRequest" class="java.lang.String"/>
			<column name="origin" class="java.lang.String"/>
			<column name="patientName" class="java.lang.String"/>
			<column name="documentTypePatient" class="java.lang.String"/>
			<column name="documentNumberPatient" class="java.lang.String"/>
			<column name="socialWork" class="java.lang.String"/>
			<column name="affiliateNumber" class="java.lang.String"/>
			<column name="professionalName" class="java.lang.String"/>
			<column name="documentTypeProfessional" class="java.lang.String"/>
			<column name="documentNumberProfessional" class="java.lang.String"/>
			<column name="license" class="java.lang.String"/>
			<column name="note" class="java.lang.String"/>
			<column name="dateOfIssue" class="java.lang.String"/>
			<column name="studyName" class="java.lang.String"/>
			<column name="additionalNotes" class="java.lang.String"/>
			<column name="associatedProblems" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="GeneralReports.OutPatientOlderAdultsResult">
		<constructor-result target-class="net.pladema.generalreports.repository.OutPatientOlderAdults">
			<column name="institution" class="java.lang.String"/>
			<column name="lender" class="java.lang.String"/>
			<column name="lenderDni" class="java.lang.String"/>
			<column name="attentionDate" class="java.lang.String"/>
			<column name="hour" class="java.lang.String"/>
			<column name="consultationNumber" class="java.lang.String"/>
			<column name="patientDni" class="java.lang.String"/>
			<column name="patientName" class="java.lang.String"/>
			<column name="gender" class="java.lang.String"/>
			<column name="birthDate" class="java.lang.String"/>
			<column name="ageTurn" class="java.lang.String"/>
			<column name="ageToday" class="java.lang.String"/>
			<column name="medicalCoverage" class="java.lang.String"/>
			<column name="address" class="java.lang.String"/>
			<column name="locationPatient" class="java.lang.String"/>
			<column name="phoneNumber" class="java.lang.String" />
			<column name="problems" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>

	<sql-result-set-mapping name="GeneralReports.HospitalizationOlderAdultsResult">
		<constructor-result target-class="net.pladema.generalreports.repository.HospitalizationOlderAdults">
			<column name="institution" class="java.lang.String"/>
			<column name="lastName" class="java.lang.String"/>
			<column name="name" class="java.lang.String"/>
			<column name="gender" class="java.lang.String"/>
			<column name="identification" class="java.lang.String"/>
			<column name="birthDate" class="java.lang.String"/>
			<column name="ageTurn" class="java.lang.String"/>
			<column name="ageToday" class="java.lang.String"/>
			<column name="phone" class="java.lang.String"/>
			<column name="entrance" class="java.lang.String"/>
			<column name="probableEnablement" class="java.lang.String"/>
			<column name="bed" class="java.lang.String"/>
			<column name="category" class="java.lang.String"/>
			<column name="room" class="java.lang.String"/>
			<column name="sector" class="java.lang.String"/>
			<column name="medicalClearance" class="java.lang.String"/>
			<column name="problem" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="NursingReports.HospitalizationNursingResult">
		<constructor-result target-class="net.pladema.nursingreports.repository.HospitalizationNursing">
			<column name="institution" class="java.lang.String"/>
			<column name="lastName" class="java.lang.String"/>
			<column name="completeName" class="java.lang.String"/>
			<column name="gender" class="java.lang.String"/>
			<column name="identification" class="java.lang.String"/>
			<column name="professional" class="java.lang.String"/>
			<column name="licenseNumber" class="java.lang.String"/>
			<column name="bed" class="java.lang.String"/>
			<column name="categoryBed" class="java.lang.String"/>
			<column name="roomName" class="java.lang.String"/>
			<column name="sector" class="java.lang.String"/>
			<column name="dischargeDate" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="NursingReports.OutpatientNursingResult">
		<constructor-result target-class="net.pladema.nursingreports.repository.OutpatientNursing">
			<column name="institution" class="java.lang.String"/>
			<column name="operativeUnit" class="java.lang.String"/>
			<column name="patientProvider" class="java.lang.String"/>
			<column name="providerDni" class="java.lang.String"/>
			<column name="attentionDate" class="java.lang.String"/>
			<column name="hour" class="java.lang.String"/>
			<column name="consultationNumber" class="java.lang.String"/>
			<column name="patientDni" class="java.lang.String"/>
			<column name="patientName" class="java.lang.String"/>
			<column name="gender" class="java.lang.String"/>
			<column name="selfPerceivedGender" class="java.lang.String"/>
			<column name="selfPerceivedName" class="java.lang.String"/>
			<column name="birthDate" class="java.lang.String"/>
			<column name="ageTurn" class="java.lang.String"/>
			<column name="ageToday" class="java.lang.String"/>
			<column name="ethnicity" class="java.lang.String"/>
			<column name="medicalCoverage" class="java.lang.String"/>
			<column name="patientAddress" class="java.lang.String"/>
			<column name="patientLocation" class="java.lang.String"/>
			<column name="educationLevel" class="java.lang.String"/>
			<column name="occupation" class="java.lang.String"/>
			<column name="vitalSign" class="java.lang.String"/>
			<column name="procedures" class="java.lang.String"/>
			<column name="evolution" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="NursingReports.NursingEmergenciesResult">
		<constructor-result target-class="net.pladema.nursingreports.repository.NursingEmergencies">
			<column name="institution" class="java.lang.String"/>
			<column name="ambulance" class="java.lang.String"/>
			<column name="office" class="java.lang.String"/>
			<column name="sector" class="java.lang.String"/>
			<column name="policeIntervention" class="java.lang.String"/>
			<column name="attentionDate" class="java.lang.String"/>
			<column name="attentionHour" class="java.lang.String"/>
			<column name="professionalRegistering" class="java.lang.String"/>
			<column name="professionalAttention" class="java.lang.String"/>
			<column name="identification" class="java.lang.String"/>
			<column name="lastName" class="java.lang.String"/>
			<column name="names" class="java.lang.String"/>
			<column name="gender" class="java.lang.String"/>
			<column name="selfPerceivedGender" class="java.lang.String"/>
			<column name="selfPerceivedName" class="java.lang.String"/>
			<column name="birthDate" class="java.lang.String"/>
			<column name="ageTurn" class="java.lang.String"/>
			<column name="ageToday" class="java.lang.String"/>
			<column name="ethnicity" class="java.lang.String"/>
			<column name="addressPatient" class="java.lang.String"/>
			<column name="locationPatient" class="java.lang.String"/>
			<column name="medicalCoverage" class="java.lang.String"/>
			<column name="emergencyCareEntrance" class="java.lang.String"/>
			<column name="statePatient" class="java.lang.String"/>
			<column name="attentionType" class="java.lang.String"/>
			<column name="triageNote" class="java.lang.String"/>
			<column name="triageLevel" class="java.lang.String"/>
			<column name="dateDischarge" class="java.lang.String"/>
			<column name="ambulanceDischarge" class="java.lang.String"/>
			<column name="typeDischarge" class="java.lang.String"/>
			<column name="patientExit" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="NursingReports.TotalNursingRecoveryResult">
		<constructor-result target-class="net.pladema.nursingreports.repository.TotalNursingRecovery">
			<column name="institution" class="java.lang.String"/>
			<column name="source" class="java.lang.String"/>
			<column name="lender" class="java.lang.String"/>
			<column name="lenderDni" class="java.lang.String"/>
			<column name="attentionDate" class="java.lang.String"/>
			<column name="hour" class="java.lang.String"/>
			<column name="patientDni" class="java.lang.String"/>
			<column name="patientName" class="java.lang.String"/>
			<column name="gender" class="java.lang.String"/>
			<column name="selfPerceivedGener" class="java.lang.String"/>
			<column name="selfPerceiverName" class="java.lang.String"/>
			<column name="birthday" class="java.lang.String"/>
			<column name="ageTurn" class="java.lang.String"/>
			<column name="ageToday" class="java.lang.String"/>
			<column name="ethnicity" class="java.lang.String"/>
			<column name="medicalCoverage" class="java.lang.String"/>
			<column name="address" class="java.lang.String"/>
			<column name="location" class="java.lang.String"/>
			<column name="educationLevel" class="java.lang.String"/>
			<column name="occupation" class="java.lang.String"/>
			<column name="systolicBloodPressure" class="java.lang.String"/>
			<column name="diastolicBloodPressure" class="java.lang.String"/>
			<column name="meanArterialPressure" class="java.lang.String"/>
			<column name="temperature" class="java.lang.String"/>
			<column name="heartRate" class="java.lang.String"/>
			<column name="respirationRate" class="java.lang.String"/>
			<column name="oxygenSaturationHemoglobin" class="java.lang.String"/>
			<column name="height" class="java.lang.String"/>
			<column name="weight" class="java.lang.String"/>
			<column name="bmi" class="java.lang.String"/>
			<column name="procedures" class="java.lang.String"/>
			<column name="problems" class="java.lang.String"/>
			<column name="medication" class="java.lang.String"/>
			<column name="evolution" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
</entity-mappings>