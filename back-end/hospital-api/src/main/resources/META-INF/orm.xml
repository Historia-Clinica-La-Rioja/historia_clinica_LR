<entity-mappings
        version="2.1" xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm
    http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd">

    <!-- JPA Named Native Queries -->

    <!-- ========================================== -->
    <!-- ====== Historia clínica electrónica ====== -->
    <!-- ========================================== -->

    <named-native-query name="HCE.findAllMedications" result-set-mapping="HCE.findAllMedicationsResult">
        <query>with temporal as (
            SELECT DISTINCT
            ms.id as medicationStatementId, ms.snomed_id, ms.status_id, ms.created_on, ms.updated_on,
            dsg.*,
            row_number() OVER (PARTITION by ms.snomed_id ORDER BY ms.updated_on desc) AS rw
            FROM document d
            JOIN document_medicamention_statement dms ON d.id = dms.document_id
            JOIN medication_statement ms ON dms.medication_statement_id = ms.id
            LEFT JOIN dosage dsg ON ms.dosage_id = dsg.id
            WHERE ms.patient_id = :patientId
            AND d.type_id IN :documentTypeId
            AND d.status_id = :documentStatusId
            )
            SELECT  t.medicationStatementId AS id , s.sctid AS sctidCode, s.pt AS sctidTerm, status_id AS status,
            t.sequence, t.count, t.duration, t.duration_unit, t.frequency, t.period_unit,
            coalesce(t.start_date, t.created_on) as effectiveTime, t.end_date
            FROM temporal t
            JOIN snomed s ON t.snomed_id = s.id
            WHERE rw = 1 AND status_id = :statusId
            ORDER BY t.updated_on
        </query>
    </named-native-query>

    <named-native-query name="HCE.getDocumentReference" result-set-mapping="HCE.getDocumentReferenceResult">
        <query>
            select pat.id, first_name, middle_names, last_name, bool_and(op.id is not null) as hasDocuments
            from patient pat
            join person per on ( pat.person_id = per.id )
            left join outpatient_consultation op on ( pat.id = op.patient_id )
            where pat.id = :patientId
            group by pat.id, first_name, middle_names, last_name
        </query>
    </named-native-query>

    <named-native-query name="HCE.getPatient" result-set-mapping="HCE.getPatientResult">
        <query>
            select p.first_name, p.middle_names, p.last_name, p.other_last_names, pe.mothers_last_name,
            p.identification_number, p.gender_id, p.birth_date, pe.phone_number, pe.address_id
            from patient pat
            join person p on ( pat.person_id = p.id )
            left join person_extended pe on ( p.id = pe.person_id )
            where pat.id = :patientId
        </query>
    </named-native-query>

    <named-native-query name="HCE.getAddress">
        <query>
            select a.street, a.number, a.floor, a.apartment, a.postcode,
            ci.description as city, p.description as province, co.description as country
            from address a
            left join city ci on ( a.city_id = ci.id )
            left join department d on ( ci.department_id = d.id )
            left join province p on ( d.province_id = p.id )
            left join country co on ( p.country_id = co.id )
            where a.id = :addressId
        </query>
    </named-native-query>

    <named-native-query name="HCE.findAllCondition" result-set-mapping="HCE.findAllConditionResult">
        <query>
            WITH t AS(
            SELECT hc.id, snomed_id, hc.status_id, verification_status_id, start_date, severity,
            hc.created_on, hc.updated_on,
            row_number() over (partition by snomed_id order by hc.updated_on desc) as rw
            FROM document d
            JOIN document_health_condition dhc on d.id = dhc.document_id
            JOIN health_condition hc on dhc.health_condition_id = hc.id
            WHERE d.status_id = :docStatusId
            AND d.type_id = :documentTypeId
            AND hc.patient_id = :patientId
            AND hc.problem_id IN :diagnosisId
            )
            SELECT t.id as id, s.sctid as code, s.pt as term, t.status_id as clinical_status,
            t.verification_status_id, t.start_date, t.severity, t.created_on
            FROM t
            JOIN snomed s ON snomed_id = s.id
            WHERE rw = 1
            AND NOT verification_status_id = :statusId
        </query>
    </named-native-query>

    <named-native-query name="HCE.findAllImmunizations" result-set-mapping="HCE.findAllImmunizationsResult">
        <query>
            WITH t AS (
            SELECT inm.id, snomed_id, inm.status_id, administration_date, expiration_date, inm.created_on, inm.updated_on,
            row_number() over (partition by snomed_id, administration_date order by inm.updated_on desc) as rw
            FROM document d
            JOIN document_inmunization di on d.id = di.document_id
            JOIN inmunization inm on di.inmunization_id = inm.id
            WHERE d.status_id = :docStatusId
            AND d.type_id IN :documentTypeId
            AND inm.patient_id = :patientId
            )
            SELECT t.id as id, s.sctid as code, s.pt as term, status_id, administration_date, created_on, expiration_date
            FROM t
            JOIN snomed s ON t.snomed_id = s.id
            WHERE rw = 1 AND NOT status_id = :statusId
            ORDER BY t.updated_on DESC
        </query>
    </named-native-query>

    <named-native-query name="HCE.findAllAllergies" result-set-mapping="HCE.findAllAllergiesResult">
        <query>
            with temporal as (
            SELECT DISTINCT ai.id, ai.snomed_id, ai.status_id, ai.verification_status_id,
            ai.category_id, ai.criticality, ai.start_date, ai.updated_on,
            row_number() over (partition by ai.snomed_id order by ai.updated_on desc) as rw
            FROM document d
            JOIN document_allergy_intolerance dai ON d.id = dai.document_id
            JOIN allergy_intolerance ai ON dai.allergy_intolerance_id = ai.id
            WHERE d.type_id = :documentTypeId
            AND d.status_id = :documentStatusId
            AND ai.patient_id = :patientId
            )
            SELECT t.id AS id, s.sctid AS code, s.pt as term, t.status_id, t.verification_status_id,
            t.category_id, t.criticality, t.start_date
            FROM temporal t
            JOIN snomed s ON t.snomed_id = s.id
            WHERE rw = 1 AND NOT status_id = :allergyIntoleranceStatus
            ORDER BY t.updated_on desc
        </query>
    </named-native-query>

    <named-native-query name="HCE.getOrganization" result-set-mapping="HCE.getOrganizationResult">
        <query>
            select distinct sisa_code, name, phone_number, address_id
            from institution i
            where id = (
            select distinct institution_id
            from (
            select institution_id from internment_episode ie where patient_id = :patientId
            union
            select institution_id from outpatient_consultation oc where patient_id = :patientId
            ) as subquery
            limit 1)
        </query>
    </named-native-query>

    <!-- ========================================== -->
    <!-- ================ Reports ================= -->
    <!-- ========================================== -->

    <named-native-query name="Reports.ConsultationSummary" result-set-mapping="Reports.OutpatientSummaryResult">
        <query>SELECT oc.doctor_id as professional_id,
            cs.id as specialty_id, cs."name" as specialty, cs.clinical_specialty_type_id as specialtyType,
            extract(year from (age(oc.start_date, per.birth_date))) as "age", per.gender_id,
            CASE WHEN oc.patient_medical_coverage_id is null THEN false ELSE true END as "OS"
            FROM outpatient_consultation oc
            LEFT JOIN clinical_specialty cs on (oc.clinical_specialty_id = cs.id)
            JOIN patient pat on (oc.patient_id = pat.id)
            JOIN person per on (pat.person_id = per.id)
            WHERE oc.institution_id = :institutionId
            AND oc.start_date between :from and :to
            AND oc.billable
            UNION ALL
            SELECT vc.doctor_id as professional_id,
            cs.id as specialty_id, cs."name" as specialty, cs.clinical_specialty_type_id as specialtyType,
            extract(year from (age(vc.performed_date, per.birth_date))) as "age", per.gender_id,
            CASE WHEN vc.patient_medical_coverage_id is null THEN false ELSE true END as "OS"
            FROM vaccine_consultation vc
            LEFT JOIN clinical_specialty cs on (vc.clinical_specialty_id = cs.id)
            JOIN patient pat on (vc.patient_id = pat.id)
            JOIN person per on (pat.person_id = per.id)
            WHERE vc.institution_id = :institutionId
            AND vc.performed_date between :from and :to
            AND vc.billable
        </query>
    </named-native-query>

	<named-native-query name="Reports.OdontologyConsultationSummary" result-set-mapping="Reports.OutpatientSummaryResult">
		<query>SELECT oc.doctor_id as professional_id,
			cs.id as specialty_id, cs."name" as specialty, cs.clinical_specialty_type_id as specialtyType,
			extract(year from (age(oc.created_on, per.birth_date))) as "age", per.gender_id,
			CASE WHEN oc.patient_medical_coverage_id is null THEN false ELSE true END as "OS"
			FROM odontology_consultation oc
			LEFT JOIN clinical_specialty cs on (oc.clinical_specialty_id = cs.id)
			JOIN patient pat on (oc.patient_id = pat.id)
			JOIN person per on (pat.person_id = per.id)
			WHERE oc.institution_id = :institutionId
			AND oc.created_on between :from and :to
			AND oc.billable
		</query>
	</named-native-query>

	<named-native-query name="Reports.NursingConsultationSummary" result-set-mapping="Reports.OutpatientSummaryResult">
		<query>
			SELECT nc.doctor_id as professional_id,
			cs.id as specialty_id, cs."name" as specialty, cs.clinical_specialty_type_id as specialtyType,
			extract(year from (age(nc.created_on, per.birth_date))) as "age", per.gender_id,
			CASE WHEN nc.patient_medical_coverage_id is null THEN false ELSE true END as "OS"
			FROM nursing_consultation nc
			LEFT JOIN clinical_specialty cs on (nc.clinical_specialty_id = cs.id)
			JOIN patient pat on (nc.patient_id = pat.id)
			JOIN person per on (pat.person_id = per.id)
			WHERE nc.institution_id = :institutionId
			AND nc.created_on between :from and :to
		</query>
	</named-native-query>

    <named-native-query name="Reports.ConsultationDetail" result-set-mapping="Reports.ConsultationDetailResult">
        <query>
			WITH consultation AS (SELECT oc.patient_id, oc.patient_medical_coverage_id, oc.clinical_specialty_id,
			oc.doctor_id, oc.start_date as start_date, reasons.description as reasons,
			problems.description as problems, proced.description as procedures,
			MAX(CASE WHEN ovs.loinc_code='8480-6' THEN ovs.value END) as systolicBloodPressure,
			MAX(CASE WHEN ovs.loinc_code='8462-4' THEN ovs.value END) as diastolicBloodPressure,
			MAX(CASE WHEN ovs.loinc_code='8302-2' THEN ovs.value END) as height,
			MAX(CASE WHEN ovs.loinc_code='29463-7' THEN ovs.value END) as weight,
			MAX(CASE WHEN ovs.loinc_code='65853-4' THEN ovs.value END) as cardiovascularRisk,
			MAX(CASE WHEN ovs.loinc_code='62854-5' THEN ovs.value END) as glycosylatedHemoglobin,
			MAX(CASE WHEN ovs.loinc_code='15074-8' THEN ovs.value END) as bloodGlucose,
			MAX(CASE WHEN ovs.loinc_code='11947-9' THEN ovs.value END) as headCircunference,
			'outpatient' as consultation_type
			FROM outpatient_consultation oc
			LEFT JOIN (
			SELECT ocr.outpatient_consultation_id AS oc_id , STRING_AGG(r.description, ', ') AS description
			FROM outpatient_consultation_reasons ocr
			JOIN reasons r ON (r.id = ocr.reason_id)
			GROUP BY ocr.outpatient_consultation_id
			) reasons ON (reasons.oc_id = oc.id)
			LEFT JOIN (
			SELECT dhc.document_id AS document_id,  STRING_AGG(s.pt, ', ') AS description
			FROM document_health_condition dhc
			JOIN health_condition hc ON (hc.id = dhc.health_condition_id AND hc.problem_id != '57177007' )
			JOIN snomed s ON (s.id = hc.snomed_id)
			GROUP BY dhc.document_id
			) problems ON (problems.document_id = oc.document_id)
			LEFT JOIN (
			SELECT dp.document_id AS document_id,  STRING_AGG(s.pt, ', ') AS description
			FROM document_procedure dp
			JOIN "procedures" p ON (p.id = dp.procedure_id)
			JOIN snomed s ON (s.id = p.snomed_id)
			GROUP BY dp.document_id
			) proced ON (proced.document_id = oc.document_id)
			LEFT JOIN document_vital_sign dvs ON (dvs.document_id = oc.document_id)
			LEFT JOIN observation_vital_sign ovs ON (dvs.observation_vital_sign_id = ovs.id)
			WHERE oc.institution_id = :institutionId
			AND oc.billable = true
			AND oc.start_date BETWEEN :startDate AND :endDate
			GROUP BY oc.id, oc.patient_id , oc.patient_medical_coverage_id , oc.clinical_specialty_id , oc.doctor_id, oc.doctor_id, reasons.description, problems.description, proced.description
			UNION ALL
			SELECT  vc.patient_id, vc.patient_medical_coverage_id, vc.clinical_specialty_id,
			vc.doctor_id, vc.performed_date as start_date, NULL AS reasons,  NULL AS problems, NULL as procedures,
			NULL AS weight, NULL AS height, NULL AS systolicBloodPressure, NULL AS diastolicBloodPressure,
			NULL as cardiovascularRisk, NULL as glycosylatedHemoglobin, NULL as bloodGlucose, NULL as headCircunference,
			'vaccine' as consultation_type
			FROM vaccine_consultation vc
			WHERE vc.institution_id = :institutionId
			AND vc.billable = true
			AND vc.performed_date BETWEEN :startDate AND :endDate
			)
			SELECT CONCAT(pe.last_name, ' ', pe.other_last_names) as patientSurname,
			CONCAT(pe.first_name, ' ', pe.middle_names) as patientFirstName,
			px.name_self_determination as selfPerceivedName,
			it.description as identificationType, pe.identification_number as identificationNumber,
			to_char(pe.birth_date,'DD/MM/YYYY') as birthDate,  g.description as gender,
			CONCAT(a2.street, ' ', a2.number, ' ', a2.floor, ' ', a2.apartment, ' ', c2.description) as address,
			px.phone_number as phoneNumber, px.email as email,
			mc."name" as coverageName, pmc.affiliate_number as affiliateNumber,
			to_char(cst.start_date,'DD/MM/YYYY') as startDate,
			cs.id as clinicalSpecialtyId, cs.name as clinicalSpecialty,
			hp.id as professionalId,
			CONCAT(p2.last_name, ' ', p2.other_last_names, ' ',p2.first_name, ' ', p2.middle_names) as professionalName,
			cst.reasons as reasons,  cst.problems, cst.procedures,
			cst.weight, cst.height, cst.systolicBloodPressure, cst.diastolicBloodPressure,
			cst.cardiovascularRisk, cst.glycosylatedHemoglobin, cst.bloodGlucose, cst.headCircunference, null as cpo, null as ceo
			FROM consultation cst
			JOIN patient pa ON (cst.patient_id = pa.id)
			JOIN person pe ON (pa.person_id = pe.id)
			LEFT JOIN identification_type it ON (pe.identification_type_id = it.id)
			LEFT JOIN person_extended px ON (px.person_id = pe.id)
			LEFT JOIN self_perceived_gender g ON (px.gender_self_determination = g.id)
			LEFT JOIN address a2 ON (px.address_id = a2.id)
			LEFT JOIN city c2 ON (a2.city_id = c2.id)
			LEFT JOIN patient_medical_coverage pmc on pmc.id = cst.patient_medical_coverage_id
			LEFT JOIN medical_coverage mc on pmc.medical_coverage_id = mc.id
			LEFT JOIN clinical_specialty cs ON (cst.clinical_specialty_id = cs.id)
			JOIN healthcare_professional hp ON (cst.doctor_id = hp.id)
			JOIN person p2 ON (hp.person_id = p2.id)
		</query>
    </named-native-query>

	<named-native-query name="Reports.OdontologyConsultationDetail" result-set-mapping="Reports.ConsultationDetailResult">
		<query>
			WITH consultation AS (
			SELECT oc.patient_id, oc.patient_medical_coverage_id, oc.clinical_specialty_id,
			oc.doctor_id, oc.created_on as start_date, reasons.description as reasons,  concat_ws('/split/', other_problems.description, diagnostics.description) as problems,
			concat_ws('/split/', procedures.description, odontology_procedures.description) as procedures,
			null as weight, null as height, null as systolicBloodPressure, null as diastolicBloodPressure,
			null as cardiovascularRisk, null as glycosylatedHemoglobin, null as bloodGlucose, null as headCircunference, concat_ws('-', oci.permanent_c, oci.permanent_p, oci.permanent_o) as cpo,  concat_ws('-', oci.temporary_c, oci.temporary_e, oci.temporary_o) as ceo,
			'odontology' as consultation_type
			FROM odontology_consultation oc
			LEFT JOIN (
			SELECT ocr.odontology_consultation_id AS oc_id , STRING_AGG(r.description, ', ') AS description
			FROM odontology_consultation_reason ocr
			JOIN odontology_reason r ON (r.id = ocr.reason_id)
			GROUP BY ocr.odontology_consultation_id
			) reasons ON (reasons.oc_id = oc.id)
			JOIN document d ON (oc.id = d.source_id and d.source_type_id = 6)
			LEFT JOIN (
			SELECT dhc.document_id AS document_id,  STRING_AGG(s.pt, ', ') AS description
			FROM document_health_condition dhc
			JOIN health_condition hc ON (hc.id = dhc.health_condition_id)
			JOIN snomed s ON (s.id = hc.snomed_id)
			GROUP BY dhc.document_id
			) other_problems ON (other_problems.document_id = d.id)
			LEFT JOIN (
			SELECT dod.document_id AS document_id,  STRING_AGG(s.pt, ', ') AS description
			FROM document_odontology_diagnostic dod
			JOIN odontology_diagnostic od ON (od.id = dod.odontology_diagnostic_id)
			JOIN snomed s ON (s.id = od.snomed_id)
			GROUP BY dod.document_id
			) diagnostics ON (diagnostics.document_id = d.id)
			LEFT JOIN (
			SELECT dp.document_id AS document_id,  STRING_AGG(s.pt, ', ') AS description
			FROM document_procedure dp
			JOIN "procedures" p ON (p.id = dp.procedure_id)
			JOIN snomed s ON (s.id = p.snomed_id)
			GROUP BY dp.document_id
			) procedures ON (procedures.document_id = d.id)
			LEFT JOIN (
			SELECT dop.document_id AS document_id,  STRING_AGG(s.pt, ', ') AS description
			FROM document_odontology_procedure dop
			JOIN odontology_procedure op ON (op.id = dop.odontology_procedure_id)
			JOIN snomed s ON (s.id = op.snomed_id)
			GROUP BY dop.document_id
			) odontology_procedures ON (odontology_procedures.document_id = d.id)
			LEFT JOIN odontology_consultation_indices oci ON (oc.id = oci.odontology_consultation_id)
			WHERE oc.institution_id = :institutionId
			AND oc.billable = true
			AND oc.created_on BETWEEN :startDate AND :endDate
			GROUP BY oc.id, oc.patient_id, oc.patient_medical_coverage_id , oc.clinical_specialty_id, oc.doctor_id, oci.permanent_c, oci.permanent_p, oci.permanent_o, oci.temporary_c, oci.temporary_e, oci.temporary_o, reasons.description, other_problems.description, diagnostics.description, procedures.description, odontology_procedures.description
			)
			SELECT CONCAT(pe.last_name, ' ', pe.other_last_names) as patientSurname,
			CONCAT(pe.first_name, ' ', pe.middle_names) as patientFirstName,
			px.name_self_determination as selfPerceivedName,
			it.description as identificationType, pe.identification_number as identificationNumber,
			to_char(pe.birth_date,'DD/MM/YYYY') as birthDate,  g.description as gender,
			CONCAT(a2.street, ' ', a2.number, ' ', a2.floor, ' ', a2.apartment, ' ', c2.description) as address,
			px.phone_number as phoneNumber, px.email as email,
			mc."name" as coverageName, pmc.affiliate_number as affiliateNumber,
			to_char(cst.start_date,'DD/MM/YYYY') as startDate,
			cs.id as clinicalSpecialtyId, cs.name as clinicalSpecialty,
			hp.id as professionalId,
			CONCAT(p2.last_name, ' ', p2.other_last_names, ' ',p2.first_name, ' ', p2.middle_names) as professionalName,
			cst.reasons as reasons,  cst.problems, cst.procedures,
			cst.weight, cst.height, cst.systolicBloodPressure, cst.diastolicBloodPressure,
			cst.cardiovascularRisk, cst.glycosylatedHemoglobin, cst.bloodGlucose, cst.headCircunference, cst.cpo, cst.ceo
			FROM consultation cst
			JOIN patient pa ON (cst.patient_id = pa.id)
			JOIN person pe ON (pa.person_id = pe.id)
			LEFT JOIN identification_type it ON (pe.identification_type_id = it.id)
			LEFT JOIN person_extended px ON (px.person_id = pe.id)
			LEFT JOIN self_perceived_gender g ON (px.gender_self_determination = g.id)
			LEFT JOIN address a2 ON (px.address_id = a2.id)
			LEFT JOIN city c2 ON (a2.city_id = c2.id)
			LEFT JOIN patient_medical_coverage pmc ON (pmc.id = cst.patient_medical_coverage_id)
			LEFT JOIN medical_coverage mc on (mc.id = pmc.medical_coverage_id)
			LEFT JOIN clinical_specialty cs ON (cst.clinical_specialty_id = cs.id)
			JOIN healthcare_professional hp ON (cst.doctor_id = hp.id)
			JOIN person p2 ON (hp.person_id = p2.id)
		</query>
	</named-native-query>

	<named-native-query name="Reports.NursingConsultationDetail" result-set-mapping="Reports.ConsultationDetailResult">
		<query>
			WITH consultation AS (
			SELECT oc.patient_id, oc.patient_medical_coverage_id, oc.clinical_specialty_id,
			oc.doctor_id, oc.created_on as start_date, null as reasons,  problems.description as problems, proced.description as procedures,
			MAX(CASE WHEN ovs.loinc_code='29463-7' THEN ovs.value END) as weight,
			MAX(CASE WHEN ovs.loinc_code='8302-2' THEN ovs.value END) as height,
			MAX(CASE WHEN ovs.loinc_code='8480-6' THEN ovs.value END) as systolicBloodPressure,
			MAX(CASE WHEN ovs.loinc_code='8462-4' THEN ovs.value END) as diastolicBloodPressure,
			MAX(CASE WHEN ovs.loinc_code='65853-4' THEN ovs.value END) as cardiovascularRisk,
			MAX(CASE WHEN ovs.loinc_code='62854-5' THEN ovs.value END)  as glycosylatedHemoglobin,
			MAX(CASE WHEN ovs.loinc_code='15074-8' THEN ovs.value END) as bloodGlucose,
			MAX(CASE WHEN ovs.loinc_code='11947-9' THEN ovs.value END) as headCircunference,
			'nursing' as consultation_type
			FROM nursing_consultation oc
			JOIN document d ON (d.source_id = oc.id and d.source_type_id = 7)
			LEFT JOIN (
			SELECT dhc.document_id,  STRING_AGG(s.pt, ', ') as description
			FROM document_health_condition dhc
			JOIN health_condition hc ON (hc.id = dhc.health_condition_id)
			JOIN snomed s ON (s.id = hc.snomed_id)
			GROUP BY dhc.document_id
			) AS problems on (problems.document_id = d.id)
			LEFT JOIN (
			SELECT dp.document_id,  STRING_AGG(s.pt, ', ') as description
			FROM document_procedure dp
			JOIN "procedures" p ON (p.id = dp.procedure_id)
			JOIN snomed s ON (s.id = p.snomed_id)
			GROUP BY dp.document_id
			) AS proced on (proced.document_id = d.id)
			LEFT JOIN document_vital_sign dvs ON (dvs.document_id = d.id)
			LEFT JOIN observation_vital_sign ovs ON (ovs.id = dvs.observation_vital_sign_id)
			WHERE oc.institution_id = :institutionId
			AND oc.created_on BETWEEN :startDate AND :endDate
			GROUP BY oc.id, problems.description, proced.description
			)
			SELECT CONCAT(pe.last_name, ' ', pe.other_last_names) as patientSurname,
			CONCAT(pe.first_name, ' ', pe.middle_names) as patientFirstName,
			px.name_self_determination as selfPerceivedName,
			it.description as identificationType, pe.identification_number as identificationNumber,
			to_char(pe.birth_date,'DD/MM/YYYY') as birthDate,  g.description as gender,
			CONCAT(a2.street, ' ', a2.number, ' ', a2.floor, ' ', a2.apartment, ' ', c2.description) as address,
			px.phone_number as phoneNumber, px.email as email,
			mc."name" as coverageName, pmc.affiliate_number as affiliateNumber,
			to_char(cst.start_date,'DD/MM/YYYY') as startDate,
			cs.id as clinicalSpecialtyId, cs.name as clinicalSpecialty,
			hp.id as professionalId,
			CONCAT(p2.last_name, ' ', p2.other_last_names, ' ',p2.first_name, ' ', p2.middle_names) as professionalName,
			cst.reasons as reasons,  cst.problems, cst.procedures,
			cst.weight, cst.height, cst.systolicBloodPressure, cst.diastolicBloodPressure,
			cst.cardiovascularRisk, cst.glycosylatedHemoglobin, cst.bloodGlucose, cst.headCircunference, null as cpo, null as ceo
			FROM consultation cst
			JOIN patient pa ON (cst.patient_id = pa.id)
			JOIN person pe ON (pa.person_id = pe.id)
			LEFT JOIN identification_type it ON (pe.identification_type_id = it.id)
			LEFT JOIN person_extended px ON (px.person_id = pe.id)
			LEFT JOIN self_perceived_gender g ON (px.gender_self_determination = g.id)
			LEFT JOIN address a2 ON (px.address_id = a2.id)
			LEFT JOIN city c2 ON (a2.city_id = c2.id)
			LEFT JOIN patient_medical_coverage pmc on (pmc.id = cst.patient_medical_coverage_id)
			LEFT JOIN medical_coverage mc ON (mc.id = pmc.medical_coverage_id)
			LEFT JOIN clinical_specialty cs ON (cs.id = cst.clinical_specialty_id)
			JOIN healthcare_professional hp ON (cst.doctor_id = hp.id)
			JOIN person p2 ON (hp.person_id = p2.id)
		</query>
	</named-native-query>

	<!-- ========================================== -->
	<!-- ============== Program Reports =============== -->
	<!-- ========================================== -->

	<named-native-query name="ProgramReports.EpidemiologyOneConsultationDetail" result-set-mapping="ProgramReports.EpidemiologyOneConsultationDetailResult">
		<query>
			SELECT CONCAT(pe.last_name, ' ', pe.other_last_names, ' ', pe.first_name, ' ', pe.middle_names) as patientFullName,
			CONCAT(substring(pe.last_name, 1, 3), substring(pe.first_name, 1, 2)) as coding,
			to_char(pe.birth_date, 'DD/MM/YYYY') as birthDate, g.description as gender,
			to_char(hc.created_on, 'DD/MM/YYYY') as startDate, dep.description as department,
			CONCAT(ci.description, ' - ', a.street, ' N° ', a.number, case when a.floor is not null then concat(' Piso: ', a.floor, 'Departamento: ', a.apartment) end) as address,
			hc.cie10_codes as cie10Codes,
			CONCAT(it.description, ' ', pe.identification_number) as identificationNumber, s.pt as problems
			FROM health_condition hc
			INNER JOIN patient pa ON hc.patient_id=pa.id
			LEFT JOIN document_health_condition dhe ON dhe.health_condition_id=hc.id
			LEFT JOIN document dd ON dhe.document_id=dd.id
			LEFT JOIN outpatient_consultation oc ON oc.document_id=dd.id
			LEFT JOIN institution ins ON oc.institution_id=ins.id
			INNER JOIN person pe ON pa.person_id=pe.id
			INNER JOIN identification_type it ON pe.identification_type_id=it.id
			INNER JOIN gender g ON pe.gender_id=g.id
			LEFT JOIN person_extended pex ON pex.person_id=pe.id
			LEFT JOIN address a ON pex.address_id=a.id
			LEFT JOIN city ci ON a.city_id=ci.id
			LEFT JOIN department dep ON ci.department_id=dep.id
			INNER JOIN snomed s ON hc.snomed_id=s.id
			INNER JOIN problem_type pt ON hc.problem_id=pt.id
			WHERE (pt.id='55607006' OR pt.id='439401001')
			AND ins.id = :institutionId
			AND oc.created_on BETWEEN :startDate AND :endDate
			AND hc.status_id='55561003'
			AND hc.verification_status_id='59156000'
			AND (s.sctid='1119303003' OR s.sctid='840539006' OR s.sctid='409671005' OR s.sctid='409676000' OR s.sctid='409677009' OR s.sctid='409678004' OR s.sctid='409679007' OR s.sctid='866057003'
			OR LOWER(s.pt) LIKE '%botulismo%' OR LOWER(s.pt) LIKE '%brote de enfermedad%' OR LOWER(s.pt) LIKE '%carbunco humano%' OR LOWER(s.pt) LIKE '%colera%'
			OR LOWER(s.pt) LIKE '%coqueluche%' OR LOWER(s.pt) LIKE '%difteria%' OR LOWER(s.pt) LIKE '%encefalopatía%' OR LOWER(s.pt) LIKE '%encefalitis%'
			OR LOWER(s.pt) LIKE '%fiebre del nilo%' OR LOWER(s.pt) LIKE '%fiebre amarilla%' OR LOWER(s.pt) LIKE '%fiebre hemorrágica%' OR LOWER(s.pt) LIKE '%fiebre recurrente%'
			OR LOWER(s.pt) LIKE '%fiebre tifoidea%' OR LOWER(s.pt) LIKE '%fiebre paratifoidea%' OR LOWER(s.pt) LIKE '%gripe humana%' OR LOWER(s.pt) LIKE '%hantavirosis%'
			OR (LOWER(s.pt) LIKE '%hepatitis%' AND NOT(LOWER(s.pt) LIKE '%hepatitis c%') AND NOT(LOWER(s.pt) LIKE '%hepatitis b%') AND NOT(LOWER(s.pt) LIKE '%hepatitis d%') AND NOT(LOWER(s.pt) LIKE '%hepatitis e%'))
			OR LOWER(s.pt) LIKE '%intoxicación%moluscos%' OR LOWER(s.pt) LIKE '%leishmaniasis visceral%' OR LOWER(s.pt) LIKE '%lepra%' OR LOWER(s.pt) LIKE '%leptospirosis%'
			OR LOWER(s.pt) LIKE '%meningoencefalitis%' OR LOWER(s.pt) LIKE '%mening%micótica%' OR LOWER(s.pt) LIKE '%mening%parasitaria%'OR LOWER(s.pt) LIKE '%meningococcemia%'
			OR LOWER(s.pt) LIKE '%mening%tubercul%' OR LOWER(s.pt) LIKE '%paludismo%' OR LOWER(s.pt) LIKE '%peste%' OR LOWER(s.pt) LIKE '%poliomielitis%'
			OR LOWER(s.pt) LIKE '%psitacosis%' OR LOWER(s.pt) LIKE '%rabia%' OR LOWER(s.pt) LIKE '%rubeola%' OR LOWER(s.pt) LIKE '%sarampión%' OR LOWER(s.pt) LIKE '%síndr%urémico%hemol%'
			OR LOWER(s.pt) LIKE '%síndr%guillén barré%' OR LOWER(s.pt) LIKE '%síndrome respiratorio agudo severo%' OR LOWER(s.pt) LIKE '%sars%' OR LOWER(s.pt) LIKE '%tétano%'
			OR LOWER(s.pt) LIKE '%tifus%' OR LOWER(s.pt) LIKE '%triquinosis%' OR LOWER(s.pt) LIKE '%viruela%')
			<!--AND ((EXTRACT(MONTH FROM oc.created_on)=(EXTRACT(MONTH FROM CURRENT_TIMESTAMP)-1) AND EXTRACT(YEAR FROM oc.created_on)=EXTRACT(YEAR FROM CURRENT_TIMESTAMP)) OR (EXTRACT(MONTH FROM oc.created_on)=1 AND EXTRACT(YEAR FROM oc.created_on)=(EXTRACT(YEAR FROM CURRENT_TIMESTAMP)-1)))-->
		</query>
	</named-native-query>

	<named-native-query name="ProgramReports.EpidemiologyTwoConsultationDetail" result-set-mapping="ProgramReports.EpidemiologyTwoConsultationDetailResult">
		<query>
			WITH people AS (
			SELECT hc.id AS id, CONCAT(pe.last_name, ' ', pe.other_last_names, ' ', pe.first_name, ' ', pe.middle_names),
			CONCAT(substring(pe.last_name, 1, 3), substring(pe.first_name, 1, 2)), pe.birth_date, g.description,
			CASE
			WHEN (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pe.birth_date)) &lt; 0 then
			((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pe.birth_date)) -1)
			ELSE ((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pe.birth_date)))
			end AS anios,
			CASE
			WHEN (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pe.birth_date)) &lt; 0 then
			(12 +(EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pe.birth_date)))
			ELSE ((EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pe.birth_date)))
			end as meses,
			hc.created_on, dep.description, CONCAT(ci.description, ' - ', a.street, ' N° ', a.number, CASE WHEN a.floor is not null then CONCAT(' Piso: ', a.floor, 'Departamento: ', a.apartment) end), hc.cie10_codes as CIE10,
			CONCAT(it.description, ' ', pe.identification_number), s.sctid as snomed, s.pt as term
			FROM health_condition hc INNER JOIN patient pa on hc.patient_id=pa.id
			LEFT JOIN document_health_condition dhe ON dhe.health_condition_id=hc.id
			LEFT JOIN document dd on dhe.document_id=dd.id
			LEFT JOIN outpatient_consultation oc ON oc.document_id=dd.id
			LEFT JOIN institution ins on oc.institution_id=ins.id
			INNER JOIN person pe on pa.person_id=pe.id
			INNER JOIN identification_type it on pe.identification_type_id=it.id
			INNER JOIN gender g on pe.gender_id=g.id
			LEFT JOIN person_extended pex on pex.person_id=pe.id
			LEFT JOIN address a on pex.address_id=a.id
			LEFT JOIN city ci on a.city_id=ci.id
			LEFT JOIN department dep on ci.department_id=dep.id
			INNER JOIN snomed s on hc.snomed_id=s.id
			INNER JOIN problem_type pt on hc.problem_id=pt.id
			WHERE ins.id= :institutionId AND (pt.id='55607006' OR pt.id='439401001') AND hc.status_id='55561003' AND hc.verification_status_id='59156000'
			AND oc.institution_id= :institutionId
			AND oc.created_on BETWEEN :startDate AND :endDate),
			<!--AND (((EXTRACT(MONTH FROM oc.created_on)=(EXTRACT(MONTH FROM CURRENT_TIMESTAMP)-1) AND EXTRACT(YEAR FROM oc.created_on)=EXTRACT(YEAR FROM CURRENT_TIMESTAMP)) OR (EXTRACT(MONTH FROM oc.created_on)=1 AND EXTRACT(YEAR FROM oc.created_on)=(EXTRACT(YEAR FROM CURRENT_TIMESTAMP)-1))))),-->
			data_ep AS (
			SELECT *,
			CASE
			WHEN anios&lt;1 AND meses&lt;6 then '(&lt;6)'
			WHEN anios&lt;1 AND meses>=6 AND meses &lt;=11 then '[6-11]'
			WHEN anios&lt;1 AND meses>=12 AND meses &lt;=23 then '[12-23]'
			WHEN anios>=2 AND anios&lt;=4 then '[2-4]'
			WHEN anios>=5 AND anios&lt;=9 then '[5-9]'
			WHEN anios>=10 AND anios&lt;=14 then '[10-14]'
			WHEN anios>=15 AND anios&lt;=19 then '[15-19]'
			WHEN anios>=20 AND anios&lt;=24 then '[20-24]'
			WHEN anios>=25 AND anios&lt;=34 then '[25-34]'
			WHEN anios>=35 AND anios&lt;=44 then '[35-44]'
			WHEN anios>=45 AND anios&lt;=64 then '[45-64]'
			WHEN anios>=65 AND anios&lt;=74 then '[65-74]'
			WHEN anios>75 then '(>75)'
			end AS grupo
			FROM people
			)
			SELECT CONCAT(term, ' (CIE10:', CIE10, ')') as diagnostic, grupo as range, count(id) as counter
			FROM data_ep
			WHERE lower(term) like '%influenza%' or lower(term) like '%gripe%' or lower(term) like '%gripal%' or lower(term) like '%virosis respiratoria%' or lower(term) like '%virus sincicial respiratorio%' or lower(term) like '%adenovirus%' or lower(term) like '%neumonía%' or lower(term) like '%neuropatía%' or lower(term) like '%neumonítis%' or lower(term) like '%neumónico%'
			or lower(term) like '%pulmonía%' or lower(term) like '%bronquilitis%' or lower(term) like '%ETS%' or lower(term) like '%H1N1%' or lower(term) like '%diarrea%' or lower(term) like '%gastroenteritis%' or lower(term) like '%enteritis%' or lower(term) like '%colitis%' or lower(term) like '%diarreico%'  or lower(term) like '%diabetes%'
			or lower(term) like '%accidente%' or lower(term) like '%alcoholismo%' or lower(term) like '%escorpion%' or lower(term) like '%araña%' or lower(term) like '%bronquitis%' or lower(term) like '%brucelosis%' or lower(term) like '%cancer%' or lower(term) like '%catarro%' or lower(term) like '%chagas%' or lower(term) like '%desnutrición%'
			or lower(term) like '%encefalitis%' or lower(term) like '%enteroparasitosis%' or lower(term) like '%escabiosis%' or lower(term) like '%escarlatina%' or lower(term) like '%envenenamiento%animales%venenosos%' or lower(term) like '%fiebre reumatica%' or lower(term) like '%giardiasis%'
			or lower(term) like '%hepatitis b%' or lower(term) like '%hepatitis c%' or lower(term) like '%hepatitis d%' or lower(term) like '%hepatitis e%' or lower(term) like '%helmintiatis%' or lower(term) like '%hidatidosis%' or lower(term) like '%hipertensión arterial%' or lower(term) like '%hipertiroidismo%'
			or lower(term) like '%hipotiroidismo%' or lower(term) like '%HIV%' or lower(term) like '%infección%' or (lower(term) like '%intoxicación%' AND not(lower(term) like '%moluscos%')) or lower(term) like '%irag%' or lower(term) like '%lesiones%'
			or lower(term) like '%leishmaniasis cutánea%' or lower(term) like '%leishmaniasis mucosa%' or lower(term) like '%lupus%' or lower(term) like '%meningitis%' or lower(term) like '%micosis%' or lower(term) like '%mielitis transversa%' or lower(term) like '%mononucleosis%'
			or lower(term) like '%obesidad%' or lower(term) like '%ofidismo%' or lower(term) like '%parotiditis%' or lower(term) like '%pediculosis%' or lower(term) like '%mordida%' or lower(term) like '%picadura%' or lower(term) like '%piodermitis%' or lower(term) like '%polineuritis%'
			or lower(term) like '%salmonellosis%' or lower(term) like '%sida%' or lower(term) like '%sífilis%' or lower(term) like '%síndrome febril%' or lower(term) like '%supuración genital%' or lower(term) like '%toxinfección%' or lower(term) like '%toxoplasmosis%' or lower(term) like '%tuberculosis%'
			or lower(term) like '%varicela%' or lower(term) like '%defunción%'
			group by diagnostic, range

		</query>
	</named-native-query>

	<named-native-query name="ProgramReports.RecuperoGeneralConsultationDetail" result-set-mapping="ProgramReports.RecuperoGeneralConsultationDetailResult">
		<query>
			SELECT concat(ins.name, '(SISA: ', ins.sisa_code, ' | CUIT: ', ins.cuit, ')') AS institution, cs.name AS clinicalSpecialty,
			concat(p.first_name, ' ', p.middle_names, ' ', p.last_name, ' ', p.other_last_names) as provider, p.identification_number AS providerDni,
			oc.start_date AS attentionDate,
			CASE
			WHEN (EXTRACT(HOUR FROM oc.created_on)) &lt; 3 THEN
			concat(24-3, ':', EXTRACT(MINUTE FROM oc.created_on))
			ELSE concat(EXTRACT(HOUR FROM oc.created_on)-3, ':', EXTRACT(MINUTE FROM oc.created_on))
			end AS hour,
			(row_number() over(partition by oc.doctor_id order by oc.start_date)) AS consultationNumber,
			pp.identification_number as patientDni, concat(pp.first_name , ' ', pp.last_name) AS patientName, g.description AS gender, pp.birth_date AS birthDate,
			CASE
			WHEN (EXTRACT(MONTH FROM oc.start_date) - EXTRACT(MONTH FROM pp.birth_date)) &lt; 0 THEN
			concat((EXTRACT(YEAR FROM oc.start_date) - EXTRACT(YEAR FROM pp.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM oc.start_date) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			ELSE concat((EXTRACT(YEAR FROM oc.start_date) - EXTRACT(YEAR FROM pp.birth_date)), ' Años, ', (EXTRACT(MONTH FROM oc.start_date) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			end AS ageTurn,
			CASE
			WHEN (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)) &lt; 0 THEN
			concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pp.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			ELSE concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pp.birth_date)), ' Años, ', (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			end AS ageToday,
			(SELECT string_agg(concat(mc.name, '(RNOS: ', hi.rnos, ')'), ', ') FROM patient_medical_coverage pmc LEFT JOIN medical_coverage mc on pmc.medical_coverage_id=mc.id LEFT JOIN 					 		health_insurance hi ON hi.id=mc.id WHERE pmc.patient_id=pa.id) AS medicalCoverage,
			concat(a.street, ' N° ', a.number, CASE WHEN a.floor is not null THEN concat(' Piso: ', a.floor, 'Departamento: ', a.apartment) end) AS address,
			c.description AS location,
			cs.id as clinicalSpecialtyId, cs.name as clinicalSpecialty,
			hp.id as professionalId,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id and s_vs.id=10) AS bmi,
			(SELECT string_agg(r.description, ', ') FROM outpatient_consultation_reasons ocr INNER JOIN reasons r on ocr.reason_id=r.id WHERE ocr.outpatient_consultation_id=oc.id) as reasons,
			(SELECT string_agg(concat(s_proc.pt, '(', ps.description, ' | SNOMED: ', s_proc.sctid, ' | CIE10: ', proc.cie10_codes, ')'), ', ') FROM document_procedure dp INNER JOIN procedures proc on dp.procedure_id=proc.id INNER JOIN procedures_status ps ON proc.status_id=ps.id INNER JOIN snomed s_proc ON proc.snomed_id=s_proc.id WHERE dp.document_id=d.id) AS procedures,
			(SELECT string_agg(concat(s_prob.pt,' (',ccs.description,' &amp; ',cvs.description,' - Fecha: ',hc.start_date ,')', '[SNOMED: ', s_prob.sctid, ' | CIE10: ', hc.cie10_codes, ']'), ', ')
			FROM document_health_condition dhc INNER JOIN health_condition hc ON dhc.health_condition_id=hc.id INNER JOIN problem_type pt on hc.problem_id=pt.id INNER JOIN snomed s_prob on hc.snomed_id=s_prob.id INNER JOIN condition_clinical_status ccs ON hc.status_id=ccs.id INNER JOIN condition_verification_status cvs ON hc.verification_status_id=cvs.id WHERE dhc.document_id=d.id) AS problems,
			(SELECT string_agg(concat(s_med.pt, '[SNOMED: ', s_med.sctid, ' | CIE10: ', ms.cie10_codes, '] (status: ', mss.description, ')'), ', ') FROM document_medicamention_statement dms INNER JOIN medication_statement ms ON dms.medication_statement_id=ms.id INNER JOIN medication_statement_status mss ON ms.status_id=mss.id INNER JOIN snomed s_med ON ms.snomed_id=s_med.id WHERE dms.document_id=d.id) AS medication,
			(SELECT string_agg(ev.description, ', ') FROM note ev WHERE d.other_note_id=ev.id) AS evolution
			FROM outpatient_consultation oc
			LEFT JOIN institution ins ON oc.institution_id=ins.id
			LEFT JOIN clinical_specialty cs ON oc.clinical_specialty_id=cs.id
			LEFT JOIN healthcare_professional hp ON oc.doctor_id=hp.id
			INNER JOIN person p ON hp.person_id=p.id
			LEFT JOIN patient pa ON oc.patient_id=pa.id
			INNER JOIN person pp ON pa.person_id=pp.id
			LEFT JOIN person_extended pe ON pe.person_id=pp.id
			INNER JOIN gender g ON pp.gender_id=g.id
			LEFT JOIN gender gg ON pe.gender_self_determination=gg.id
			LEFT JOIN patient_medical_coverage pmc ON pmc.patient_id=pa.id
			LEFT JOIN medical_coverage mc ON pmc.medical_coverage_id=mc.id
			LEFT JOIN address a ON pe.address_id=a.id
			LEFT JOIN city c ON a.city_id=c.id
			LEFT JOIN document d ON oc.document_id=d.id
			WHERE ins.id=:institutionId
			AND oc.created_on BETWEEN :startDate AND :endDate
			AND (pmc.id is not null AND NOT (lower(mc.name) like '%sumar%'))
			ORDER BY oc.created_on;
		</query>
	</named-native-query>

	<named-native-query name="ProgramReports.SumarGeneralConsultationDetail" result-set-mapping="ProgramReports.SumarGeneralConsultationDetailResult">
		<query>
			SELECT concat(ins.name, '(SISA: ', ins.sisa_code, ' | CUIT: ', ins.cuit, ')') AS institution,
			concat(p.first_name, ' ', p.middle_names, ' ', p.last_name, ' ', p.other_last_names) as provider, p.identification_number AS providerDni,
			oc.start_date AS attentionDate, oc.clinical_specialty_id,
			CASE
			WHEN (EXTRACT(HOUR FROM oc.created_on)) &lt; 3 THEN
			concat(24-3, ':', EXTRACT(MINUTE FROM oc.created_on))
			ELSE concat(EXTRACT(HOUR FROM oc.created_on)-3, ':', EXTRACT(MINUTE FROM oc.created_on))
			END AS hour,
			(row_number() over(partition by oc.doctor_id order by oc.start_date)) AS consultationNumber,
			pp.identification_number AS patientDni, concat(pp.first_name , ' ', pp.last_name) AS patientName, g.description AS gender, gg.description AS selfPerceivedGender, pe.name_self_determination selfPerceivedName, pp.birth_date birthDate,
			CASE
			WHEN (EXTRACT(MONTH FROM oc.start_date) - EXTRACT(MONTH FROM pp.birth_date)) &lt; 0 THEN
			concat((EXTRACT(YEAR FROM oc.start_date) - EXTRACT(YEAR FROM pp.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM oc.start_date) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			ELSE concat((EXTRACT(YEAR FROM oc.start_date) - EXTRACT(YEAR FROM pp.birth_date)), ' Años, ', (EXTRACT(MONTH FROM oc.start_date) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			END AS ageTurn,
			CASE
			WHEN (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)) &lt; 0 THEN
			concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pp.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			ELSE concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pp.birth_date)), ' Años, ', (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			END AS ageToday,
			et.pt ethnicity,
			(SELECT string_agg(concat(mc.name, '(RNOS: ', hi.rnos, ')'), ', ') FROM patient_medical_coverage pmc LEFT JOIN medical_coverage mc ON pmc.medical_coverage_id=mc.id LEFT JOIN health_insurance hi ON hi.id=mc.id WHERE pmc.patient_id=pa.id) AS medicalCoverage,
			concat(a.street, ' N° ', a.number, CASE WHEN a.floor is not null THEN concat(' Piso: ', a.floor, 'Departamento: ', a.apartment) end) AS address,
			c.description AS location,
			ed.description AS educationLevel,
			lab.description AS occupation,
			cs.id as clinicalSpecialtyId, cs.name as clinicalSpecialty,
			hp.id as professionalId,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=1) AS systolicBloodPressure,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=2) AS diastolicBloodPressure,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=3) AS meanArterialPressure,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=4) AS temperature,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=5) AS heartRate,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=6) AS respirationRate,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=7) AS oxygenSaturationHemoglobin,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=8) AS height,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=9) AS weight,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs ON dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs ON ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=10) AS bmi,
			(SELECT ovs.value FROM document_vital_sign dvs INNER JOIN observation_vital_sign ovs on dvs.observation_vital_sign_id=ovs.id INNER JOIN snomed s_vs on ovs.snomed_id=s_vs.id WHERE dvs.document_id=d.id AND s_vs.id=1409) AS headCircunference,
			(SELECT string_agg(r.description, ', ') FROM outpatient_consultation_reasons ocr INNER JOIN reasons r ON ocr.reason_id=r.id WHERE ocr.outpatient_consultation_id=oc.id) AS reasons,
			(SELECT string_agg(concat(s_proc.pt, '(', ps.description, ' | SNOMED: ', s_proc.sctid, ' | CIE10: ', proc.cie10_codes, ')'), ', ') FROM document_procedure dp INNER JOIN procedures proc ON dp.procedure_id=proc.id INNER JOIN procedures_status ps ON proc.status_id=ps.id INNER JOIN snomed s_proc ON proc.snomed_id=s_proc.id WHERE dp.document_id=d.id) AS procedures,
			(SELECT string_agg(concat(s_prob.pt,' (',ccs.description,' &amp; ',cvs.description,' - Fecha: ',hc.start_date ,')', '[SNOMED: ', s_prob.sctid, ' | CIE10: ', hc.cie10_codes, ']'), ', ')
			FROM document_health_condition dhc INNER JOIN health_condition hc on dhc.health_condition_id=hc.id INNER JOIN problem_type pt on hc.problem_id=pt.id INNER JOIN snomed s_prob on hc.snomed_id=s_prob.id INNER JOIN condition_clinical_status ccs ON hc.status_id=ccs.id INNER JOIN condition_verification_status cvs ON hc.verification_status_id=cvs.id WHERE dhc.document_id=d.id) AS problems,
			(SELECT string_agg(concat(s_med.pt, '[SNOMED: ', s_med.sctid, ' | CIE10: ', ms.cie10_codes, '] (status: ', mss.description, ')'), ', ') FROM document_medicamention_statement dms INNER JOIN medication_statement ms ON dms.medication_statement_id=ms.id INNER JOIN medication_statement_status mss ON ms.status_id=mss.id INNER JOIN snomed s_med ON ms.snomed_id=s_med.id WHERE dms.document_id=d.id) AS medication,
			(SELECT string_agg(ev.description, ', ') FROM note ev WHERE d.other_note_id=ev.id) AS evolution
			FROM outpatient_consultation oc
			LEFT JOIN institution ins ON oc.institution_id=ins.id
			LEFT JOIN clinical_specialty cs ON (oc.clinical_specialty_id=cs.id)
			JOIN healthcare_professional hp ON (oc.doctor_id=hp.id)
			JOIN person p ON (hp.person_id=p.id)
			LEFT JOIN patient pa ON oc.patient_id=pa.id
			INNER JOIN person pp ON pa.person_id=pp.id
			LEFT JOIN person_extended pe ON pe.person_id=pp.id
			LEFT JOIN ethnicity et ON pe.ethnicity_id=et.id
			LEFT JOIN education_level ed ON pe.education_level_id=ed.id
			LEFT JOIN occupation lab ON pe.occupation_id=lab.id
			INNER JOIN gender g ON pp.gender_id=g.id
			LEFT JOIN gender gg ON pe.gender_self_determination=gg.id
			LEFT JOIN patient_medical_coverage pmc ON pmc.patient_id=pa.id
			LEFT JOIN medical_coverage mc ON pmc.medical_coverage_id=mc.id
			LEFT JOIN address a ON pe.address_id=a.id
			LEFT JOIN city c ON a.city_id=c.id
			LEFT JOIN document d ON oc.document_id=d.id
			WHERE ins.id=:institutionId
			AND oc.created_on BETWEEN :startDate AND :endDate
			AND (pmc.id is null Or lower(mc.name) like '%sumar%')
			ORDER BY oc.created_on;
		</query>
	</named-native-query>

	<named-native-query name="ProgramReports.SumarOdontologicoConsultationDetail" result-set-mapping="ProgramReports.SumarOdontologicoConsultationDetailResult">
		<query>
			with procedimientos as(
			SELECT dp.document_id as document_id, s.pt as pt, ps.description as description, s.sctid as sctid, proc.cie10_codes from document_procedure dp
			INNER JOIN procedures proc on dp.procedure_id=proc.id
			INNER JOIN procedures_status ps on proc.status_id=ps.id
			INNER JOIN snomed s on proc.snomed_id=s.id
			where ps.description&lt;>'Ingresado por error' and ps.description&lt;>'Desconocido'
			), medicacion as (
			SELECT dms.document_id, s.pt, s.sctid, ms.cie10_codes from document_medicamention_statement dms
			INNER JOIN medication_statement ms on dms.medication_statement_id=ms.id
			INNER JOIN medication_statement_status mss on ms.status_id=mss.id
			INNER JOIN snomed s on ms.snomed_id=s.id
			), problemas as(
			SELECT dhc.document_id, s.sctid, concat(s.pt,' (',ccs.description,' &amp; ',cvs.description,' - Fecha: ',hc.start_date ,')') as description, hc.cie10_codes from document_health_condition dhc
			INNER JOIN health_condition hc on dhc.health_condition_id=hc.id
			INNER JOIN problem_type pt on hc.problem_id=pt.id
			INNER JOIN snomed s on hc.snomed_id=s.id
			INNER JOIN condition_clinical_status ccs on hc.status_id=ccs.id
			INNER JOIN condition_verification_status cvs on hc.verification_status_id=cvs.id
			where ccs.id&lt;>'723510000'
			)
			SELECT concat(ins.name, '(SISA: ', ins.sisa_code, ' | CUIT: ', ins.cuit, ')') AS institution,
			cs.name as operativeUnit,
			concat(p.first_name, ' ', p.middle_names, ' ', p.last_name, ' ', p.other_last_names) as provider,
			p.identification_number as providerDni,
			oc.performed_date as attentionDate,
			(row_number() over(partition by oc.doctor_id order by oc.performed_date)) as consultationNumber,
			pp.identification_number as patientDni,
			concat(pp.first_name , ' ', pp.last_name) as patientName,
			g.description as gender,
			gg.description as selfPerceivedGender,
			pe.name_self_determination as selfPerceivedName,
			pp.birth_date as birthDate,
			case
			when (EXTRACT(MONTH FROM oc.performed_date) - EXTRACT(MONTH FROM pp.birth_date)) &lt; 0 then
			concat((EXTRACT(YEAR FROM oc.performed_date) - EXTRACT(YEAR FROM pp.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM oc.performed_date) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			else concat((EXTRACT(YEAR FROM oc.performed_date) - EXTRACT(YEAR FROM pp.birth_date)), ' Años, ', (EXTRACT(MONTH FROM oc.performed_date) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			end as ageTurn,
			case
			when (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)) &lt; 0 then
			concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pp.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			else concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pp.birth_date)), ' Años, ', (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			end as ageToday,
			et.pt as ethnicity,
			(SELECT string_agg(concat(mc.name, '(RNOS: ', hi.rnos, ')'), ', ') from patient_medical_coverage pmc LEFT JOIN medical_coverage mc on pmc.medical_coverage_id=mc.id LEFT JOIN health_insurance hi on hi.id=mc.id where pmc.patient_id=pa.id) as medicalCoverage,
			concat(oci.permanent_c, ' | ', oci.permanent_p, ' | ', oci.permanent_o) as indexCpo,
			concat(oci.temporary_c, ' | ', oci.temporary_e, ' | ', oci.temporary_o) as indexCeo,
			oci.permanent_teeth_present as permanentTeethPresent,
			oci.temporary_teeth_present as temporaryTeethPresent,
			concat(a.street, ' N° ', a.number, case when a.floor is not null then concat(' Piso: ', a.floor, 'Departamento: ', a.apartment) end) as address,
			c.description as location,
			ed.description as educationLevel,
			lab.description as occupation,
			(SELECT string_agg(r.description, ', ') from odontology_consultation_reason ocr INNER JOIN reasons r on ocr.reason_id=r.id where ocr.odontology_consultation_id=oc.id) as reasons,
			(SELECT string_agg(concat(proc.pt, '(', proc.description, ' | SNOMED: ', proc.sctid, ' | CIE10: ', proc.cie10_codes, ')'), ', ') from procedimientos proc where proc.document_id=d.id) as procedures,
			(SELECT string_agg(concat(prob.description, '[SNOMED: ', prob.sctid, ' | CIE10: ', prob.cie10_codes, ']'), ', ') from problemas prob where prob.document_id=d.id) as problems,
			(SELECT string_agg(concat(med.pt, '(SNOMED:', med.sctid, ' | CIE10: ', med.cie10_codes, ')'), ', ') from medicacion med where med.document_id=d.id) as medication,
			(SELECT string_agg(ev.description, ', ') from note ev where d.other_note_id=ev.id) as evolution
			from odontology_consultation oc
			LEFT JOIN odontology_consultation_indices oci ON oc.id=oci.odontology_consultation_id
			LEFT JOIN institution ins on oc.institution_id=ins.id
			LEFT JOIN clinical_specialty cs on oc.clinical_specialty_id=cs.id
			LEFT JOIN healthcare_professional hp ON oc.doctor_id=hp.id
			INNER JOIN person p on hp.person_id=p.id
			LEFT JOIN patient pa on oc.patient_id=pa.id
			INNER JOIN person pp on pa.person_id=pp.id
			LEFT JOIN person_extended pe on pe.person_id=pp.id
			LEFT JOIN ethnicity et on pe.ethnicity_id=et.id
			LEFT JOIN education_level ed on pe.education_level_id=ed.id
			LEFT JOIN occupation lab on pe.occupation_id=lab.id
			INNER JOIN gender g on pp.gender_id=g.id
			LEFT JOIN gender gg on pe.gender_self_determination=gg.id
			LEFT JOIN patient_medical_coverage pmc ON pmc.patient_id=pa.id
			LEFT JOIN medical_coverage mc on pmc.medical_coverage_id=mc.id
			LEFT JOIN address a on pe.address_id=a.id
			LEFT JOIN city c on a.city_id=c.id
			LEFT JOIN document d ON oc.id=d.source_id AND oc.created_by = d.created_by AND date_trunc('minute', oc.created_on) = date_trunc('minute', d.created_on) --oc.created_on=d.created_on
			WHERE (pmc.id is null Or lower(mc.name) like '%sumar%')
			AND ins.id= :institutionId
			AND oc.created_on BETWEEN :startDate AND :endDate <!--(oc.created_on >= date_trunc('month', (now() + (INTERVAL '-2 month'))) AND oc.created_on &lt; date_trunc('month', now()))-->
			order by oc.created_on;
		</query>
	</named-native-query>

	<named-native-query name="ProgramReports.RecuperoOdontologicoConsultationDetail" result-set-mapping="ProgramReports.RecuperoOdontologicoConsultationDetailResult">
		<query>
			SELECT concat(ins.name, '(SISA: ', ins.sisa_code, ' | CUIT: ', ins.cuit, ')') AS institution, cs.name AS operativeUnit,
			concat(p.first_name, ' ', p.middle_names, ' ', p.last_name, ' ', p.other_last_names) AS lender, p.identification_number AS identificationNumber,
			oc.performed_date AS attentionDate,
			CASE
			WHEN (EXTRACT(HOUR FROM oc.created_on)) &lt; 3 THEN
			concat(24-3, ':', EXTRACT(MINUTE FROM oc.created_on))
			ELSE concat(EXTRACT(HOUR FROM oc.created_on)-3, ':', EXTRACT(MINUTE FROM oc.created_on))
			END AS hour,
			pp.identification_number AS patientIdentificationNumber, concat(pp.first_name , ' ', pp.last_name) AS patientName, g.description AS gender, pp.birth_date birthDate,
			case
			when (EXTRACT(MONTH FROM oc.performed_date) - EXTRACT(MONTH FROM pp.birth_date)) &lt; 0 then
			concat((EXTRACT(YEAR FROM oc.performed_date) - EXTRACT(YEAR FROM pp.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM oc.performed_date) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			else concat((EXTRACT(YEAR FROM oc.performed_date) - EXTRACT(YEAR FROM pp.birth_date)), ' Años, ', (EXTRACT(MONTH FROM oc.performed_date) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			END AS ageTurn,
			concat(mc.name, '(RNOS: ', hi.rnos, ')') AS medicalCoverage,
			concat(a.street, ' N° ', a.number, CASE WHEN a.floor IS NOT NULL THEN concat(' Piso: ', a.floor, 'Departamento: ', a.apartment) END) AS address,
			c.description AS location,
			concat(oci.permanent_c, '|', oci.permanent_p, '|', oci.permanent_o) AS cpo, concat(oci.temporary_c, '|', oci.temporary_e, '|', oci.temporary_o) AS ceo,
			(SELECT string_agg(r.description, ', ') FROM odontology_consultation_reason ocr INNER JOIN odontology_reason r ON ocr.reason_id=r.id WHERE ocr.odontology_consultation_id=oc.id) AS reasons,
			(SELECT string_agg(concat(s_proc.pt, '(', ps.description, ' | SNOMED: ', s_proc.sctid, ' | CIE10: ', proc.cie10_codes, ')'), ', ') from document_procedure dp INNER JOIN procedures PROC ON dp.procedure_id=proc.id INNER JOIN procedures_status ps ON proc.status_id=ps.id INNER JOIN snomed s_proc ON proc.snomed_id=s_proc.id WHERE dp.document_id=d.id) AS procedures,
			(SELECT string_agg(concat(s_p.pt, '(SNOMED: ', s_p.sctid, ' | CIE10: ', op.cie10_codes, ')[diente: ', stp.pt, ' | sctid: ', stp.sctid, '][superficie: ', sfp.pt, ' | sctid', sfp.sctid, ']'), ', ') FROM document_odontology_procedure dop INNER JOIN odontology_procedure op ON dop.odontology_procedure_id=op.id INNER JOIN snomed s_p ON op.snomed_id=s_p.id
			LEFT JOIN snomed stp ON op.tooth_id=stp.id LEFT JOIN snomed sfp ON op.surface_id=sfp.id WHERE dop.document_id=d.id) AS odontologyProcedures,
			(SELECT string_agg(concat(s_prob.pt,' (',ccs.description,' &amp; ',cvs.description,' - Fecha: ',hc.start_date ,')', '[SNOMED: ', s_prob.sctid, ' | CIE10: ', hc.cie10_codes, ']'), ', ')
			from document_health_condition dhc INNER JOIN health_condition hc ON dhc.health_condition_id=hc.id INNER JOIN problem_type pt ON hc.problem_id=pt.id INNER JOIN snomed s_prob ON hc.snomed_id=s_prob.id INNER JOIN condition_clinical_status ccs ON hc.status_id=ccs.id INNER JOIN condition_verification_status cvs ON hc.verification_status_id=cvs.id WHERE dhc.document_id=d.id) AS problems,
			(SELECT string_agg(concat(s_d.pt, '(SNOMED: ', s_d.sctid, ' | CIE10: ', od.cie10_codes, ')[diente: ', std.pt, ' | sctid: ', std.sctid, '][superficie: ', sfd.pt, ' | sctid', sfd.sctid, ']'), ', ')
			FROM document_odontology_diagnostic dod INNER JOIN odontology_diagnostic od ON dod.odontology_diagnostic_id=od.id INNER JOIN snomed s_d ON od.snomed_id=s_d.id LEFT JOIN snomed std ON od.tooth_id=std.id LEFT JOIN snomed sfd ON od.surface_id=sfd.id WHERE dod.document_id=d.id) AS odontologyDiagnosis
			FROM odontology_consultation oc
			LEFT JOIN odontology_consultation_indices oci ON oci.odontology_consultation_id=oc.id
			LEFT JOIN institution ins ON oc.institution_id=ins.id
			LEFT JOIN clinical_specialty cs ON oc.clinical_specialty_id=cs.id
			LEFT JOIN healthcare_professional hp ON oc.doctor_id=hp.id
			INNER JOIN person p ON hp.person_id=p.id
			LEFT JOIN patient pa ON oc.patient_id=pa.id
			INNER JOIN person pp ON pa.person_id=pp.id
			LEFT JOIN person_extended pe ON pe.person_id=pp.id
			INNER JOIN gender g ON pp.gender_id=g.id
			LEFT JOIN gender gg ON pe.gender_self_determination=gg.id
			LEFT JOIN patient_medical_coverage pmc ON pmc.patient_id=oc.patient_medical_coverage_id
			LEFT JOIN medical_coverage mc ON pmc.medical_coverage_id=mc.id
			LEFT JOIN health_insurance hi ON hi.id=mc.id
			LEFT JOIN address a ON pe.address_id=a.id
			LEFT JOIN city c ON a.city_id=c.id
			LEFT JOIN document d ON d.source_id=oc.id AND d.source_type_id=6
			WHERE oc.created_on BETWEEN :startDate AND :endDate
			AND (pmc.id is not null AND NOT (lower(mc.name) like '%sumar%'))
			AND ins.id= :institutionId
			ORDER BY oc.created_on;
		</query>
	</named-native-query>

	<!-- ========================================== -->
    <!-- ============== Appointment =============== -->
    <!-- ========================================== -->

    <named-native-query name="Appointment.medicalCoverage">
        <query>select ap.patient_medical_coverage_id
            from appointment ap
            join appointment_assn apassn on (ap.id = apassn.appointment_id)
            join diary d on (apassn.diary_id = d.id)
			left join diary_associated_professional dap on (dap.diary_id = d.id)
			where ap.patient_id = :patientId and
			ap.date_type_id = :currentDate and
			ap.patient_medical_coverage_id is not null and
            (ap.appointment_state_id = :confirmedAppointmentState or
			ap.appointment_state_id = :assignedAppointmentState ) and
            (d.healthcare_professional_id = :professionalId or
			dap.healthcare_professional_id = :professionalId)
            order by hour asc
            limit 1
        </query>
    </named-native-query>


    <!-- ========================================== -->
    <!-- ============== Results-mapping =============== -->
    <!-- ========================================== -->

    <sql-result-set-mapping name="HCE.findAllMedicationsResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.MedicationVo">
            <column name="id" class="java.lang.Integer"/>
            <column name="sctidCode" class="java.lang.String"/>
            <column name="sctidTerm" class="java.lang.String"/>
            <column name="status" class="java.lang.String"/>
            <column name="sequence" class="java.lang.Integer"/>
            <column name="count" class="java.lang.Integer"/>
            <column name="duration" class="java.lang.Double"/>
            <column name="duration_unit" class="java.lang.String"/>
            <column name="frequency" class="java.lang.Integer"/>
            <column name="period_unit" class="java.lang.String"/>
            <column name="effectiveTime" class="java.sql.Date"/>
            <column name="end_date" class="java.sql.Date"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.getDocumentReferenceResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.BundleVo">
            <column name="id" class="java.lang.Integer"/>
            <column name="first_name" class="java.lang.String"/>
            <column name="middle_names" class="java.lang.String"/>
            <column name="last_name" class="java.lang.String"/>
            <column name="hasDocuments" class="java.lang.Boolean"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.getPatientResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.PatientVo">
            <column name="first_name" class="java.lang.String"/>
            <column name="middle_names" class="java.lang.String"/>
            <column name="last_name" class="java.lang.String"/>
            <column name="other_last_names" class="java.lang.String"/>
            <column name="mothers_last_name" class="java.lang.String"/>
            <column name="identification_number" class="java.lang.String"/>
            <column name="gender_id" class="java.lang.Short"/>
            <column name="birth_date" class="java.lang.String"/>
            <column name="phone_number" class="java.lang.String"/>
            <column name="address_id" class="java.lang.Integer"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.findAllConditionResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.ConditionVo">
            <column name="id" class="java.lang.Integer"/>
            <column name="code" class="java.lang.String"/>
            <column name="term" class="java.lang.String"/>
            <column name="clinical_status" class="java.lang.String"/>
            <column name="verification_status_id" class="java.lang.String"/>
            <column name="start_date" class="java.sql.Date"/>
            <column name="severity" class="java.lang.String"/>
            <column name="created_on" class="java.sql.Date"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.findAllImmunizationsResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.ImmunizationVo">
            <column name="id" class="java.lang.Integer"/>
            <column name="code" class="java.lang.String"/>
            <column name="term" class="java.lang.String"/>
            <column name="status_id" class="java.lang.String"/>
            <column name="administration_date" class="java.sql.Date"/>
            <column name="created_on" class="java.sql.Date"/>
            <column name="expiration_date" class="java.sql.Date"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.findAllAllergiesResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.AllergyIntoleranceVo">
            <column name="id" class="java.lang.Integer"/>
            <column name="code" class="java.lang.String"/>
            <column name="term" class="java.lang.String"/>
            <column name="status_id" class="java.lang.String"/>
            <column name="verification_status_id" class="java.lang.String"/>
            <column name="category_id" class="java.lang.Short"/>
            <column name="criticality" class="java.lang.Short"/>
            <column name="start_date" class="java.sql.Date"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.getOrganizationResult" >
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.OrganizationVo">
            <column name="sisa_code" class="java.lang.String"/>
            <column name="name" class="java.lang.String"/>
            <column name="phone_number" class="java.lang.String"/>
            <column name="address_id" class="java.lang.Integer"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="Reports.OutpatientSummaryResult">
        <constructor-result target-class="net.pladema.reports.repository.ConsultationSummary">
            <column name="professional_id" class="java.lang.Integer"/>
            <column name="specialty_id" class="java.lang.Integer"/>
            <column name="specialty" class="java.lang.String"/>
            <column name="specialtyType" class="java.lang.Short"/>
            <column name="age" class="java.lang.Integer"/>
            <column name="gender_id" class="java.lang.Short"/>
            <column name="OS" class="java.lang.Boolean"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="Reports.ConsultationDetailResult">
        <constructor-result target-class="net.pladema.reports.repository.ConsultationDetailWithoutInstitution">
            <column name="patientSurname" class="java.lang.String"/>
            <column name="patientFirstName" class="java.lang.String"/>
			<column name="selfPerceivedName" class="java.lang.String"/>
            <column name="identificationType" class="java.lang.String"/>
            <column name="identificationNumber" class="java.lang.String"/>
            <column name="birthDate" class="java.lang.String"/>
            <column name="gender" class="java.lang.String"/>
            <column name="address" class="java.lang.String"/>
            <column name="phoneNumber" class="java.lang.String"/>
            <column name="email" class="java.lang.String"/>
            <column name="coverageName" class="java.lang.String"/>
            <column name="affiliateNumber" class="java.lang.String"/>
            <column name="startDate" class="java.lang.String"/>
            <column name="clinicalSpecialtyId" class="java.lang.Integer"/>
            <column name="clinicalSpecialty" class="java.lang.String"/>
            <column name="professionalId" class="java.lang.Integer"/>
            <column name="professionalName" class="java.lang.String"/>
            <column name="reasons" class="java.lang.String"/>
            <column name="problems" class="java.lang.String"/>
			<column name="procedures" class="java.lang.String"/>
            <column name="weight" class="java.lang.String"/>
            <column name="height" class="java.lang.String"/>
            <column name="systolicBloodPressure" class="java.lang.String"/>
            <column name="diastolicBloodPressure" class="java.lang.String"/>
			<column name="cardiovascularRisk" class="java.lang.String"/>
			<column name="glycosylatedHemoglobin" class="java.lang.String"/>
			<column name="bloodGlucose" class="java.lang.String"/>
			<column name="headCircunference" class="java.lang.String"/>
			<column name="cpo" class="java.lang.String"/>
			<column name="ceo" class="java.lang.String"/>
        </constructor-result>

    </sql-result-set-mapping>

	<sql-result-set-mapping name="ProgramReports.EpidemiologyOneConsultationDetailResult">
		<constructor-result target-class="net.pladema.programreports.repository.EpidemiologyOneConsultationDetail">
			<column name="patientFullName" class="java.lang.String"/>
			<column name="coding" class="java.lang.String"/>
			<column name="birthDate" class="java.lang.String"/>
			<column name="gender" class="java.lang.String"/>
			<column name="startDate" class="java.lang.String"/>
			<column name="department" class="java.lang.String"/>
			<column name="address" class="java.lang.String"/>
			<column name="cie10Codes" class="java.lang.String"/>
			<column name="identificationNumber" class="java.lang.String"/>
			<column name="problems" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="ProgramReports.EpidemiologyTwoConsultationDetailResult">
		<constructor-result target-class="net.pladema.programreports.repository.EpidemiologyTwoConsultationDetail">
			<column name="diagnostic" class="java.lang.String"/>
			<column name="range" class="java.lang.String"/>
			<column name="counter" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="ProgramReports.RecuperoGeneralConsultationDetailResult">
		<constructor-result target-class="net.pladema.programreports.repository.RecuperoGeneralConsultationDetail">
			<column name="institution" class="java.lang.String"/>
			<column name="clinicalSpecialty" class="java.lang.String"/>
			<column name="provider" class="java.lang.String"/>
			<column name="providerDni" class="java.lang.String"/>
			<column name="attentionDate" class="java.lang.String"/>
			<column name="hour" class="java.lang.String"/>
			<column name="consultationNumber" class="java.lang.String"/>
			<column name="patientDni" class="java.lang.String"/>
			<column name="patientName" class="java.lang.String"/>
			<column name="gender" class="java.lang.String"/>
			<column name="birthDate" class="java.lang.String"/>
			<column name="ageTurn" class="java.lang.String"/>
			<column name="ageToday" class="java.lang.String"/>
			<column name="medicalCoverage" class="java.lang.String"/>
			<column name="address" class="java.lang.String"/>
			<column name="location" class="java.lang.String"/>
			<column name="reasons" class="java.lang.String"/>
			<column name="procedures" class="java.lang.String"/>
			<column name="problems" class="java.lang.String"/>
			<column name="medication" class="java.lang.String"/>
			<column name="evolution" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="ProgramReports.SumarGeneralConsultationDetailResult">
		<constructor-result target-class="net.pladema.programreports.repository.SumarGeneralConsultationDetail">
			<column name="institution" class="java.lang.String"/>
			<column name="clinicalSpecialtyId" class="java.lang.Integer"/>
			<column name="clinicalSpecialty" class="java.lang.String"/>
			<column name="professionalId" class="java.lang.Integer"/>
			<column name="provider" class="java.lang.String"/>
			<column name="providerDni" class="java.lang.String"/>
			<column name="attentionDate" class="java.lang.String"/>
			<column name="hour" class="java.lang.String"/>
			<column name="consultationNumber" class="java.lang.String"/>
			<column name="patientDni" class="java.lang.String"/>
			<column name="patientName" class="java.lang.String"/>
			<column name="gender" class="java.lang.String"/>
			<column name="selfPerceivedGender" class="java.lang.String"/>
			<column name="selfPerceivedName" class="java.lang.String"/>
			<column name="birthDate" class="java.lang.String"/>
			<column name="ageTurn" class="java.lang.String"/>
			<column name="ageToday" class="java.lang.String"/>
			<column name="ethnicity" class="java.lang.String"/>
			<column name="medicalCoverage" class="java.lang.String"/>
			<column name="address" class="java.lang.String"/>
			<column name="location" class="java.lang.String"/>
			<column name="educationLevel" class="java.lang.String"/>
			<column name="occupation" class="java.lang.String"/>
			<column name="systolicBloodPressure" class="java.lang.String"/>
			<column name="diastolicBloodPressure" class="java.lang.String"/>
			<column name="meanArterialPressure" class="java.lang.String"/>
			<column name="temperature" class="java.lang.String"/>
			<column name="heartRate" class="java.lang.String"/>
			<column name="respirationRate" class="java.lang.String"/>
			<column name="oxygenSaturationHemoglobin" class="java.lang.String"/>
			<column name="height" class="java.lang.String"/>
			<column name="weight" class="java.lang.String"/>
			<column name="headCircunference" class="java.lang.String"/>
			<column name="reasons" class="java.lang.String"/>
			<column name="procedures" class="java.lang.String"/>
			<column name="problems" class="java.lang.String"/>
			<column name="medication" class="java.lang.String"/>
			<column name="evolution" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="ProgramReports.SumarOdontologicoConsultationDetailResult">
		<constructor-result target-class="net.pladema.programreports.repository.SumarOdontologicoConsultationDetail">
			<column name="institution" class="java.lang.String"/>
			<column name="operativeUnit" class="java.lang.String"/>
			<column name="provider" class="java.lang.String"/>
			<column name="providerDni" class="java.lang.String"/>
			<column name="attentionDate" class="java.lang.String"/>
			<column name="consultationNumber" class="java.lang.String"/>
			<column name="patientDni" class="java.lang.String"/>
			<column name="patientName" class="java.lang.String"/>
			<column name="gender" class="java.lang.String"/>
			<column name="selfPerceivedGender" class="java.lang.String"/>
			<column name="selfPerceivedName" class="java.lang.String"/>
			<column name="birthDate" class="java.lang.String"/>
			<column name="ageTurn" class="java.lang.String"/>
			<column name="ageToday" class="java.lang.String"/>
			<column name="ethnicity" class="java.lang.String"/>
			<column name="medicalCoverage" class="java.lang.String"/>
			<column name="indexCpo" class="java.lang.String"/>
			<column name="indexCeo" class="java.lang.String"/>
			<column name="permanentTeethPresent" class="java.lang.String"/>
			<column name="temporaryTeethPresent" class="java.lang.String"/>
			<column name="address" class="java.lang.String"/>
			<column name="location" class="java.lang.String"/>
			<column name="educationLevel" class="java.lang.String"/>
			<column name="occupation" class="java.lang.String"/>
			<column name="reasons" class="java.lang.String"/>
			<column name="procedures" class="java.lang.String"/>
			<column name="problems" class="java.lang.String"/>
			<column name="medication" class="java.lang.String"/>
			<column name="evolution" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="ProgramReports.RecuperoOdontologicoConsultationDetailResult">
		<constructor-result target-class="net.pladema.programreports.repository.RecuperoOdontologicoConsultationDetail">
			<column name="institution" class="java.lang.String"/>
			<column name="operativeUnit" class="java.lang.String"/>
			<column name="lender" class="java.lang.String"/>
			<column name="identificationNumber" class="java.lang.String"/>
			<column name="attentionDate" class="java.lang.String"/>
			<column name="hour" class="java.lang.String"/>
			<column name="patientIdentificationNumber" class="java.lang.String"/>
			<column name="patientName" class="java.lang.String"/>
			<column name="gender" class="java.lang.String"/>
			<column name="birthDate" class="java.lang.String"/>
			<column name="ageTurn" class="java.lang.String"/>
			<column name="medicalCoverage" class="java.lang.String"/>
			<column name="address" class="java.lang.String"/>
			<column name="location" class="java.lang.String"/>
			<column name="cpo" class="java.lang.String"/>
			<column name="ceo" class="java.lang.String"/>
			<column name="reasons" class="java.lang.String"/>
			<column name="procedures" class="java.lang.String"/>
			<column name="odontologyProcedures" class="java.lang.String"/>
			<column name="problems" class="java.lang.String"/>
			<column name="odontologyDiagnosis" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>

</entity-mappings>