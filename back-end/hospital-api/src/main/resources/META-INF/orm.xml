<entity-mappings
        version="2.1" xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm
    http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd">

    <!-- JPA Named Native Queries -->

    <!-- ========================================== -->
    <!-- ====== Historia clínica electrónica ====== -->
    <!-- ========================================== -->

    <named-native-query name="HCE.findAllMedications" result-set-mapping="HCE.findAllMedicationsResult">
        <query>with temporal as (
            SELECT DISTINCT
            ms.id as medicationStatementId, ms.snomed_id, ms.status_id, ms.created_on, ms.updated_on,
            dsg.*,
            row_number() OVER (PARTITION by ms.snomed_id ORDER BY ms.updated_on desc) AS rw
            FROM document d
            JOIN document_medicamention_statement dms ON d.id = dms.document_id
            JOIN medication_statement ms ON dms.medication_statement_id = ms.id
            LEFT JOIN dosage dsg ON ms.dosage_id = dsg.id
            WHERE ms.patient_id = :patientId
            AND d.type_id IN :documentTypeId
            AND d.status_id = :documentStatusId
            )
            SELECT  t.medicationStatementId AS id , s.sctid AS sctidCode, s.pt AS sctidTerm, status_id AS status,
            t.sequence, t.count, t.duration, t.duration_unit, t.frequency, t.period_unit,
            coalesce(t.start_date, t.created_on) as effectiveTime, t.end_date
            FROM temporal t
            JOIN snomed s ON t.snomed_id = s.id
            WHERE rw = 1 AND status_id = :statusId
            ORDER BY t.updated_on
        </query>
    </named-native-query>

    <named-native-query name="HCE.getDocumentReference" result-set-mapping="HCE.getDocumentReferenceResult">
        <query>
            select pat.id, first_name, middle_names, last_name, bool_and(op.id is not null) as hasDocuments
            from patient pat
            join person per on ( pat.person_id = per.id )
            left join outpatient_consultation op on ( pat.id = op.patient_id )
            where pat.id = :patientId
            group by pat.id, first_name, middle_names, last_name
        </query>
    </named-native-query>

    <named-native-query name="HCE.getPatient" result-set-mapping="HCE.getPatientResult">
        <query>
            select p.first_name, p.middle_names, p.last_name, p.other_last_names, pe.mothers_last_name,
            p.identification_number, p.gender_id, p.birth_date, pe.phone_number, pe.address_id
            from patient pat
            join person p on ( pat.person_id = p.id )
            left join person_extended pe on ( p.id = pe.person_id )
            where pat.id = :patientId
        </query>
    </named-native-query>

    <named-native-query name="HCE.getAddress">
        <query>
            select a.street, a.number, a.floor, a.apartment, a.postcode,
            ci.description as city, p.description as province, co.description as country
            from address a
            left join city ci on ( a.city_id = ci.id )
            left join department d on ( ci.department_id = d.id )
            left join province p on ( d.province_id = p.id )
            left join country co on ( p.country_id = co.id )
            where a.id = :addressId
        </query>
    </named-native-query>

    <named-native-query name="HCE.findAllCondition" result-set-mapping="HCE.findAllConditionResult">
        <query>
            WITH t AS(
            SELECT hc.id, snomed_id, hc.status_id, verification_status_id, start_date, severity,
            hc.created_on, hc.updated_on,
            row_number() over (partition by snomed_id order by hc.updated_on desc) as rw
            FROM document d
            JOIN document_health_condition dhc on d.id = dhc.document_id
            JOIN health_condition hc on dhc.health_condition_id = hc.id
            WHERE d.status_id = :docStatusId
            AND d.type_id = :documentTypeId
            AND hc.patient_id = :patientId
            AND hc.problem_id IN :diagnosisId
            )
            SELECT t.id as id, s.sctid as code, s.pt as term, t.status_id as clinical_status,
            t.verification_status_id, t.start_date, t.severity, t.created_on
            FROM t
            JOIN snomed s ON snomed_id = s.id
            WHERE rw = 1
            AND NOT verification_status_id = :statusId
        </query>
    </named-native-query>

    <named-native-query name="HCE.findAllImmunizations" result-set-mapping="HCE.findAllImmunizationsResult">
        <query>
            WITH t AS (
            SELECT inm.id, snomed_id, inm.status_id, administration_date, expiration_date, inm.created_on, inm.updated_on,
            row_number() over (partition by snomed_id, administration_date order by inm.updated_on desc) as rw
            FROM document d
            JOIN document_inmunization di on d.id = di.document_id
            JOIN inmunization inm on di.inmunization_id = inm.id
            WHERE d.status_id = :docStatusId
            AND d.type_id IN :documentTypeId
            AND inm.patient_id = :patientId
            )
            SELECT t.id as id, s.sctid as code, s.pt as term, status_id, administration_date, created_on, expiration_date
            FROM t
            JOIN snomed s ON t.snomed_id = s.id
            WHERE rw = 1 AND NOT status_id = :statusId
            ORDER BY t.updated_on DESC
        </query>
    </named-native-query>

    <named-native-query name="HCE.findAllAllergies" result-set-mapping="HCE.findAllAllergiesResult">
        <query>
            with temporal as (
            SELECT DISTINCT ai.id, ai.snomed_id, ai.status_id, ai.verification_status_id,
            ai.category_id, ai.criticality, ai.start_date, ai.updated_on,
            row_number() over (partition by ai.snomed_id order by ai.updated_on desc) as rw
            FROM document d
            JOIN document_allergy_intolerance dai ON d.id = dai.document_id
            JOIN allergy_intolerance ai ON dai.allergy_intolerance_id = ai.id
            WHERE d.type_id = :documentTypeId
            AND d.status_id = :documentStatusId
            AND ai.patient_id = :patientId
            )
            SELECT t.id AS id, s.sctid AS code, s.pt as term, t.status_id, t.verification_status_id,
            t.category_id, t.criticality, t.start_date
            FROM temporal t
            JOIN snomed s ON t.snomed_id = s.id
            WHERE rw = 1 AND NOT status_id = :allergyIntoleranceStatus
            ORDER BY t.updated_on desc
        </query>
    </named-native-query>

    <named-native-query name="HCE.getOrganization" result-set-mapping="HCE.getOrganizationResult">
        <query>
            select distinct sisa_code, name, phone_number, address_id
            from institution i
            where id = (
            select distinct institution_id
            from (
            select institution_id from internment_episode ie where patient_id = :patientId
            union
            select institution_id from outpatient_consultation oc where patient_id = :patientId
            ) as subquery
            limit 1)
        </query>
    </named-native-query>

    <!-- ========================================== -->
    <!-- ================ Reports ================= -->
    <!-- ========================================== -->

    <named-native-query name="Reports.ConsultationSummary" result-set-mapping="Reports.OutpatientSummaryResult">
        <query>SELECT oc.doctor_id as professional_id,
            cs.id as specialty_id, cs."name" as specialty, cs.clinical_specialty_type_id as specialtyType,
            extract(year from (age(oc.start_date, per.birth_date))) as "age", per.gender_id,
            CASE WHEN oc.patient_medical_coverage_id is null THEN false ELSE true END as "OS"
            FROM outpatient_consultation oc
            LEFT JOIN clinical_specialty cs on (oc.clinical_specialty_id = cs.id)
            JOIN patient pat on (oc.patient_id = pat.id)
            JOIN person per on (pat.person_id = per.id)
            WHERE oc.institution_id = :institutionId
            AND oc.start_date between :from and :to
            AND oc.billable
            UNION ALL
            SELECT vc.doctor_id as professional_id,
            cs.id as specialty_id, cs."name" as specialty, cs.clinical_specialty_type_id as specialtyType,
            extract(year from (age(vc.performed_date, per.birth_date))) as "age", per.gender_id,
            CASE WHEN vc.patient_medical_coverage_id is null THEN false ELSE true END as "OS"
            FROM vaccine_consultation vc
            LEFT JOIN clinical_specialty cs on (vc.clinical_specialty_id = cs.id)
            JOIN patient pat on (vc.patient_id = pat.id)
            JOIN person per on (pat.person_id = per.id)
            WHERE vc.institution_id = :institutionId
            AND vc.performed_date between :from and :to
            AND vc.billable
        </query>
    </named-native-query>

    <named-native-query name="Reports.ConsultationDetail" result-set-mapping="Reports.ConsultationDetailResult">
        <query>WITH consultation AS (
            SELECT  oc.institution_id, oc.patient_id, oc.patient_medical_coverage_id, oc.clinical_specialty_id,
            oc.doctor_id, oc.start_date as start_date, ocr.reasons as reasons,  prob.descriptions as problems,
            vs.weight, vs.height, vs.systolic as systolicBloodPressure, vs.diastolic as diastolicBloodPressure,
            'outpatient' as consultation_type
            FROM outpatient_consultation oc
            LEFT JOIN (
            SELECT ocr.outpatient_consultation_id as id, STRING_AGG(r.description, ', ') as reasons
            FROM outpatient_consultation_reasons ocr
            JOIN reasons r ON (ocr.reason_id = r.id)
            GROUP BY ocr.outpatient_consultation_id
            ) ocr ON (oc.id = ocr.id )
            LEFT JOIN (
            SELECT oc.id, STRING_AGG(sno.pt, ', ') as descriptions
            FROM outpatient_consultation oc
            JOIN document doc ON (oc.document_id = doc.id)
            JOIN document_health_condition dhc ON (doc.id = dhc.document_id)
            JOIN health_condition hc ON (dhc.health_condition_id = hc.id)
            JOIN snomed sno ON (hc.snomed_id = sno.id)
            WHERE hc.problem_id IN (:problemTypes)
            GROUP BY oc.id
            ) prob ON (oc.id = prob.id)
            LEFT JOIN (
            SELECT oc.id,
            MAX(CASE WHEN ovs.loinc_code='8480-6' THEN ovs.value END) as systolic,
            MAX(CASE WHEN ovs.loinc_code='8462-4' THEN ovs.value END) as diastolic,
            MAX(CASE WHEN ovs.loinc_code='8302-2' THEN ovs.value END) as height,
            MAX(CASE WHEN ovs.loinc_code='29463-7' THEN ovs.value END) as weight
            FROM outpatient_consultation oc
            LEFT JOIN document_vital_sign dvs ON (oc.document_id = dvs.document_id)
            LEFT JOIN observation_vital_sign ovs ON (dvs.observation_vital_sign_id = ovs.id)
            GROUP BY oc.id
            ORDER BY oc.id
            ) vs ON (oc.id = vs.id)
            WHERE oc.institution_id = :institutionId
            AND oc.billable = true
            AND oc.start_date BETWEEN :startDate AND :endDate
            UNION ALL
            SELECT vc.institution_id, vc.patient_id, vc.patient_medical_coverage_id, vc.clinical_specialty_id,
            vc.doctor_id, vc.performed_date as start_date, NULL AS reasons,  NULL AS problems,
            NULL AS weight, NULL AS height, NULL AS systolicBloodPressure, NULL AS diastolicBloodPressure,
            'vaccine' as consultation_type
            FROM vaccine_consultation vc
            WHERE vc.institution_id = :institutionId
            AND vc.billable = true
            AND vc.performed_date BETWEEN :startDate AND :endDate
            )
            SELECT p.description as province, d.description as department, i.sisa_code as sisaCode, i.name as institution,
            CONCAT(pe.last_name, ' ', pe.other_last_names) as patientSurname,
            CONCAT(pe.first_name, ' ', pe.middle_names) as patientFirstName,
            it.description as identificationType, pe.identification_number as identificationNumber,
            to_char(pe.birth_date,'DD/MM/YYYY') as birthDate,  g.description as gender,
            CONCAT(a2.street, ' ', a2.number, ' ', a2.floor, ' ', a2.apartment, ' ', c2.description) as address,
            px.phone_number as phoneNumber, px.email as email,
            coverage.coverageName, coverage.affiliateNumber,
            to_char(cst.start_date,'DD/MM/YYYY') as startDate,
            cs.id as clinicalSpecialtyId, cs.name as clinicalSpecialty,
            hp.id as professionalId,
            CONCAT(p2.last_name, ' ', p2.other_last_names, ' ',p2.first_name, ' ', p2.middle_names) as professionalName,
            cst.reasons as reasons,  cst.problems,
            cst.weight, cst.height, cst.systolicBloodPressure, cst.diastolicBloodPressure
            FROM consultation cst
            JOIN institution i ON (cst.institution_id = i.id)
            JOIN address a ON (i.address_id = a.id)
            LEFT JOIN city c ON (a.city_id = c.id)
            JOIN department d ON (c.department_id = d.id)
            JOIN province p ON (d.province_id = p.id)
            JOIN patient pa ON (cst.patient_id = pa.id)
            JOIN person pe ON (pa.person_id = pe.id)
            LEFT JOIN identification_type it ON (pe.identification_type_id = it.id)
            LEFT JOIN person_extended px ON (px.person_id = pe.id)
            LEFT JOIN gender g ON (px.gender_self_determination = g.id)
            LEFT JOIN address a2 ON (px.address_id = a2.id)
            LEFT JOIN city c2 ON (a2.city_id = c2.id)
            LEFT JOIN (
            select pmc.id, mc."name" AS coverageName, affiliate_number AS affiliateNumber
            from patient_medical_coverage pmc
            join medical_coverage mc on (pmc.medical_coverage_id = mc.id)
            ) coverage ON (cst.patient_medical_coverage_id = coverage.id)
            LEFT JOIN clinical_specialty cs ON (cst.clinical_specialty_id = cs.id)
            JOIN healthcare_professional hp ON (cst.doctor_id = hp.id)
            JOIN person p2 ON (hp.person_id = p2.id)
        </query>
    </named-native-query>

	<named-native-query name="ProgramReports.ConsultationDetailEpiI" result-set-mapping="ProgramReports.ConsultationDetailEpiIResult">
		<query>
			SELECT CONCAT(pe.last_name, ' ', pe.other_last_names, ' ', pe.first_name, ' ', pe.middle_names) as patientFullName,
			CONCAT(substring(pe.last_name, 1, 3), substring(pe.first_name, 1, 2)) as coding,
			to_char(pe.birth_date, 'DD/MM/YYYY') as birthDate, g.description as gender,
			to_char(hc.created_on, 'DD/MM/YYYY') as startDate, dep.description as department,
			CONCAT(ci.description, ' - ', a.street, ' N° ', a.number, case when a.floor is not null then concat(' Piso: ', a.floor, 'Departamento: ', a.apartment) end) as address,
			hc.cie10_codes as cie10Codes,
			CONCAT(it.description, ' ', pe.identification_number) as identificationNumber, s.pt as problems
			FROM health_condition hc
			INNER JOIN patient pa ON hc.patient_id=pa.id
			LEFT JOIN document_health_condition dhe ON dhe.health_condition_id=hc.id
			LEFT JOIN document dd ON dhe.document_id=dd.id
			LEFT JOIN outpatient_consultation oc ON oc.document_id=dd.id
			LEFT JOIN institution ins ON oc.institution_id=ins.id
			INNER JOIN person pe ON pa.person_id=pe.id
			INNER JOIN identification_type it ON pe.identification_type_id=it.id
			INNER JOIN gender g ON pe.gender_id=g.id
			LEFT JOIN person_extended pex ON pex.person_id=pe.id
			LEFT JOIN address a ON pex.address_id=a.id
			LEFT JOIN city ci ON a.city_id=ci.id
			LEFT JOIN department dep ON ci.department_id=dep.id
			INNER JOIN snomed s ON hc.snomed_id=s.id
			INNER JOIN problem_type pt ON hc.problem_id=pt.id
			WHERE (pt.id='55607006' OR pt.id='439401001')
			AND ins.id = :institutionId
			AND hc.status_id='55561003'
			AND hc.verification_status_id='59156000'
			AND (s.sctid='1119303003' OR s.sctid='840539006' OR s.sctid='409671005' OR s.sctid='409676000' OR s.sctid='409677009' OR s.sctid='409678004' OR s.sctid='409679007' OR s.sctid='866057003'
			OR LOWER(s.pt) LIKE '%botulismo%' OR LOWER(s.pt) LIKE '%brote de enfermedad%' OR LOWER(s.pt) LIKE '%carbunco humano%' OR LOWER(s.pt) LIKE '%colera%'
			OR LOWER(s.pt) LIKE '%coqueluche%' OR LOWER(s.pt) LIKE '%difteria%' OR LOWER(s.pt) LIKE '%encefalopatía%' OR LOWER(s.pt) LIKE '%encefalitis%'
			OR LOWER(s.pt) LIKE '%fiebre del nilo%' OR LOWER(s.pt) LIKE '%fiebre amarilla%' OR LOWER(s.pt) LIKE '%fiebre hemorrágica%' OR LOWER(s.pt) LIKE '%fiebre recurrente%'
			OR LOWER(s.pt) LIKE '%fiebre tifoidea%' OR LOWER(s.pt) LIKE '%fiebre paratifoidea%' OR LOWER(s.pt) LIKE '%gripe humana%' OR LOWER(s.pt) LIKE '%hantavirosis%'
			OR (LOWER(s.pt) LIKE '%hepatitis%' AND NOT(LOWER(s.pt) LIKE '%hepatitis c%') AND NOT(LOWER(s.pt) LIKE '%hepatitis b%') AND NOT(LOWER(s.pt) LIKE '%hepatitis d%') AND NOT(LOWER(s.pt) LIKE '%hepatitis e%'))
			OR LOWER(s.pt) LIKE '%intoxicación%moluscos%' OR LOWER(s.pt) LIKE '%leishmaniasis visceral%' OR LOWER(s.pt) LIKE '%lepra%' OR LOWER(s.pt) LIKE '%leptospirosis%'
			OR LOWER(s.pt) LIKE '%meningoencefalitis%' OR LOWER(s.pt) LIKE '%mening%micótica%' OR LOWER(s.pt) LIKE '%mening%parasitaria%'OR LOWER(s.pt) LIKE '%meningococcemia%'
			OR LOWER(s.pt) LIKE '%mening%tubercul%' OR LOWER(s.pt) LIKE '%paludismo%' OR LOWER(s.pt) LIKE '%peste%' OR LOWER(s.pt) LIKE '%poliomielitis%'
			OR LOWER(s.pt) LIKE '%psitacosis%' OR LOWER(s.pt) LIKE '%rabia%' OR LOWER(s.pt) LIKE '%rubeola%' OR LOWER(s.pt) LIKE '%sarampión%' OR LOWER(s.pt) LIKE '%síndr%urémico%hemol%'
			OR LOWER(s.pt) LIKE '%síndr%guillén barré%' OR LOWER(s.pt) LIKE '%síndrome respiratorio agudo severo%' OR LOWER(s.pt) LIKE '%sars%' OR LOWER(s.pt) LIKE '%tétano%'
			OR LOWER(s.pt) LIKE '%tifus%' OR LOWER(s.pt) LIKE '%triquinosis%' OR LOWER(s.pt) LIKE '%viruela%')
		</query>
	</named-native-query>

	<named-native-query name="ProgramReports.ConsultationDetailEpiII" result-set-mapping="ProgramReports.ConsultationDetailEpiIIResult">
		<query>
			WITH people AS (
			SELECT hc.id AS id, CONCAT(pe.last_name, ' ', pe.other_last_names, ' ', pe.first_name, ' ', pe.middle_names),
			CONCAT(substring(pe.last_name, 1, 3), substring(pe.first_name, 1, 2)), pe.birth_date, g.description,
			CASE
			WHEN (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pe.birth_date)) &lt; 0 then
			((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pe.birth_date)) -1)
			ELSE ((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pe.birth_date)))
			end AS anios,
			CASE
			WHEN (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pe.birth_date)) &lt; 0 then
			(12 +(EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pe.birth_date)))
			ELSE ((EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pe.birth_date)))
			end as meses,
			hc.created_on, dep.description, CONCAT(ci.description, ' - ', a.street, ' N° ', a.number, CASE WHEN a.floor is not null then CONCAT(' Piso: ', a.floor, 'Departamento: ', a.apartment) end), hc.cie10_codes as CIE10,
			CONCAT(it.description, ' ', pe.identification_number), s.sctid as snomed, s.pt as term
			FROM health_condition hc INNER JOIN patient pa on hc.patient_id=pa.id
			LEFT JOIN document_health_condition dhe ON dhe.health_condition_id=hc.id
			LEFT JOIN document dd on dhe.document_id=dd.id
			LEFT JOIN outpatient_consultation oc ON oc.document_id=dd.id
			LEFT JOIN institution ins on oc.institution_id=ins.id
			INNER JOIN person pe on pa.person_id=pe.id
			INNER JOIN identification_type it on pe.identification_type_id=it.id
			INNER JOIN gender g on pe.gender_id=g.id
			LEFT JOIN person_extended pex on pex.person_id=pe.id
			LEFT JOIN address a on pex.address_id=a.id
			LEFT JOIN city ci on a.city_id=ci.id
			LEFT JOIN department dep on ci.department_id=dep.id
			INNER JOIN snomed s on hc.snomed_id=s.id
			INNER JOIN problem_type pt on hc.problem_id=pt.id
			WHERE ins.id= :institutionId AND (pt.id='55607006' OR pt.id='439401001') AND hc.status_id='55561003' AND hc.verification_status_id='59156000'
			AND oc.institution_id= :institutionId),
			data_ep AS (
			SELECT *,
			CASE
			WHEN anios&lt;1 AND meses&lt;6 then '(&lt;6)'
			WHEN anios&lt;1 AND meses>=6 AND meses &lt;=11 then '[6-11]'
			WHEN anios&lt;1 AND meses>=12 AND meses &lt;=23 then '[12-23]'
			WHEN anios>=2 AND anios&lt;=4 then '[2-4]'
			WHEN anios>=5 AND anios&lt;=9 then '[5-9]'
			WHEN anios>=10 AND anios&lt;=14 then '[10-14]'
			WHEN anios>=15 AND anios&lt;=19 then '[15-19]'
			WHEN anios>=20 AND anios&lt;=24 then '[20-24]'
			WHEN anios>=25 AND anios&lt;=34 then '[25-34]'
			WHEN anios>=35 AND anios&lt;=44 then '[35-44]'
			WHEN anios>=45 AND anios&lt;=64 then '[45-64]'
			WHEN anios>=65 AND anios&lt;=74 then '[65-74]'
			WHEN anios>75 then '(>75)'
			end AS grupo
			FROM people
			)
			SELECT CONCAT(term, ' (CIE10:', CIE10, ')') as diagnostic, grupo as rango, count(id) as contador
			FROM data_ep
			WHERE lower(term) like '%influenza%' or lower(term) like '%gripe%' or lower(term) like '%gripal%' or lower(term) like '%virosis respiratoria%' or lower(term) like '%virus sincicial respiratorio%' or lower(term) like '%adenovirus%' or lower(term) like '%neumonía%' or lower(term) like '%neuropatía%' or lower(term) like '%neumonítis%' or lower(term) like '%neumónico%'
			or lower(term) like '%pulmonía%' or lower(term) like '%bronquilitis%' or lower(term) like '%ETS%' or lower(term) like '%H1N1%' or lower(term) like '%diarrea%' or lower(term) like '%gastroenteritis%' or lower(term) like '%enteritis%' or lower(term) like '%colitis%' or lower(term) like '%diarreico%'  or lower(term) like '%diabetes%'
			or lower(term) like '%accidente%' or lower(term) like '%alcoholismo%' or lower(term) like '%escorpion%' or lower(term) like '%araña%' or lower(term) like '%bronquitis%' or lower(term) like '%brucelosis%' or lower(term) like '%cancer%' or lower(term) like '%catarro%' or lower(term) like '%chagas%' or lower(term) like '%desnutrición%'
			or lower(term) like '%encefalitis%' or lower(term) like '%enteroparasitosis%' or lower(term) like '%escabiosis%' or lower(term) like '%escarlatina%' or lower(term) like '%envenenamiento%animales%venenosos%' or lower(term) like '%fiebre reumatica%' or lower(term) like '%giardiasis%'
			or lower(term) like '%hepatitis b%' or lower(term) like '%hepatitis c%' or lower(term) like '%hepatitis d%' or lower(term) like '%hepatitis e%' or lower(term) like '%helmintiatis%' or lower(term) like '%hidatidosis%' or lower(term) like '%hipertensión arterial%' or lower(term) like '%hipertiroidismo%'
			or lower(term) like '%hipotiroidismo%' or lower(term) like '%HIV%' or lower(term) like '%infección%' or (lower(term) like '%intoxicación%' AND not(lower(term) like '%moluscos%')) or lower(term) like '%irag%' or lower(term) like '%lesiones%'
			or lower(term) like '%leishmaniasis cutánea%' or lower(term) like '%leishmaniasis mucosa%' or lower(term) like '%lupus%' or lower(term) like '%meningitis%' or lower(term) like '%micosis%' or lower(term) like '%mielitis transversa%' or lower(term) like '%mononucleosis%'
			or lower(term) like '%obesidad%' or lower(term) like '%ofidismo%' or lower(term) like '%parotiditis%' or lower(term) like '%pediculosis%' or lower(term) like '%mordida%' or lower(term) like '%picadura%' or lower(term) like '%piodermitis%' or lower(term) like '%polineuritis%'
			or lower(term) like '%salmonellosis%' or lower(term) like '%sida%' or lower(term) like '%sífilis%' or lower(term) like '%síndrome febril%' or lower(term) like '%supuración genital%' or lower(term) like '%toxinfección%' or lower(term) like '%toxoplasmosis%' or lower(term) like '%tuberculosis%'
			or lower(term) like '%varicela%' or lower(term) like '%defunción%'
			group by diagnostic, rango

		</query>
	</named-native-query>
	
	<named-native-query name="ProgramReports.ConsultationDetailRecupero" result-set-mapping="ProgramReports.ConsultationDetailRecuperoResult">
		<query>
			WITH signos_vitales as(
			SELECT d.id as id_doc, s.id, s.pt as name, ovs.value as value
			FROM document d INNER JOIN document_vital_sign dvs on dvs.document_id=d.id INNER JOIN observation_vital_sign ovs on dvs.observation_vital_sign_id=ovs.id
			INNER JOIN snomed s on ovs.snomed_id=s.id
			), procedimientos as(
			SELECT dp.document_id as document_id, s.pt as pt, ps.description as description, s.sctid as sctid FROM document_procedure dp
			INNER JOIN procedures proc on dp.procedure_id=proc.id
			INNER JOIN procedures_status ps on proc.status_id=ps.id
			INNER JOIN snomed s on proc.snomed_id=s.id
			WHERE ps.description&lt;>'Ingresado por error' and ps.description&lt;>'Desconocido'
			), medicacion as (
			SELECT dms.document_id, s.pt, s.sctid FROM document_medicamention_statement dms
			INNER JOIN medication_statement ms on dms.medication_statement_id=ms.id
			INNER JOIN medication_statement_status mss on ms.status_id=mss.id
			INNER JOIN snomed s on ms.snomed_id=s.id
			), problemas as(
			SELECT dhc.document_id, s.sctid, concat(s.pt,' (',ccs.description,' &amp; ',cvs.description,' - Fecha: ',hc.start_date ,')') as description FROM document_health_condition dhc
			INNER JOIN health_condition hc on dhc.health_condition_id=hc.id
			INNER JOIN problem_type pt on hc.problem_id=pt.id
			INNER JOIN snomed s on hc.snomed_id=s.id
			INNER JOIN condition_clinical_status ccs on hc.status_id=ccs.id
			INNER JOIN condition_verification_status cvs on hc.verification_status_id=cvs.id
			WHERE ccs.id&lt;>'723510000'
			)
			SELECT cs.name as operativeUnit,
			concat(p.first_name, ' ', p.middle_names, ' ', p.last_name, ' ', p.other_last_names) as provider,
			p.identification_number as providerDni,
			oc.start_date as attentionDate,
			(row_number() over(partition by oc.doctor_id order by oc.start_date)) as consultationNumber,
			pp.identification_number as patientDni,
			concat(pp.first_name , ' ', pp.last_name) as patientName,
			g.description as gender,
			gg.description as selfPerceivedGender,
			pe.name_self_determination as selfPerceivedName,
			pp.birth_date as birthDate,
			CASE
			WHEN (EXTRACT(MONTH FROM oc.start_date) - EXTRACT(MONTH FROM pp.birth_date)) &lt; 0 then
			concat((EXTRACT(YEAR FROM oc.start_date) - EXTRACT(YEAR FROM pp.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM oc.start_date) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			else concat((EXTRACT(YEAR FROM oc.start_date) - EXTRACT(YEAR FROM pp.birth_date)), ' Años, ', (EXTRACT(MONTH FROM oc.start_date) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			end as ageTurn,
			CASE
			WHEN (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)) &lt; 0 then
			concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pp.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			else concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pp.birth_date)), ' Años, ', (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			end as ageToday,
			et.pt as ethnicity,
			(SELECT string_agg(concat(mc.name, '(RNOS: ', hi.rnos, ')'), ', ') FROM patient_medical_coverage pmc LEFT JOIN medical_coverage mc on pmc.medical_coverage_id=mc.id LEFT JOIN health_insurance hi on hi.id=mc.id WHERE pmc.patient_id=pa.id) as medicalCoverage,
			concat(a.street, ' N° ', a.number, CASE WHEN a.floor is not null then concat(' Piso: ', a.floor, 'Departamento: ', a.apartment) end) as address,
			c.description as location,
			ed.description as educationLevel,
			lab.description as occupation,
			sv_ps.value as systolicBloodPressure,
			sv_pd.value as diastolicBloodPressure,
			sv_pam.value as meanArterialPressure,
			sv_t.value as temperature,
			sv_fc.value as heartRate,
			sv_fr.value as respirationRate,
			sv_sh.value as oxygenSaturationHemoglobin,
			sv_h.value as height,
			sv_p.value as weight,
			sv_idh.value as bmi,
			(SELECT string_agg(r.description, ', ') FROM outpatient_consultation_reasons ocr INNER JOIN reasons r on ocr.reason_id=r.id WHERE ocr.outpatient_consultation_id=oc.id) as reasons,
			(SELECT string_agg(concat(proc.pt, '(', proc.description, ' | SNOMED: ', proc.sctid, ')'), ', ') FROM procedimientos proc WHERE proc.document_id=d.id) as procedures,
			(SELECT string_agg(concat(prob.description, '[SNOMED: ', prob.sctid, ']'), ', ') FROM problemas prob WHERE prob.document_id=d.id) as problems,
			(SELECT string_agg(concat(med.pt, '(SNOMED:', med.sctid, ')'), ', ') FROM medicacion med WHERE med.document_id=d.id) as medication,
			(SELECT string_agg(ev.description, ', ') FROM note ev WHERE d.other_note_id=ev.id) as evolution
			FROM outpatient_consultation oc
			LEFT JOIN institution ins on oc.institution_id=ins.id
			LEFT JOIN clinical_specialty cs on oc.clinical_specialty_id=cs.id
			LEFT JOIN healthcare_professional hp ON oc.doctor_id=hp.id
			INNER JOIN person p on hp.person_id=p.id
			LEFT JOIN patient pa on oc.patient_id=pa.id
			INNER JOIN person pp on pa.person_id=pp.id
			LEFT JOIN person_extended pe on pe.person_id=pp.id
			LEFT JOIN ethnicity et on pe.ethnicity_id=et.id
			LEFT JOIN education_level ed on pe.education_level_id=ed.id
			LEFT JOIN occupation lab on pe.occupation_id=lab.id
			INNER JOIN gender g on pp.gender_id=g.id
			LEFT JOIN gender gg on pe.gender_self_determination=gg.id
			LEFT JOIN patient_medical_coverage pmc ON pmc.patient_id=pa.id
			LEFT JOIN medical_coverage mc on pmc.medical_coverage_id=mc.id
			LEFT JOIN address a on pe.address_id=a.id
			LEFT JOIN city c on a.city_id=c.id
			LEFT JOIN document d on oc.document_id=d.id
			LEFT JOIN signos_vitales sv_ps on sv_ps.id_doc=oc.document_id and sv_ps.id=1
			LEFT JOIN signos_vitales sv_pd on sv_pd.id_doc=oc.document_id and sv_pd.id=2
			LEFT JOIN signos_vitales sv_pam on sv_pam.id_doc=oc.document_id and sv_pam.id=3
			LEFT JOIN signos_vitales sv_t on sv_t.id_doc=oc.document_id and sv_t.id=4
			LEFT JOIN signos_vitales sv_fc on sv_fc.id_doc=oc.document_id and sv_fc.id=5
			LEFT JOIN signos_vitales sv_fr on sv_fr.id_doc=oc.document_id and sv_fr.id=6
			LEFT JOIN signos_vitales sv_sh on sv_sh.id_doc=oc.document_id and sv_sh.id=7
			LEFT JOIN signos_vitales sv_h on sv_h.id_doc=oc.document_id and sv_h.id=8
			LEFT JOIN signos_vitales sv_p on sv_p.id_doc=oc.document_id and sv_p.id=9
			LEFT JOIN signos_vitales sv_idh on sv_idh.id_doc=oc.document_id and sv_idh.id=10
			WHERE ins.id= :institutionId AND (pmc.id is not null AND NOT (lower(mc.name) like '%sumar%')) AND oc.institution_id= :institutionId
			ORDER BY oc.created_on
		</query>
	</named-native-query>
	
	<named-native-query name="ProgramReports.ConsultationDetailSumar" result-set-mapping="ProgramReports.ConsultationDetailRecuperoResult">
		<query>
			WITH signos_vitales as(
			SELECT d.id as id_doc, s.id, s.pt as name, ovs.value as value
			FROM document d INNER JOIN document_vital_sign dvs on dvs.document_id=d.id INNER JOIN observation_vital_sign ovs on dvs.observation_vital_sign_id=ovs.id
			INNER JOIN snomed s on ovs.snomed_id=s.id
			), procedimientos as(
			SELECT dp.document_id as document_id, s.pt as pt, ps.description as description, s.sctid as sctid FROM document_procedure dp
			INNER JOIN procedures proc on dp.procedure_id=proc.id
			INNER JOIN procedures_status ps on proc.status_id=ps.id
			INNER JOIN snomed s on proc.snomed_id=s.id
			WHERE ps.description&lt;>'Ingresado por error' and ps.description&lt;>'Desconocido'
			), medicacion as (
			SELECT dms.document_id, s.pt, s.sctid FROM document_medicamention_statement dms
			INNER JOIN medication_statement ms on dms.medication_statement_id=ms.id
			INNER JOIN medication_statement_status mss on ms.status_id=mss.id
			INNER JOIN snomed s on ms.snomed_id=s.id
			), problemas as(
			SELECT dhc.document_id, s.sctid, concat(s.pt,' (',ccs.description,' &amp; ',cvs.description,' - Fecha: ',hc.start_date ,')') as description FROM document_health_condition dhc
			INNER JOIN health_condition hc on dhc.health_condition_id=hc.id
			INNER JOIN problem_type pt on hc.problem_id=pt.id
			INNER JOIN snomed s on hc.snomed_id=s.id
			INNER JOIN condition_clinical_status ccs on hc.status_id=ccs.id
			INNER JOIN condition_verification_status cvs on hc.verification_status_id=cvs.id
			WHERE ccs.id&lt;>'723510000'
			)
			SELECT cs.name as operativeUnit,
			concat(p.first_name, ' ', p.middle_names, ' ', p.last_name, ' ', p.other_last_names) as provider,
			p.identification_number as providerDni,
			oc.start_date as attentionDate,
			(row_number() over(partition by oc.doctor_id order by oc.start_date)) as consultationNumber,
			pp.identification_number as patientDni,
			concat(pp.first_name , ' ', pp.last_name) as patientName,
			g.description as gender,
			gg.description as selfPerceivedGender,
			pe.name_self_determination as selfPerceivedName,
			pp.birth_date as birthDate,
			CASE
			WHEN (EXTRACT(MONTH FROM oc.start_date) - EXTRACT(MONTH FROM pp.birth_date)) &lt; 0 then
			concat((EXTRACT(YEAR FROM oc.start_date) - EXTRACT(YEAR FROM pp.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM oc.start_date) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			else concat((EXTRACT(YEAR FROM oc.start_date) - EXTRACT(YEAR FROM pp.birth_date)), ' Años, ', (EXTRACT(MONTH FROM oc.start_date) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			end as ageTurn,
			CASE
			WHEN (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)) &lt; 0 then
			concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pp.birth_date)) -1, ' Años, ', 12 +(EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			else concat((EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM pp.birth_date)), ' Años, ', (EXTRACT(MONTH FROM CURRENT_TIMESTAMP) - EXTRACT(MONTH FROM pp.birth_date)), ' Meses')
			end as ageToday,
			et.pt as ethnicity,
			(SELECT string_agg(mc.name, ', ') FROM patient_medical_coverage pmc LEFT JOIN medical_coverage mc on pmc.medical_coverage_id=mc.id WHERE pmc.patient_id=pa.id) as medicalCoverage,
			concat(a.street, ' N° ', a.number, CASE WHEN a.floor is not null then concat(' Piso: ', a.floor, 'Departamento: ', a.apartment) end) as address,
			c.description as location,
			ed.description as educationLevel,
			lab.description as occupation,
			sv_ps.value as systolicBloodPressure,
			sv_pd.value as diastolicBloodPressure,
			sv_pam.value as meanArterialPressure,
			sv_t.value as temperature,
			sv_fc.value as heartRate,
			sv_fr.value as respirationRate,
			sv_sh.value as oxygenSaturationHemoglobin,
			sv_h.value as height,
			sv_p.value as weight,
			sv_idh.value as bmi,
			(SELECT string_agg(r.description, ', ') FROM outpatient_consultation_reasons ocr INNER JOIN reasons r on ocr.reason_id=r.id WHERE ocr.outpatient_consultation_id=oc.id) as reasons,
			(SELECT string_agg(concat(proc.pt, '(', proc.description, ' | SNOMED: ', proc.sctid, ')'), ', ') FROM procedimientos proc WHERE proc.document_id=d.id) as procedures,
			(SELECT string_agg(concat(prob.description, '[SNOMED: ', prob.sctid, ']'), ', ') FROM problemas prob WHERE prob.document_id=d.id) as problems,
			(SELECT string_agg(concat(med.pt, '(SNOMED:', med.sctid, ')'), ', ') FROM medicacion med WHERE med.document_id=d.id) as medication,
			(SELECT string_agg(ev.description, ', ') FROM note ev WHERE d.other_note_id=ev.id) as evolution
			FROM outpatient_consultation oc
			LEFT JOIN institution ins on oc.institution_id=ins.id
			LEFT JOIN clinical_specialty cs on oc.clinical_specialty_id=cs.id
			LEFT JOIN healthcare_professional hp ON oc.doctor_id=hp.id
			INNER JOIN person p on hp.person_id=p.id
			LEFT JOIN patient pa on oc.patient_id=pa.id
			INNER JOIN person pp on pa.person_id=pp.id
			LEFT JOIN person_extended pe on pe.person_id=pp.id
			LEFT JOIN ethnicity et on pe.ethnicity_id=et.id
			LEFT JOIN education_level ed on pe.education_level_id=ed.id
			LEFT JOIN occupation lab on pe.occupation_id=lab.id
			INNER JOIN gender g on pp.gender_id=g.id
			LEFT JOIN gender gg on pe.gender_self_determination=gg.id
			LEFT JOIN patient_medical_coverage pmc ON pmc.patient_id=pa.id
			LEFT JOIN medical_coverage mc on pmc.medical_coverage_id=mc.id
			LEFT JOIN address a on pe.address_id=a.id
			LEFT JOIN city c on a.city_id=c.id
			LEFT JOIN document d on oc.document_id=d.id
			LEFT JOIN signos_vitales sv_ps on sv_ps.id_doc=oc.document_id and sv_ps.id=1
			LEFT JOIN signos_vitales sv_pd on sv_pd.id_doc=oc.document_id and sv_pd.id=2
			LEFT JOIN signos_vitales sv_pam on sv_pam.id_doc=oc.document_id and sv_pam.id=3
			LEFT JOIN signos_vitales sv_t on sv_t.id_doc=oc.document_id and sv_t.id=4
			LEFT JOIN signos_vitales sv_fc on sv_fc.id_doc=oc.document_id and sv_fc.id=5
			LEFT JOIN signos_vitales sv_fr on sv_fr.id_doc=oc.document_id and sv_fr.id=6
			LEFT JOIN signos_vitales sv_sh on sv_sh.id_doc=oc.document_id and sv_sh.id=7
			LEFT JOIN signos_vitales sv_h on sv_h.id_doc=oc.document_id and sv_h.id=8
			LEFT JOIN signos_vitales sv_p on sv_p.id_doc=oc.document_id and sv_p.id=9
			LEFT JOIN signos_vitales sv_idh on sv_idh.id_doc=oc.document_id and sv_idh.id=10
			WHERE ins.id= :institutionId AND (pmc.id is null OR (lower(mc.name) like '%sumar%')) AND oc.institution_id= :institutionId
			ORDER BY oc.id
		</query>
	</named-native-query>

	<named-native-query name="GeneralReports.ConsultationDetailEmergencias" result-set-mapping="GeneralReports.ConsultationDetailEmergenciasResult">
		<query>
			SELECT source.institution AS institution,
			source.ambulance AS ambulance,
			source.office AS office,
			source.sector AS sector,
			source.police_intervention AS policeIntervention,
			source.attention_date AS attentionDate,
			source.identification AS identification,
			source.last_name AS lastName,
			source.names AS names,
			source.medical_coverage AS medicalCoverage,
			source.emergency_care_entrance AS emergencyCareEntrance,
			source.situation AS situation,
			source.emergency_care_type AS emergencyCareType,
			source.triage_note AS triageNote,
			source.triage_level AS triageLevel,
			source.date_discharge AS dateDischarge,
			source.ambulance_discharge AS ambulanceDischarge,
			source.discharge_type AS typeDischarge,
			source.patient_exit AS patientExit
			FROM (SELECT ece.created_on, ins.id as institution_id,  concat(ins.name, ' ', ins.sisa_code) AS institution,
			ece.ambulance_company_id as ambulance,
			d_of.description as office,
			css.description as sector,
			CASE
			WHEN ece.has_police_intervention=true THEN
			concat('Sí')
			ELSE concat('No')
			END AS police_intervention,
			ece.updated_on as attention_date,
			concat(it.description, ' ', pe.identification_number) as identification,
			concat(pe.last_name, ' ', pe.other_last_names) as last_name,
			concat(pe.first_name, ' ', pe.middle_names) as names,
			concat(mc.name, '(', hi.rnos, ')', pmc.affiliate_number) as medical_coverage,
			ec_in_t.description AS emergency_care_entrance,
			ec_st.description AS situation,
			ec_t.description AS emergency_care_type,
			(SELECT string_agg(tr.notes, ', ') FROM triage tr
			WHERE tr.emergency_care_episode_id=ece.id) AS triage_note,
			concat(tr_cat.name, ' Codigo: ', tr_cat.color_name) as triage_level,
			ec_dis.administrative_discharge_on as date_discharge,
			ec_dis.ambulance_company_id AS ambulance_discharge,
			dis.description as discharge_type,
			dis_out.description as patient_exit
			FROM emergency_care_episode ece
			INNER JOIN institution ins ON ece.institution_id = ins.id
			INNER JOIN emergency_care_state ec_st ON ece.emergency_care_state_id = ec_st.id
			INNER JOIN patient pa ON ece.patient_id = pa.id
			INNER JOIN person pe ON pa.person_id = pe.id
			INNER JOIN identification_type it ON pe.identification_type_id=it.id
			LEFT JOIN patient_medical_coverage pmc on ece.patient_medical_coverage_id=pmc.id
			LEFT JOIN medical_coverage mc ON pmc.medical_coverage_id=mc.id
			LEFT JOIN health_insurance hi ON hi.id=mc.id
			LEFT JOIN emergency_care_entrance_type ec_in_t ON ece.emergency_care_entrance_type_id = ec_in_t.id
			LEFT JOIN emergency_care_type ec_t ON ece.emergency_care_type_id = ec_t.id
			LEFT JOIN emergency_care_discharge ec_dis ON ece.id = ec_dis.emergency_care_episode_id
			LEFT JOIN discharge_type dis ON ec_dis.discharge_type_id = dis.id
			LEFT JOIN emergency_care_entrance_type dis_out ON ec_dis.hospital_transport_id=dis_out.id
			LEFT JOIN doctors_office d_of ON ece.doctors_office_id=d_of.id
			LEFT JOIN clinical_specialty_sector css ON d_of.clinical_specialty_sector_id=css.id
			LEFT JOIN triage_category tr_cat  ON ece.triage_category_id=tr_cat.id
			) source
			WHERE (source.created_on >= date_trunc('hour', (now() + (INTERVAL '-24 hour')))
			AND source.created_on &lt; date_trunc('hour', now()))
			AND institution_id= :institutionId
			LIMIT 1048575
		</query>
	</named-native-query>

	<named-native-query name="GeneralReports.ConsultationDetailDiabeticos" result-set-mapping="GeneralReports.ConsultationDetailDiabeticosResult">
		<query>
			WITH signos_vitales as(
			SELECT d.id as id_doc,
			s.id, s.pt as name,
			CAST(ovs.value AS decimal) as value
			FROM document d INNER JOIN document_vital_sign dvs on dvs.document_id=d.id
			INNER JOIN observation_vital_sign ovs on dvs.observation_vital_sign_id=ovs.id
			INNER JOIN snomed s on ovs.snomed_id=s.id
			), medicacion as (
			SELECT dms.document_id, s.pt, s.sctid FROM document_medicamention_statement dms
			INNER JOIN medication_statement ms on dms.medication_statement_id=ms.id
			INNER JOIN medication_statement_status mss on ms.status_id=mss.id
			INNER JOIN snomed s on ms.snomed_id=s.id
			), motivos_list as(
			SELECT string_agg(rr.description, ', ') as descriptions, ocrr.outpatient_consultation_id
			FROM outpatient_consultation_reasons ocrr
			INNER JOIN reasons rr on ocrr.reason_id=rr.id
			GROUP BY outpatient_consultation_id
			)
			SELECT oc.id as id,
			concat(ins.name, ' (SISA: ', ins.sisa_code, ')') as institution,
			oc.created_on as attentionDate,
			concat(p.first_name, ' ', p.middle_names, ' ', p.last_name, ' ', p.other_last_names) as lender,
			p.identification_number as identificationLender,
			concat(pp.first_name, ' ', pp.middle_names , ' ', pp.last_name, ' ', pp.other_last_names) as patient,
			pp.identification_number as identificationPatient,
			s_hc.pt as problem,
			mo.descriptions as reasons,
			sv_hg.value as glycosylatedHemoglobinBloodPressure,
			(SELECT string_agg(concat(med.pt, '(SNOMED:', med.sctid, ')'), ', ') FROM medicacion med where med.document_id=d.id) as medication
			FROM outpatient_consultation oc
			LEFT JOIN institution ins ON oc.institution_id=ins.id
			LEFT JOIN motivos_list mo on mo.outpatient_consultation_id=oc.id
			LEFT JOIN healthcare_professional hp ON oc.doctor_id=hp.id
			INNER JOIN person p on hp.person_id=p.id
			INNER JOIN identification_type itp ON p.identification_type_id=itp.id
			LEFT JOIN patient pa on oc.patient_id=pa.id
			INNER JOIN person pp on pa.person_id=pp.id
			INNER JOIN identification_type itpp ON pp.identification_type_id=itpp.id
			INNER JOIN document d on oc.document_id=d.id
			INNER JOIN document_health_condition dhc on dhc.document_id=d.id INNER JOIN health_condition hc on dhc.health_condition_id=hc.id INNER JOIN snomed s_hc on hc.snomed_id=s_hc.id
			LEFT JOIN signos_vitales sv_hg on sv_hg.id_doc=oc.document_id and sv_hg.id=1411
			where (s_hc.pt like '%diabetes%')
			AND ins.id= :institutionId
		</query>
	</named-native-query>

	<named-native-query name="GeneralReports.ConsultationDetailHipertensos" result-set-mapping="GeneralReports.ConsultationDetailHipertensosResult">
		<query>
			with signos_vitales as(
			SELECT d.id as id_doc, s.id, s.pt as name, CAST(ovs.value AS decimal) as value
			FROM document d INNER JOIN document_vital_sign dvs on dvs.document_id=d.id INNER JOIN observation_vital_sign ovs on dvs.observation_vital_sign_id=ovs.id
			INNER JOIN snomed s on ovs.snomed_id=s.id
			), medicacion as (
			SELECT dms.document_id, s.pt, s.sctid FROM document_medicamention_statement dms
			INNER JOIN medication_statement ms on dms.medication_statement_id=ms.id
			INNER JOIN medication_statement_status mss on ms.status_id=mss.id
			INNER JOIN snomed s on ms.snomed_id=s.id
			), motivos_list as(
			SELECT string_agg(rr.description, ', ') as descriptions, ocrr.outpatient_consultation_id FROM outpatient_consultation_reasons ocrr INNER JOIN reasons rr on ocrr.reason_id=rr.id group by outpatient_consultation_id
			)
			SELECT oc.id as id,
			concat(ins.name, ' (SISA: ', ins.sisa_code, ')') as institution,
			oc.created_on as attentionDate,
			concat(p.first_name, ' ', p.middle_names, ' ', p.last_name, ' ', p.other_last_names) as lender,
			p.identification_number as identificationLender,
			concat(pp.first_name, ' ', pp.middle_names , ' ', pp.last_name, ' ', pp.other_last_names) as patient,
			pp.identification_number as identificationPatient,
			s_hc.pt as problem,
			mo.descriptions as reasons,
			concat(sv_ps.value, '/',sv_pd.value) as glycosylatedHemoglobinBloodPressure,
			(SELECT string_agg(concat(med.pt, '(SNOMED:', med.sctid, ')'), ', ') FROM medicacion med WHERE med.document_id=d.id) as medication
			FROM outpatient_consultation oc
			LEFT JOIN institution ins ON oc.institution_id=ins.id
			LEFT JOIN motivos_list mo on mo.outpatient_consultation_id=oc.id
			LEFT JOIN healthcare_professional hp ON oc.doctor_id=hp.id
			INNER JOIN person p on hp.person_id=p.id
			INNER JOIN identification_type itp ON p.identification_type_id=itp.id
			LEFT JOIN patient pa on oc.patient_id=pa.id
			INNER JOIN person pp on pa.person_id=pp.id
			INNER JOIN identification_type itpp ON pp.identification_type_id=itpp.id
			INNER JOIN document d on oc.document_id=d.id
			INNER JOIN document_health_condition dhc on dhc.document_id=d.id INNER JOIN health_condition hc on dhc.health_condition_id=hc.id INNER JOIN snomed s_hc on hc.snomed_id=s_hc.id
			LEFT JOIN signos_vitales sv_ps on sv_ps.id_doc=oc.document_id and sv_ps.id=1
			LEFT JOIN signos_vitales sv_pd on sv_pd.id_doc=oc.document_id and sv_pd.id=2
			WHERE (s_hc.pt like '%hipertensión arterial%' or mo.descriptions like '%hipertensión%') AND oc.created_on>= timestamp with time zone '2022-01-02 00:00:00.000Z'
			AND ins.id= :institutionId
		</query>
	</named-native-query>

    <!-- ========================================== -->
    <!-- ============== Appointment =============== -->
    <!-- ========================================== -->

    <named-native-query name="Appointment.medicalCoverage">
        <query>select ap.patient_medical_coverage_id
            from appointment ap
            join appointment_assn apassn on (ap.id = apassn.appointment_id)
            join diary d on (apassn.diary_id = d.id)
            where ap.patient_id = :patientId and
            ap.date_type_id = :currentDate and
            ap.patient_medical_coverage_id is not null and
            ap.appointment_state_id = :appointmentState and
            d.healthcare_professional_id = :professionalId
            order by hour asc
            limit 1
        </query>
    </named-native-query>


    <!-- ========================================== -->
    <!-- ============== Results-mapping =============== -->
    <!-- ========================================== -->

    <sql-result-set-mapping name="HCE.findAllMedicationsResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.MedicationVo">
            <column name="id" class="java.lang.Integer"/>
            <column name="sctidCode" class="java.lang.String"/>
            <column name="sctidTerm" class="java.lang.String"/>
            <column name="status" class="java.lang.String"/>
            <column name="sequence" class="java.lang.Integer"/>
            <column name="count" class="java.lang.Integer"/>
            <column name="duration" class="java.lang.Double"/>
            <column name="duration_unit" class="java.lang.String"/>
            <column name="frequency" class="java.lang.Integer"/>
            <column name="period_unit" class="java.lang.String"/>
            <column name="effectiveTime" class="java.sql.Date"/>
            <column name="end_date" class="java.sql.Date"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.getDocumentReferenceResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.BundleVo">
            <column name="id" class="java.lang.Integer"/>
            <column name="first_name" class="java.lang.String"/>
            <column name="middle_names" class="java.lang.String"/>
            <column name="last_name" class="java.lang.String"/>
            <column name="hasDocuments" class="java.lang.Boolean"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.getPatientResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.PatientVo">
            <column name="first_name" class="java.lang.String"/>
            <column name="middle_names" class="java.lang.String"/>
            <column name="last_name" class="java.lang.String"/>
            <column name="other_last_names" class="java.lang.String"/>
            <column name="mothers_last_name" class="java.lang.String"/>
            <column name="identification_number" class="java.lang.String"/>
            <column name="gender_id" class="java.lang.Short"/>
            <column name="birth_date" class="java.lang.String"/>
            <column name="phone_number" class="java.lang.String"/>
            <column name="address_id" class="java.lang.Integer"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.findAllConditionResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.ConditionVo">
            <column name="id" class="java.lang.Integer"/>
            <column name="code" class="java.lang.String"/>
            <column name="term" class="java.lang.String"/>
            <column name="clinical_status" class="java.lang.String"/>
            <column name="verification_status_id" class="java.lang.String"/>
            <column name="start_date" class="java.sql.Date"/>
            <column name="severity" class="java.lang.String"/>
            <column name="created_on" class="java.sql.Date"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.findAllImmunizationsResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.ImmunizationVo">
            <column name="id" class="java.lang.Integer"/>
            <column name="code" class="java.lang.String"/>
            <column name="term" class="java.lang.String"/>
            <column name="status_id" class="java.lang.String"/>
            <column name="administration_date" class="java.sql.Date"/>
            <column name="created_on" class="java.sql.Date"/>
            <column name="expiration_date" class="java.sql.Date"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.findAllAllergiesResult">
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.AllergyIntoleranceVo">
            <column name="id" class="java.lang.Integer"/>
            <column name="code" class="java.lang.String"/>
            <column name="term" class="java.lang.String"/>
            <column name="status_id" class="java.lang.String"/>
            <column name="verification_status_id" class="java.lang.String"/>
            <column name="category_id" class="java.lang.Short"/>
            <column name="criticality" class="java.lang.Short"/>
            <column name="start_date" class="java.sql.Date"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="HCE.getOrganizationResult" >
        <constructor-result target-class="net.pladema.hl7.dataexchange.model.domain.OrganizationVo">
            <column name="sisa_code" class="java.lang.String"/>
            <column name="name" class="java.lang.String"/>
            <column name="phone_number" class="java.lang.String"/>
            <column name="address_id" class="java.lang.Integer"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="Reports.OutpatientSummaryResult">
        <constructor-result target-class="net.pladema.reports.repository.ConsultationSummary">
            <column name="professional_id" class="java.lang.Integer"/>
            <column name="specialty_id" class="java.lang.Integer"/>
            <column name="specialty" class="java.lang.String"/>
            <column name="specialtyType" class="java.lang.Short"/>
            <column name="age" class="java.lang.Integer"/>
            <column name="gender_id" class="java.lang.Short"/>
            <column name="OS" class="java.lang.Boolean"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="Reports.ConsultationDetailResult">
        <constructor-result target-class="net.pladema.reports.repository.ConsultationDetail">
            <column name="province" class="java.lang.String"/>
            <column name="department" class="java.lang.String"/>
            <column name="sisaCode" class="java.lang.String"/>
            <column name="institution" class="java.lang.String"/>
            <column name="patientSurname" class="java.lang.String"/>
            <column name="patientFirstName" class="java.lang.String"/>
            <column name="identificationType" class="java.lang.String"/>
            <column name="identificationNumber" class="java.lang.String"/>
            <column name="birthDate" class="java.lang.String"/>
            <column name="gender" class="java.lang.String"/>
            <column name="address" class="java.lang.String"/>
            <column name="phoneNumber" class="java.lang.String"/>
            <column name="email" class="java.lang.String"/>
            <column name="coverageName" class="java.lang.String"/>
            <column name="affiliateNumber" class="java.lang.String"/>
            <column name="startDate" class="java.lang.String"/>
            <column name="clinicalSpecialtyId" class="java.lang.Integer"/>
            <column name="clinicalSpecialty" class="java.lang.String"/>
            <column name="professionalId" class="java.lang.Integer"/>
            <column name="professionalName" class="java.lang.String"/>
            <column name="reasons" class="java.lang.String"/>
            <column name="problems" class="java.lang.String"/>
            <column name="weight" class="java.lang.String"/>
            <column name="height" class="java.lang.String"/>
            <column name="systolicBloodPressure" class="java.lang.String"/>
            <column name="diastolicBloodPressure" class="java.lang.String"/>
        </constructor-result>
    </sql-result-set-mapping>
	<sql-result-set-mapping name="ProgramReports.ConsultationDetailEpiIResult">
		<constructor-result target-class="net.pladema.programreports.repository.ConsultationDetailEpiI">
			<column name="patientFullName" class="java.lang.String"/>
			<column name="coding" class="java.lang.String"/>
			<column name="birthDate" class="java.lang.String"/>
			<column name="gender" class="java.lang.String"/>
			<column name="startDate" class="java.lang.String"/>
			<column name="department" class="java.lang.String"/>
			<column name="address" class="java.lang.String"/>
			<column name="cie10Codes" class="java.lang.String"/>
			<column name="identificationNumber" class="java.lang.String"/>
			<column name="problems" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="ProgramReports.ConsultationDetailEpiIIResult">
		<constructor-result target-class="net.pladema.programreports.repository.ConsultationDetailEpiII">
			<column name="diagnostic" class="java.lang.String"/>
			<column name="rango" class="java.lang.String"/>
			<column name="contador" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="ProgramReports.ConsultationDetailRecuperoResult">
		<constructor-result target-class="net.pladema.programreports.repository.ConsultationDetailRecupero">
			<column name="operativeUnit" class="java.lang.String"/>
			<column name="provider" class="java.lang.String"/>
			<column name="providerDni" class="java.lang.String"/>
			<column name="attentionDate" class="java.lang.String"/>
			<column name="consultationNumber" class="java.lang.String"/>
			<column name="patientDni" class="java.lang.String"/>
			<column name="patientName" class="java.lang.String"/>
			<column name="gender" class="java.lang.String"/>
			<column name="selfPerceivedGender" class="java.lang.String"/>
			<column name="selfPerceivedName" class="java.lang.String"/>
			<column name="birthDate" class="java.lang.String"/>
			<column name="ageTurn" class="java.lang.String"/>
			<column name="ageToday" class="java.lang.String"/>
			<column name="ethnicity" class="java.lang.String"/>
			<column name="medicalCoverage" class="java.lang.String"/>
			<column name="address" class="java.lang.String"/>
			<column name="location" class="java.lang.String"/>
			<column name="educationLevel" class="java.lang.String"/>
			<column name="occupation" class="java.lang.String"/>
			<column name="systolicBloodPressure" class="java.lang.String"/>
			<column name="diastolicBloodPressure" class="java.lang.String"/>
			<column name="meanArterialPressure" class="java.lang.String"/>
			<column name="temperature" class="java.lang.String"/>
			<column name="heartRate" class="java.lang.String"/>
			<column name="respirationRate" class="java.lang.String"/>
			<column name="oxygenSaturationHemoglobin" class="java.lang.String"/>
			<column name="height" class="java.lang.String"/>
			<column name="weight" class="java.lang.String"/>
			<column name="bmi" class="java.lang.String"/>
			<column name="reasons" class="java.lang.String"/>
			<column name="procedures" class="java.lang.String"/>
			<column name="problems" class="java.lang.String"/>
			<column name="medication" class="java.lang.String"/>
			<column name="evolution" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="GeneralReports.ConsultationDetailEmergenciasResult">
		<constructor-result target-class="net.pladema.generalreports.repository.ConsultationDetailEmergencias">
			<column name="institution" class="java.lang.String"/>
			<column name="ambulance" class="java.lang.String"/>
			<column name="office" class="java.lang.String"/>
			<column name="sector" class="java.lang.String"/>
			<column name="policeIntervention" class="java.lang.String"/>
			<column name="attentionDate" class="java.lang.String"/>
			<column name="identification" class="java.lang.String"/>
			<column name="lastName" class="java.lang.String"/>
			<column name="names" class="java.lang.String"/>
			<column name="medicalCoverage" class="java.lang.String"/>
			<column name="emergencyCareEntrance" class="java.lang.String"/>
			<column name="situation" class="java.lang.String"/>
			<column name="emergencyCareType" class="java.lang.String"/>
			<column name="triageNote" class="java.lang.String"/>
			<column name="triageLevel" class="java.lang.String"/>
			<column name="dateDischarge" class="java.lang.String"/>
			<column name="ambulanceDischarge" class="java.lang.String"/>
			<column name="typeDischarge" class="java.lang.String"/>
			<column name="patientExit" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="GeneralReports.ConsultationDetailDiabeticosResult">
		<constructor-result target-class="net.pladema.generalreports.repository.ConsultationDetailDiabeticosHipertensos">
			<column name="id" class="java.lang.String"/>
			<column name="institution" class="java.lang.String"/>
			<column name="attentionDate" class="java.lang.String"/>
			<column name="lender" class="java.lang.String"/>
			<column name="identificationLender" class="java.lang.String"/>
			<column name="patient" class="java.lang.String"/>
			<column name="identificationPatient" class="java.lang.String"/>
			<column name="problem" class="java.lang.String"/>
			<column name="reasons" class="java.lang.String"/>
			<column name="glycosylatedHemoglobinBloodPressure" class="java.lang.String"/>
			<column name="medication" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="GeneralReports.ConsultationDetailHipertensosResult">
		<constructor-result target-class="net.pladema.generalreports.repository.ConsultationDetailDiabeticosHipertensos">
			<column name="id" class="java.lang.String"/>
			<column name="institution" class="java.lang.String"/>
			<column name="attentionDate" class="java.lang.String"/>
			<column name="lender" class="java.lang.String"/>
			<column name="identificationLender" class="java.lang.String"/>
			<column name="patient" class="java.lang.String"/>
			<column name="identificationPatient" class="java.lang.String"/>
			<column name="problem" class="java.lang.String"/>
			<column name="reasons" class="java.lang.String"/>
			<column name="glycosylatedHemoglobinBloodPressure" class="java.lang.String"/>
			<column name="medication" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>

</entity-mappings>