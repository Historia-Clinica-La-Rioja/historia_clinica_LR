package net.pladema.hl7.dataexchange.clinical;

import ca.uhn.fhir.model.api.TemporalPrecisionEnum;
import net.pladema.hl7.dataexchange.IMultipleResourceFhir;
import net.pladema.hl7.dataexchange.model.adaptor.FhirDateMapper;
import net.pladema.hl7.dataexchange.model.adaptor.FhirID;
import net.pladema.hl7.supporting.exchange.database.FhirPersistentStore;
import net.pladema.hl7.supporting.terminology.coding.CodingProfile;
import net.pladema.hl7.supporting.terminology.coding.CodingCode;
import net.pladema.hl7.supporting.terminology.coding.CodingSystem;
import net.pladema.hl7.dataexchange.model.domain.ConditionVo;

import org.apache.commons.lang3.tuple.Pair;
import org.hl7.fhir.r4.model.Condition;
import org.hl7.fhir.r4.model.Reference;
import org.hl7.fhir.r4.model.Resource;
import org.hl7.fhir.r4.model.ResourceType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

@Service
public class ConditionResource extends IMultipleResourceFhir {

    @Autowired
    public ConditionResource(FhirPersistentStore store){
        super(store);
    }

    @Override
    public ResourceType getResourceType() {
        return ResourceType.Condition;
    }

    @Override
    public List<Condition> fetch(String id, Reference[] references) {
        List<ConditionVo> conditions = store.findAllCondition(id);

        if(conditions.isEmpty())
            return noInformationAvailable(references[0]);

        List<Condition> resources = new ArrayList<>();
        conditions.forEach( (condition) ->{
            Condition resource = new Condition();
            resource.setId(condition.getId());
            resource.addCategory(newCodeableConcept(CodingSystem.LOINC, CodingCode.Condition.CATEGORY));
            resource.setSubject(references[0]);
            resource.getOnsetDateTimeType().setValue(FhirDateMapper.toDate(condition.getCreatedOn()));
            resource.setVerificationStatus(newCodeableConcept(CodingSystem.Condition.VERIFICATION, condition.getVerificationStatus()));
            resource.setCode(newCodeableConcept(CodingSystem.SNOMED, condition.get()));
            resource.setRecordedDate(FhirDateMapper.toDate(condition.getStartDate()));

            resource.setSeverity(newCodeableConcept(CodingSystem.LOINC, condition.getSeverity()));
            resource.setClinicalStatus(newCodeableConcept(CodingSystem.Condition.STATUS, condition.getClinicalStatus()));

            resource.setMeta(newMeta(CodingProfile.Condition.URL));
            resources.add(resource);
        });
        return resources;
    }

    private List<Condition> noInformationAvailable(Reference patientRef){
        Condition none = new Condition();
        none.setId(FhirID.autoGenerated());
        none.setCode(newCodeableConcept(CodingSystem.NODATA, CodingCode.Condition.KNOWN_ABSENT));
        none.addCategory(newCodeableConcept(CodingSystem.LOINC, CodingCode.Condition.CATEGORY));
        none.setClinicalStatus(newCodeableConcept(CodingSystem.Condition.STATUS, ConditionVo.defaultClinicalStatus()));
        none.setVerificationStatus(newCodeableConcept(CodingSystem.Condition.VERIFICATION, ConditionVo.defaultVerificationStatus()));
        none.setSubject(patientRef);
        none.getOnsetDateTimeType().setValue(new Date(), TemporalPrecisionEnum.YEAR);
        none.getOnsetDateTimeType().addExtension(newExtension(
                CodingProfile.DATA_ABSENT_REASON, CodingCode.ABSENT_REASON)
        );
        return Collections.singletonList(none);
    }

    public static ConditionVo encode(Resource baseResource){
        ConditionVo data = new ConditionVo();
        Condition resource = (Condition) baseResource;
        data.setId(resource.getId());
        if(resource.hasCode()) {
            Pair<String, String> coding = decodeCoding(resource.getCode());
            data.setSctidCode(coding.getKey());
            data.setSctidTerm(coding.getValue());
        }
        if(resource.hasClinicalStatus())
            data.setClinicalStatus(decodeCode(resource.getClinicalStatus()));
        if(resource.hasVerificationStatus())
            data.setVerificationStatus(decodeCode(resource.getVerificationStatus()));
        if(resource.hasSeverity())
            data.setSeverityCode(decodeCode(resource.getVerificationStatus()));

        if(resource.hasRecordedDate())
            data.setStartDate(FhirDateMapper.toLocalDate(resource.getRecordedDate()));
        if(resource.hasOnsetDateTimeType())
            data.setCreatedOn(FhirDateMapper.toLocalDateTime(resource.getOnsetDateTimeType().getValue()));
        return data;
    }
}
