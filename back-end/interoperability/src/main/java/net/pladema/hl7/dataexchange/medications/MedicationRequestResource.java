package net.pladema.hl7.dataexchange.medications;

import net.pladema.hl7.concept.administration.CoverageResource;
import net.pladema.hl7.concept.administration.LocationResource;
import net.pladema.hl7.concept.administration.OrganizationResource;
import net.pladema.hl7.concept.administration.PatientResource;
import net.pladema.hl7.concept.administration.PractitionerResource;
import net.pladema.hl7.dataexchange.IResourceFhir;
import net.pladema.hl7.dataexchange.model.adaptor.FhirCode;
import net.pladema.hl7.dataexchange.model.adaptor.FhirNarrative;
import net.pladema.hl7.dataexchange.model.domain.DosageVo;
import net.pladema.hl7.dataexchange.model.domain.MedicationRequestVo;
import net.pladema.hl7.dataexchange.model.domain.MedicationVo;
import net.pladema.hl7.supporting.conformance.InteroperabilityCondition;

import net.pladema.hl7.supporting.exchange.database.FhirPersistentStore;
import net.pladema.hl7.supporting.terminology.coding.CodingProfile;
import net.pladema.hl7.supporting.terminology.coding.CodingSystem;

import net.pladema.hl7.supporting.terminology.coding.CodingValueSet;

import org.apache.commons.lang3.tuple.Pair;
import org.hl7.fhir.r4.model.Annotation;
import org.hl7.fhir.r4.model.BaseResource;
import org.hl7.fhir.r4.model.BooleanType;
import org.hl7.fhir.r4.model.CanonicalType;
import org.hl7.fhir.r4.model.CodeableConcept;
import org.hl7.fhir.r4.model.Coding;
import org.hl7.fhir.r4.model.Coverage;
import org.hl7.fhir.r4.model.Dosage;
import org.hl7.fhir.r4.model.Identifier;
import org.hl7.fhir.r4.model.Location;
import org.hl7.fhir.r4.model.MarkdownType;
import org.hl7.fhir.r4.model.MedicationRequest;
import org.hl7.fhir.r4.model.Meta;
import org.hl7.fhir.r4.model.Patient;
import org.hl7.fhir.r4.model.Period;
import org.hl7.fhir.r4.model.Practitioner;
import org.hl7.fhir.r4.model.Quantity;
import org.hl7.fhir.r4.model.Reference;
import org.hl7.fhir.r4.model.ResourceType;
import org.hl7.fhir.r4.model.SimpleQuantity;
import org.hl7.fhir.r4.model.Timing;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Conditional;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

@Service
@Conditional(InteroperabilityCondition.class)
public class MedicationRequestResource extends IResourceFhir {

	private final MedicationResource medicationResource;

	private final PatientResource patientResource;

	private final OrganizationResource organizationResource;

	private final LocationResource locationResource;

	private final PractitionerResource practitionerResource;

	private final CoverageResource coverageResource;

	@Value("${prescription.domain.number}")
	private Integer recipeDomain;

	@Autowired
	public MedicationRequestResource(FhirPersistentStore store, MedicationResource medicationResource, PatientResource patientResource,
									 OrganizationResource organizationResource, LocationResource locationResource, PractitionerResource practitionerResource, CoverageResource coverageResource){
		super(store);
		this.medicationResource = medicationResource;
		this.patientResource = patientResource;
		this.organizationResource = organizationResource;
		this.locationResource = locationResource;
		this.practitionerResource = practitionerResource;
		this.coverageResource = coverageResource;
	}

	@Override
	public ResourceType getResourceType() {
		return ResourceType.MedicationRequest;
	}

	public List<MedicationRequest> fetch(String id, String identificationNumber) {
		List<MedicationRequestVo> medicationRequestList = store.getMedicationRequest(UUID.fromString(id),identificationNumber);

		Map<ResourceType,Reference> references = new HashMap<>();

		List<MedicationRequest> resources = new ArrayList<>();

		for (MedicationRequestVo medicationRequest : medicationRequestList) {
			MedicationRequest resource = new MedicationRequest();

			resource.setMeta(new Meta().setProfile(List.of(new CanonicalType(CodingProfile.MedicationRequest.BASEURL))));


			//resource.setId(recipeDomain.toString().concat("-").concat(medicationRequest.getMrId().toString()).concat("-").concat(medicationRequest.getPrescriptionLineNumber().toString())); //Identifier? estaria bien?
			//resource.setId(FhirID.autoGenerated()); uuid o el '-' generado antes?
			//resource.addIdentifier(new Identifier().setValue(medicationRequest.getMedicationStatementId()));
			resource.setId(medicationRequest.getLineUuid().toString());
			resource.addIdentifier(newIdentifier(resource));
			resource.setGroupIdentifier(newIdentifier(resource,recipeDomain + "-" + medicationRequest.getRequestUuid().toString()));

			resource.setStatus(getStatusFromMedicationRequest(medicationRequest.getStatus()));
			//status reason?

			resource.setIntent(getIntetFromMedicationRequest(medicationRequest.getIntent()));

			resource.setCategory(Collections.singletonList(getCategory(medicationRequest.getCategoryCode())));

			resource.setAuthoredOn(medicationRequest.getAuthoredOn());

			MedicationVo medication = store.getMedication(Integer.parseInt(medicationRequest.getMedicationStatementId()));
			//seria SNOMED_RDI_GENERIC Y COMMERCIAL?
			CodeableConcept medicationCodeableConcept = newCodeableConcept(CodingSystem.SNOMED_RDI_GENERIC, medication.get());
			resource.setMedication(medicationCodeableConcept);
			if (medicationCodeableConcept != null && medicationCodeableConcept.hasCoding())
				resource.setText(FhirNarrative.buildNarrativeAdditional(medicationCodeableConcept.getCodingFirstRep().getDisplay()));

			//seria SNOMED_RDI_REASON?
			CodeableConcept reasonCode = newCodeableConcept(CodingSystem.SNOMED_RDI_REASON, new FhirCode(medicationRequest.getProblemId(),medicationRequest.getProblemPt()));
			if (reasonCode != null)
				resource.setReasonCode(List.of(reasonCode));

			if (!references.containsKey(ResourceType.Patient)) {
				Patient resourcePatient = patientResource.fetch(medicationRequest.getPatientId(), new EnumMap<>(ResourceType.class));
				Reference patientReference = newReference(fullDomainUrl(resourcePatient));
				patientReference.setDisplay(resourcePatient.getNameFirstRep().getText());
				patientReference.setResource(resourcePatient);
				resource.setSubject(patientReference);
				references.put(ResourceType.Patient, patientReference);
			} else {
				resource.setSubject(references.get(ResourceType.Patient));
			}

			if (!references.containsKey(ResourceType.Coverage)) {
				if (medicationRequest.getPatientMedicalCoverageId() != null) {
					Coverage resourceCoverage = coverageResource.fetch(medicationRequest.getPatientMedicalCoverageId().toString(), references);
					Reference coverageReference = newReference(fullDomainUrl(resourceCoverage));
					coverageReference.setDisplay(resourceCoverage.getPayorFirstRep().getDisplay());
					coverageReference.setResource(resourceCoverage);
					resource.setInsurance(List.of(coverageReference));
					references.put(ResourceType.Coverage, coverageReference);
				}
			} else {
				resource.setInsurance(List.of(references.get(ResourceType.Coverage)));
			}

			if (!references.containsKey(ResourceType.Practitioner)) {
				Practitioner resourcePractitioner = practitionerResource.fetch(medicationRequest.getDoctorId().toString(), new EnumMap<>(ResourceType.class));
				Reference practitionerReference = newReference(fullDomainUrl(resourcePractitioner));
				practitionerReference.setDisplay(resourcePractitioner.getNameFirstRep().getText());
				practitionerReference.setResource(resourcePractitioner);
				resource.setRequester(practitionerReference);
				references.put(ResourceType.Practitioner, practitionerReference);
			} else {
				resource.setRequester(references.get(ResourceType.Practitioner));
			}

			if (!references.containsKey(ResourceType.Location)) {
				Location resourceLocation = locationResource.fetchByOrganization(store.getOrganizationFromId(Integer.parseInt(medicationRequest.getInstitutionId())));
				Reference locationReference = newReference(fullDomainUrl(resourceLocation));
				locationReference.setDisplay(resourceLocation.getName());
				locationReference.setResource(resourceLocation);
				resource.setSupportingInformation(List.of(locationReference));
				references.put(ResourceType.Location, locationReference);
			} else {
				resource.setSupportingInformation(List.of(references.get(ResourceType.Location)));
			}

			resource.addNote(new Annotation(new MarkdownType(medicationRequest.getNote())));

			setDosageInstruction(resource, medicationRequest, medicationRequest.getNote());

			setDispenseRequest(resource, medicationRequest, references);

			resources.add(resource);
		}

		return resources;
	}

	private MedicationRequest.MedicationRequestStatus getStatusFromMedicationRequest(String id) {
		switch(id) {
			case ("55561003"):
				return MedicationRequest.MedicationRequestStatus.ACTIVE;
			case ("385654001"):
				return MedicationRequest.MedicationRequestStatus.STOPPED;
			case ("723510000"):
				return MedicationRequest.MedicationRequestStatus.ENTEREDINERROR;
			case ("255594003"):
				return MedicationRequest.MedicationRequestStatus.COMPLETED;
			default:
				return MedicationRequest.MedicationRequestStatus.NULL;
		}

	}

	private MedicationRequest.MedicationRequestIntent getIntetFromMedicationRequest(String id) {
		switch(id) {
			case ("1"):
				return MedicationRequest.MedicationRequestIntent.PROPOSAL;
			case ("2"):
				return MedicationRequest.MedicationRequestIntent.PLAN;
			case ("3"):
				return MedicationRequest.MedicationRequestIntent.ORDER;
			case ("4"):
				return MedicationRequest.MedicationRequestIntent.ORIGINALORDER;
			case ("5"):
				return MedicationRequest.MedicationRequestIntent.REFLEXORDER;
			case ("6"):
				return MedicationRequest.MedicationRequestIntent.FILLERORDER;
			case ("7"):
				return MedicationRequest.MedicationRequestIntent.INSTANCEORDER;
			case ("8"):
				return MedicationRequest.MedicationRequestIntent.OPTION;
			default:
				return MedicationRequest.MedicationRequestIntent.NULL;
		}
	}

	private CodeableConcept getCategory(String code) {
		switch(code) {
			case ("129274004"):
				return CodingValueSet.MedicationRequest.CATEGORY.DISCHARGE.getCodeableConcept();
			case ("373864002"):
				return CodingValueSet.MedicationRequest.CATEGORY.OUTPATIENT.getCodeableConcept();
			case ("416800000"):
				return CodingValueSet.MedicationRequest.CATEGORY.INPATIENT.getCodeableConcept();
			case ("303119007"):
				return CodingValueSet.MedicationRequest.CATEGORY.COMMUNITY.getCodeableConcept();
			default:
				return null;
		}
	}

	private void setDispenseRequest(MedicationRequest resource, MedicationRequestVo medicationRequest,
									Map<ResourceType,Reference> references) {
		MedicationRequest.MedicationRequestDispenseRequestComponent dispenseRequest = new MedicationRequest.MedicationRequestDispenseRequestComponent();

		Period validityPeriod = new Period();
		validityPeriod.setStart(medicationRequest.getPrescriptionDate());
		dispenseRequest.setValidityPeriod(validityPeriod);

		SimpleQuantity quantity = new SimpleQuantity();
		if (medicationRequest.getQuantityValue() != null && medicationRequest.getQuantityUnit() != null) {
			quantity.setValue(medicationRequest.getQuantityValue());
			//quantity.setUnit(medicationRequest.getQuantityUnit());
		}
		dispenseRequest.setQuantity(quantity);

		/*Duration expectedSupplyDuration = new Duration(); //no va expectedSupplyDuration?
		if (medicationRequest.getDosage().getDuration() != null && medicationRequest.getDosage().getDurationUnit() != null) {
			expectedSupplyDuration.setValue(Math.round(medicationRequest.getDosage().getDuration()));
			expectedSupplyDuration.setUnit(medicationRequest.getDosage().getDurationUnit());
			dispenseRequest.setExpectedSupplyDuration(expectedSupplyDuration);
		}*/

		/*if (!references.containsKey(ResourceType.Organization)) { //no va Organization?
			Organization resourceOrganization = organizationResource.fetchById(Integer.parseInt(medicationRequest.getInstitutionId()));
			Reference organizationReference = new Reference(resourceOrganization);
			organizationReference.setDisplay(resourceOrganization.getName());
			organizationReference.setResource(resourceOrganization);
			dispenseRequest.setPerformer(organizationReference);
			resource.setPerformer(organizationReference);
			references.put(ResourceType.Organization, organizationReference);
		} else {
			Reference organizationReference = references.get(ResourceType.Organization);
			dispenseRequest.setPerformer(organizationReference);
			resource.setPerformer(organizationReference);
		}*/

		resource.setDispenseRequest(dispenseRequest);
	}

	private void setDosageInstruction(MedicationRequest resource, MedicationRequestVo medicationRequest, String note) {
		Dosage dosage = new Dosage();

		DosageVo dosageVo = medicationRequest.getDosage();

		Timing timing = new Timing();
		Timing.TimingRepeatComponent timingRepeat = new Timing.TimingRepeatComponent();
		if (dosageVo.getFrequency() != null && dosageVo.getPeriodUnit() != null) {
			timingRepeat.setFrequency(dosageVo.getFrequency());
			timingRepeat.setPeriodUnit(Timing.UnitsOfTime.fromCode(dosageVo.getPeriodUnit()));
		}

		if (dosageVo.hasSequence())
			dosage.setSequence(dosageVo.getSequence());

		if (dosageVo.getCount() != null)
			timingRepeat.setCount(dosageVo.getCount());

		if (dosageVo.getDuration() != null && dosageVo.getDurationUnit() != null) {
			timingRepeat.setDuration(Math.round(dosageVo.getDuration()));
			timingRepeat.setDurationUnit(Timing.UnitsOfTime.fromCode(dosageVo.getDurationUnit()));
		}

		timing.setRepeat(timingRepeat);

		dosage.setTiming(timing);
		dosage.setText(note);

		dosage.setAsNeeded(new BooleanType(medicationRequest.getHasRecipe()));

		//route y method?

		SimpleQuantity doseQuantity = new SimpleQuantity();
		if (medicationRequest.getQuantityValue() != null && medicationRequest.getQuantityUnit() != null) {
			doseQuantity.setValue(medicationRequest.getQuantityValue());
			doseQuantity.setUnit(medicationRequest.getQuantityUnit());
			String doseCode = getDoseUnitCode(medicationRequest.getQuantityUnit());
			if (doseCode != null) {
				doseQuantity.setSystem(CodingSystem.MedicationRequest.DOSE_UNIT_SYSTEM);
				doseQuantity.setCode(doseCode);
			}
		}

		Dosage.DosageDoseAndRateComponent doseAndRate = new Dosage.DosageDoseAndRateComponent();
		doseAndRate.setDose(doseQuantity);

		dosage.setDoseAndRate(Collections.singletonList(doseAndRate));

		resource.setDosageInstruction(Collections.singletonList(dosage));
	}

	private String getDoseUnitCode(String quantityUnit) {
		switch (quantityUnit) {
			case ("ml"):
				return "mililitro";
			case ("mg"):
				return "miligramo";
			case ("cápsula"):
				return "capsula";
			default:
				return null;
		}
	}

	public void updateStatusCompleted(Integer medicationRequestId) {
		if (store.isMedicationRequestCompleted(medicationRequestId))
			store.updateMedicationRequestCompleted(medicationRequestId);
	}

	public static MedicationRequestVo encode(BaseResource baseResource) {
		MedicationRequestVo data = new MedicationRequestVo();
		MedicationRequest resource = (MedicationRequest) baseResource;

		data.setLineUuid(UUID.fromString(resource.getIdElement().getIdPart()));
		data.setRequestUuid(UUID.fromString(resource.getGroupIdentifier().getValue().split("-",2)[1]));
		data.setStatus(resource.getStatus().getDisplay());
		data.setIntent(resource.getIntent().getDisplay());
		data.setCategoryCode(resource.getCategoryFirstRep().getText());

		Coding codingMedication = resource.getMedicationCodeableConcept().getCodingFirstRep();
		data.setMedicationCode(codingMedication.getCode());
		data.setMedicationDisplay(codingMedication.getDisplay());

		Coding codingReason = resource.getReasonCodeFirstRep().getCodingFirstRep();
		data.setProblemId(codingReason.getCode());
		data.setProblemPt(codingReason.getDisplay());

		if(resource.hasDosageInstruction()) {
			Dosage dosage = resource.getDosageInstruction().get(0);
			DosageVo dosageVo = new DosageVo();
			if (dosage.hasRoute()) {
				Pair<String,String> route = decodeCoding(dosage.getRoute());
				dosageVo.setRouteCode(route.getKey());
				dosageVo.setRouteTerm(route.getValue());
			}
			if (dosage.hasTiming()) {
				Timing.TimingRepeatComponent repeat = dosage.getTiming().getRepeat();
				dosageVo.setPeriodUnit(repeat.getPeriodUnit().getDisplay());
			}
			if (dosage.hasDoseAndRate()) {
				Dosage.DosageDoseAndRateComponent doseAndRate = dosage.getDoseAndRate().get(0);
				if(doseAndRate.hasDoseQuantity()) {
					Quantity quantity = doseAndRate.getDoseQuantity();
					dosageVo.setDoseQuantityCode(quantity.getCode());
					dosageVo.setDoseQuantityUnit(quantity.getUnit());
					dosageVo.setDoseQuantityValue(quantity.getValue().doubleValue());
				}
			}
			data.setDosage(dosageVo);

		}

		data.setAuthoredOn(resource.getAuthoredOn());

		data.setNote(resource.getNoteFirstRep().getText());

		return data;
	}
}
