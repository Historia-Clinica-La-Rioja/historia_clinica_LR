databaseChangeLog: 
    - logicalFilePath: incrementales-v1_41

    - changeSet:
        id: diary_associated_professional-createTable
        comment: Create table diary_associated_professional
        author: mmalyvarni
        changes:
          - createTable:
              tableName: diary_associated_professional
              columns:
                - column:
                    autoIncrement: true
                    constraints:
                      primaryKey: true
                      primaryKeyName: PK_diary_associated_professional
                    name: id
                    type: int
                - column:
                    constraints:
                      foreignKeyName: FK_diary_associated_professional_diary_id
                      references: diary(id)
                    name: diary_id
                    type: int
                - column:
                    constraints:
                      foreignKeyName: FK_diary_associated_professional_healthcare_professional_id
                      references: healthcare_professional(id)
                    name: healthcare_professional_id
                    type: int

    - changeSet:
        id: addColumn-alias-diary
        author: mmalyvarni
        comment: Add column alias to diary table
        changes:
          - addColumn:
              tableName: diary
              columns:
                - column:
                    name: alias
                    type: varchar(100)

    - changeSet:       
        id: add-column-two_factor_authentication_secret-user
        comment: Add two_factor_authentication_secret column in users table
        author: tmedina
        changes:
          - addColumn:
              columns:
                - column:
                    name: two_factor_authentication_secret
                    type: varchar(64)
              tableName: users

    - changeSet:
        id: update-v_hospital_users-add-two_factor_authentication_enabled-column
        author: tmedina
        dbms: postgresql
        changes:
          - createView:
              viewName: v_hospital_users
              fullDefinition: false
              replaceIfExists: true
              schemaName: public
              selectQuery: |-
                SELECT u.id as user_id, u.username, u.enable, u.last_login, up.person_id,
                  CASE WHEN u.two_factor_authentication_secret IS NOT NULL THEN true ELSE false END as two_factor_authentication_enabled
                FROM users u
                INNER JOIN user_person as up ON (u.id = up.user_id)
                UNION
                SELECT u.id as user_id, u.username, u.enable, u.last_login, -1,
                  CASE WHEN u.two_factor_authentication_secret IS NOT NULL THEN true ELSE false END as two_factor_authentication_enabled
                FROM users u
                WHERE u.id NOT IN (SELECT up.user_id FROM user_person as up)

    - changeSet:
        id: add-column-two_factor_authentication_enabled-users
        comment: Add two_factor_authentication_enabled column in users table
        author: tmedina
        changes:
          - addColumn:
              columns:
                constraints:
                  nullable: false
                name: two_factor_authentication_enabled
                type: boolean
                defaultValue: ${boolean.false}
              tableName: users

    - changeSet:
        id: new-update-v_hospital_users-add-two_factor_authentication_enabled-column
        author: tmedina
        dbms: postgresql
        changes:
          - createView:
              viewName: v_hospital_users
              fullDefinition: false
              replaceIfExists: true
              schemaName: public
              selectQuery: |-
                SELECT u.id as user_id, u.username, u.enable, u.last_login, up.person_id,
                  CASE WHEN (u.two_factor_authentication_secret IS NOT NULL AND u.two_factor_authentication_enabled = true) THEN true
                    ELSE false END as two_factor_authentication_enabled
                FROM users u
                INNER JOIN user_person as up ON (u.id = up.user_id)
                UNION
                SELECT u.id as user_id, u.username, u.enable, u.last_login, -1,
                  CASE WHEN u.two_factor_authentication_secret IS NOT NULL THEN true ELSE false END as two_factor_authentication_enabled
                FROM users u
                WHERE u.id NOT IN (SELECT up.user_id FROM user_person as up)

    - changeSet:
        id: 0.1.41-7
        comment: Create view v_available_professional
        author: etrapani
        changes:
          - createView:
              viewName: v_available_professional
              fullDefinition: false
              replaceIfExists: true
              selectQuery: |-
                SELECT hp.id, hp.person_id,
                      CAST(first_name AS VARCHAR(255)), CAST(last_name AS VARCHAR(255)),identification_type_id, identification_number
                FROM healthcare_professional hp
                JOIN person p on hp.person_id = p.id
                WHERE hp.id IN (SELECT DISTINCT pp.healthcare_professional_id FROM professional_professions pp WHERE pp.deleted = false)