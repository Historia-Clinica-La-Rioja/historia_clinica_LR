---
- name: Ensure the system can use the HTTPS transport for APT.
  stat:
    path: /usr/lib/apt/methods/https
  register: apt_https_transport

- name: Install APT HTTPS transport.
  apt:
    name: "apt-transport-https"
    state: present
    update_cache: true
  when: not apt_https_transport.stat.exists

- name: Install basic packages
  package:
    name: ['vim', 'aptitude', 'bash-completion', 'tmux', 'tree',
           'htop', 'wget', 'unzip', 'curl', 'git']
    state: present
    update_cache: true

- name: Install Default Java (Debian/Ubuntu)
  apt:
    name: "openjdk-{{ jdk_major_version }}-jre"
    state: present

- name: Ensure tomcat is not running
  service:
    name: tomcat
    state: stopped
  failed_when: false

- name: Add tomcat group
  group:
    name: tomcat

- name: Add "tomcat" user
  user:
    name: tomcat
    group: tomcat
    home: "{{ CATALINA_HOME }}"
    createhome: false
    system: true

- name: Download Tomcat
  get_url:
    url: "{{ tomcat_archive_url }}"
    dest: "{{ tomcat_archive_dest }}"

- name: Create a tomcat directory
  file:
    path: "{{ CATALINA_HOME }}"
    state: directory
    owner: tomcat
    group: tomcat

- name: Extract tomcat archive
  unarchive:
    src: "{{ tomcat_archive_dest }}"
    dest: "{{ CATALINA_HOME }}"
    owner: tomcat
    group: tomcat
    remote_src: true
    extra_opts: "--strip-components=1"
    creates: "{{ CATALINA_HOME }}bin"

- name: Copy tomcat service file
  template:
    src: templates/tomcat.service.j2
    dest: /etc/systemd/system/tomcat.service
  when: ansible_service_mgr == "systemd"

- name: Start and enable tomcat
  service:
    daemon_reload: true
    name: tomcat
    state: started
    enabled: true
  when: ansible_service_mgr == "systemd"
